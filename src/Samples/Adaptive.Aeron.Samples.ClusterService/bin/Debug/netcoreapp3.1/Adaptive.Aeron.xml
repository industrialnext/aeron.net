<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Adaptive.Aeron</name>
    </assembly>
    <members>
        <member name="T:Adaptive.Aeron.Aeron">
            <summary>
            Aeron entry point for communicating to the Media Driver for creating <seealso cref="T:Adaptive.Aeron.Publication"/>s and <seealso cref="T:Adaptive.Aeron.Subscription"/>s.
            Use an <seealso cref="T:Adaptive.Aeron.Aeron.Context"/> to configure the Aeron object.
            
            A client application requires only one Aeron object per Media Driver.
            
            <b>Note:</b> If <seealso cref="M:Adaptive.Aeron.Aeron.Context.ErrorHandler(Adaptive.Agrona.ErrorHandler)"/> is not set and a <seealso cref="T:Adaptive.Aeron.Exceptions.DriverTimeoutException"/>
            occurs then the process will face the wrath of <seealso cref="M:System.Environment.Exit(System.Int32)"/>. See <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.DEFAULT_ERROR_HANDLER"/>.
            
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.NULL_VALUE">
            <summary>
            Used to represent a null value for when some value is not yet set.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Connect">
            <summary>
            Create an Aeron instance and connect to the media driver with a default <seealso cref="T:Adaptive.Aeron.Aeron.Context"/>.
            
            Threads required for interacting with the media driver are created and managed within the Aeron instance.
            
            </summary>
            <returns> the new <seealso cref="T:Adaptive.Aeron.Aeron"/> instance connected to the Media Driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Connect(Adaptive.Aeron.Aeron.Context)">
            <summary>
            Create an Aeron instance and connect to the media driver.
            <para>
            Threads required for interacting with the media driver are created and managed within the Aeron instance.
            
            </para>
            </summary>
            <param name="ctx"> for configuration of the client. </param>
            <returns> the new <seealso cref="T:Adaptive.Aeron.Aeron"/> instance connected to the Media Driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.PrintCounters(System.IO.StreamWriter)">
            <summary>
            Print out the values from <seealso cref="P:Adaptive.Aeron.Aeron.CountersReader"/> which can be useful for debugging.
            </summary>
             <param name="out"> to where the counters get printed. </param>
        </member>
        <member name="P:Adaptive.Aeron.Aeron.IsClosed">
            <summary>
            Has the client been closed? If not then the CnC file may not be unmapped.
            </summary>
            <returns> true if the client has been explicitly closed otherwise false. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Aeron.Ctx">
            <summary>
            Get the <seealso cref="T:Adaptive.Aeron.Aeron.Context"/> that is used by this client.
            </summary>
            <returns> the <seealso cref="T:Adaptive.Aeron.Aeron.Context"/> that is use by this client. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Aeron.ClientId">
            <summary>
            Get the client identity that has been allocated for communicating with the media driver.
            </summary>
            <returns> the client identity that has been allocated for communicating with the media driver. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Aeron.ConductorAgentInvoker">
            <summary>
            Get the <seealso cref="T:Adaptive.Agrona.Concurrent.AgentInvoker"/> for the client conductor.
            </summary>
            <returns> the <seealso cref="T:Adaptive.Agrona.Concurrent.AgentInvoker"/> for the client conductor. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.IsCommandActive(System.Int64)">
            <summary>
            Is the command still active for a given correlation id.
            </summary>
            <param name="correlationId"> to check if it is still active. </param>
            <returns> true in the command is still in active processing or false if completed successfully or errored. </returns>
            <seealso cref="M:Adaptive.Aeron.Publication.AsyncAddDestination(System.String)"></seealso>
            <seealso cref="M:Adaptive.Aeron.Subscription.AsyncAddDestination(System.String)"></seealso>
            <seealso cref="M:Adaptive.Aeron.Aeron.HasActiveCommands"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.HasActiveCommands">
            <summary>
            Does the client have any active asynchronous commands?
            <para>
            When close operations are performed on <seealso cref="T:Adaptive.Aeron.Publication"/>s, <seealso cref="T:Adaptive.Aeron.Subscription"/>s, and <seealso cref="T:Adaptive.Aeron.Counter"/>s the
            commands are sent asynchronously to the driver. The client tracks active commands in case errors need to be
            reported. If you wish to wait for acknowledgement of close operations then wait for this method to return false.
            
            </para>
            </summary>
            <returns> true if any commands are currently active otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Dispose">
            <summary>
            Clean up and release all Aeron client resources and shutdown conducator thread if not using
            <see cref="M:Adaptive.Aeron.Aeron.Context.UseConductorAgentInvoker(System.Boolean)"/>.
            
            This will close all currently open <see cref="T:Adaptive.Aeron.Publication"/>s, <see cref="T:Adaptive.Aeron.Subscription"/>s and <see cref="T:Adaptive.Aeron.Counter"/>s created
            from this client. To check for the command being acknowledged by the driver.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AddPublication(System.String,System.Int32)">
            <summary>
            Add a <seealso cref="T:Adaptive.Aeron.Publication"/> for publishing messages to subscribers. The publication returned is threadsafe.
            </summary>
            <param name="channel">  for sending the messages known to the media layer. </param>
            <param name="streamId"> within the channel scope. </param>
            <returns> a new <see cref="T:Adaptive.Aeron.ConcurrentPublication"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AddExclusivePublication(System.String,System.Int32)">
            <summary>
            Add an <seealso cref="T:Adaptive.Aeron.ExclusivePublication"/> for publishing messages to subscribers from a single thread.
            </summary>
            <param name="channel">  for sending the messages known to the media layer. </param>
            <param name="streamId"> within the channel scope. </param>
            <returns> a new <see cref="T:Adaptive.Aeron.ExclusivePublication"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AsyncAddPublication(System.String,System.Int32)">
            <summary>
            Asynchronously add a <seealso cref="T:Adaptive.Aeron.Publication"/> for publishing messages to subscribers. The added publication returned
            is threadsafe.
            </summary>
            <param name="channel">  for sending the messages known to the media layer. </param>
            <param name="streamId"> within the channel scope. </param>
            <returns> the registration id of the publication which can be used to get the added publication. </returns>
            <seealso cref="M:Adaptive.Aeron.Aeron.GetPublication(System.Int64)"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AsyncAddExclusivePublication(System.String,System.Int32)">
            <summary>
            Asynchronously add a <seealso cref="T:Adaptive.Aeron.Publication"/> for publishing messages to subscribers from a single thread.
            </summary>
            <param name="channel">  for sending the messages known to the media layer. </param>
            <param name="streamId"> within the channel scope. </param>
            <returns> the registration id of the publication which can be used to get the added exclusive publication. </returns>
            <seealso cref="M:Adaptive.Aeron.Aeron.GetExclusivePublication(System.Int64)"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.GetPublication(System.Int64)">
            <summary>
            Get a <seealso cref="T:Adaptive.Aeron.Publication"/> for publishing messages to subscribers. The publication returned is threadsafe.
            </summary>
            <param name="registrationId"> returned from <seealso cref="M:Adaptive.Aeron.Aeron.AsyncAddPublication(System.String,System.Int32)"/>. </param>
            <returns> a new <seealso cref="T:Adaptive.Aeron.ConcurrentPublication"/> when available otherwise null. </returns>
            <seealso cref="M:Adaptive.Aeron.Aeron.AsyncAddPublication(System.String,System.Int32)"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.GetExclusivePublication(System.Int64)">
            <summary>
            Get a single threaded <seealso cref="T:Adaptive.Aeron.Publication"/> for publishing messages to subscribers.
            </summary>
            <param name="registrationId"> returned from <seealso cref="M:Adaptive.Aeron.Aeron.AsyncAddExclusivePublication(System.String,System.Int32)"/>. </param>
            <returns> a new <seealso cref="T:Adaptive.Aeron.ExclusivePublication"/> when available otherwise null. </returns>
            <seealso cref="M:Adaptive.Aeron.Aeron.AsyncAddExclusivePublication(System.String,System.Int32)"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AddSubscription(System.String,System.Int32)">
            <summary>
            Add a new <seealso cref="T:Adaptive.Aeron.Subscription"/> for subscribing to messages from publishers.
            </summary>
            <param name="channel">  for receiving the messages known to the media layer. </param>
            <param name="streamId"> within the channel scope. </param>
            <returns> the <seealso cref="T:Adaptive.Aeron.Subscription"/> for the channel and streamId pair. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AddSubscription(System.String,System.Int32,Adaptive.Aeron.AvailableImageHandler,Adaptive.Aeron.UnavailableImageHandler)">
            <summary>
            Add a new <seealso cref="T:Adaptive.Aeron.Subscription"/> for subscribing to messages from publishers.
              
            This method will override the default handlers from the <seealso cref="T:Adaptive.Aeron.Aeron.Context"/>, i.e.
            <seealso cref="M:Adaptive.Aeron.Aeron.Context.AvailableImageHandler(Adaptive.Aeron.AvailableImageHandler)"/> and
            <seealso cref="M:Adaptive.Aeron.Aeron.Context.UnavailableImageHandler(Adaptive.Aeron.UnavailableImageHandler)"/>. Null values are valid and will
            result in no action being taken.
            </summary>
            <param name="channel">                 for receiving the messages known to the media layer. </param>
            <param name="streamId">                within the channel scope. </param>
            <param name="availableImageHandler">   called when <seealso cref="T:Adaptive.Aeron.Image"/>s become available for consumption. Null is valid if no action is to be taken.</param>
            <param name="unavailableImageHandler"> called when <seealso cref="T:Adaptive.Aeron.Image"/>s go unavailable for consumption. Null is valid if no action is to be taken.</param>
            <returns> the <seealso cref="T:Adaptive.Aeron.Subscription"/> for the channel and streamId pair. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.NextCorrelationId">
            <summary>
            Generate the next correlation id that is unique for the connected Media Driver.
            
            This is useful generating correlation identifiers for pairing requests with responses in a clients own
            application protocol.
            
            This method is thread safe and will work across processes that all use the same media driver.
            </summary>
            <returns> next correlation id that is unique for the Media Driver. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Aeron.CountersReader">
            <summary>
            Get the <see cref="P:Adaptive.Aeron.Aeron.CountersReader"/> for the Aeron media driver counters.
            </summary>
            <returns> new <see cref="P:Adaptive.Aeron.Aeron.CountersReader"/> for the Aeron media driver in use.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AddCounter(System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Allocate a counter on the media driver and return a <seealso cref="T:Adaptive.Aeron.Counter"/> for it.
            <para>
            The counter should be freed by calling <seealso cref="M:Adaptive.Aeron.Counter.Dispose"/>.
              
            </para>
            </summary>
            <param name="typeId">      for the counter. </param>
            <param name="keyBuffer">   containing the optional key for the counter. </param>
            <param name="keyOffset">   within the keyBuffer at which the key begins. </param>
            <param name="keyLength">   of the key in the keyBuffer. </param>
            <param name="labelBuffer"> containing the mandatory label for the counter. The label should not be length prefixed. </param>
            <param name="labelOffset"> within the labelBuffer at which the label begins. </param>
            <param name="labelLength"> of the label in the labelBuffer. </param>
            <returns> the newly allocated counter. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AddCounter(System.Int32,System.String)">
            <summary>
            Allocate a counter on the media driver and return a <seealso cref="T:Adaptive.Aeron.Counter"/> for it.
            <para>
            The counter should be freed by calling <seealso cref="M:Adaptive.Aeron.Counter.Dispose"/>.
            
            </para>
            </summary>
            <param name="typeId"> for the counter. </param>
            <param name="label">  for the counter. It should be US-ASCII. </param>
            <returns> the newly allocated counter. </returns>
            <seealso cref="M:Adaptive.Agrona.Concurrent.Status.CountersManager.Allocate(System.String,System.Int32)"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AddAvailableCounterHandler(Adaptive.Aeron.AvailableCounterHandler)">
            <summary>
            Add a handler to the list be called when <seealso cref="T:Adaptive.Aeron.Counter"/>s become available.
            </summary>
            <param name="handler"> to be called when <seealso cref="T:Adaptive.Aeron.Counter"/>s become available. </param>
            <returns> registration id for the handler which can be used to remove it. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.RemoveAvailableCounterHandler(System.Int64)">
            <summary>
            Remove a previously added handler to the list be called when <seealso cref="T:Adaptive.Aeron.Counter"/>s become available.
            </summary>
            <param name="registrationId"> to be removed which was returned from add method. </param>
            <returns> true if found and removed otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.RemoveAvailableCounterHandler(Adaptive.Aeron.AvailableCounterHandler)">
            <summary>
            Remove a previously added handler to the list be called when <seealso cref="T:Adaptive.Aeron.Counter"/>s become available.
            </summary>
            <param name="handler"> to be removed. </param>
            <returns> true if found and removed otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AddUnavailableCounterHandler(Adaptive.Aeron.UnavailableCounterHandler)">
            <summary>
            Add a handler to the list be called when <seealso cref="T:Adaptive.Aeron.Counter"/>s become unavailable.
            </summary>
            <param name="handler"> to be called when <seealso cref="T:Adaptive.Aeron.Counter"/>s become unavailable. </param>
            <returns> registration id for the handler which can be used to remove it. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.RemoveUnavailableCounterHandler(System.Int64)">
            <summary>
            Remove a previously added handler to the list be called when <seealso cref="T:Adaptive.Aeron.Counter"/>s become unavailable.
            </summary>
            <param name="registrationId"> to be removed which was returned from add method. </param>
            <returns> true if found and removed otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.RemoveUnavailableCounterHandler(Adaptive.Aeron.UnavailableCounterHandler)">
            <summary>
            Remove a previously added handler to the list be called when <seealso cref="T:Adaptive.Aeron.Counter"/>s become unavailable.
            </summary>
            <param name="handler"> to be removed. </param>
            <returns> true if found and removed otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.AddCloseHandler(System.Action)">
            <summary>
            Add a handler to the list be called when the Aeron client is closed.
            </summary>
            <param name="handler"> to be called when the Aeron client is closed. </param>
            <returns> registration id for the handler which can be used to remove it. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.RemoveCloseHandler(System.Action)">
            <summary>
            Remove a previously added handler to the list be called when the Aeron client is closed.
            </summary>
            <param name="handler"> to be removed. </param>
            <returns> true if found and removed otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.RemoveCloseHandler(System.Int64)">
            <summary>
            Remove a previously added handler to the list be called when the Aeron client is closed.
            </summary>
            <param name="registrationId"> of the handler from when it was added. </param>
            <returns> true if found and removed otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.InternalClose">
            <summary>
            Called by the <seealso cref="T:Adaptive.Aeron.ClientConductor"/> if the client should be terminated due to timeout.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Configuration.AWAITING_IDLE_SLEEP_MS">
            <summary>
            Duration in milliseconds for which the client will sleep when awaiting a response from the driver.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Configuration.RESOURCE_LINGER_DURATION_PROP_NAME">
            <summary>
            Duration to wait while lingering an entity such as an <seealso cref="T:Adaptive.Aeron.Image"/> before deleting underlying resources
            such as memory mapped files.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Configuration.RESOURCE_LINGER_DURATION_DEFAULT_NS">
            <summary>
            Default duration a resource should linger before deletion.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Configuration.CLOSE_LINGER_DURATION_PROP_NAME">
            <summary>
            Duration to linger on close so that publishers subscribers have time to notice closed resources.
            This value can be set to a few seconds if the application is likely to experience CPU starvation or
            long GC pauses.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Configuration.CLOSE_LINGER_DURATION_DEFAULT_NS">
            <summary>
            Default duration to linger on close so that publishers subscribers have time to notice closed resources.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Configuration.PRE_TOUCH_MAPPED_MEMORY_PROP_NAME">
            <summary>
            Should memory-mapped files be pre-touched so that they are already faulted into a process.
            <para>
            Pre-touching files can result in it taking taking longer for resources to become available in
            return for avoiding later pauses due to page faults.
            </para>
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Configuration.PRE_TOUCH_MAPPED_MEMORY_DEFAULT">
            <summary>
            Default for if a memory-mapped filed should be pre-touched to fault it into a process.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Configuration.DEFAULT_ERROR_HANDLER">
            <summary>
            The Default handler for Aeron runtime exceptions.
            When a <seealso cref="T:Adaptive.Aeron.Exceptions.DriverTimeoutException"/> is encountered, this handler will exit the program.
            <para>
            The error handler can be overridden by supplying an <seealso cref="T:Adaptive.Aeron.Aeron.Context"/> with a custom handler.
            
            </para>
            </summary>
            <seealso cref="M:Adaptive.Aeron.Aeron.Context.ErrorHandler(Adaptive.Agrona.ErrorHandler)" />
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Configuration.ResourceLingerDurationNs">
            <summary>
            Duration to wait while lingering an entity such as an <seealso cref="T:Adaptive.Aeron.Image"/> before deleting underlying resources
            such as memory mapped files.
            </summary>
            <returns> duration in nanoseconds to wait before deleting an expired resource. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.RESOURCE_LINGER_DURATION_PROP_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Configuration.CloseLingerDurationNs">
            <summary>
            Duration to wait while lingering an entity such as an <seealso cref="T:Adaptive.Aeron.Image"/> before deleting underlying resources
            such as memory mapped files.
            </summary>
            <returns> duration in nanoseconds to wait before deleting an expired resource. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.RESOURCE_LINGER_DURATION_PROP_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Configuration.PreTouchMappedMemory">
            <summary>
            Should memory-mapped files be pre-touched so that they are already faulted into a process.
            </summary>
            <returns> true if memory mappings should be pre-touched, otherwise false. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.PRE_TOUCH_MAPPED_MEMORY_PROP_NAME"/>
        </member>
        <member name="T:Adaptive.Aeron.Aeron.Context">
             <summary>
             Provides a means to override configuration for an <seealso cref="T:Adaptive.Aeron.Aeron"/> class via the <seealso cref="M:Adaptive.Aeron.Aeron.Connect(Adaptive.Aeron.Aeron.Context)"/>
             method and its overloads. It gives applications some control over the interactions with the Aeron Media Driver.
             It can also set up error handling as well as application callbacks for image information from the Media Driver.
             
             A number of the properties are for testing and should not be set by end users.
             
             <b>Note:</b> Do not reuse instances of the context across different <seealso cref="T:Adaptive.Aeron.Aeron"/> clients.
            
             The context will be owned be <see cref="T:Adaptive.Aeron.ClientConductor"/> after a successful
             <see cref="M:Adaptive.Aeron.Aeron.Connect(Adaptive.Aeron.Aeron.Context)"/> and closed via <see cref="M:Adaptive.Aeron.Aeron.Dispose"/>
             </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.AERON_DIR_PROP_NAME">
            <summary>
            The top level Aeron directory used for communication between a Media Driver and client.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.AERON_DIR_PROP_DEFAULT">
            <summary>
            The value of the top level Aeron directory unless overridden by <seealso cref="M:Adaptive.Aeron.Aeron.Context.AeronDirectoryName"/>
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.IPC_MEDIA">
            <summary>
            Media type used for IPC shared memory from <seealso cref="T:Adaptive.Aeron.Publication"/> to <seealso cref="T:Adaptive.Aeron.Subscription"/> channels.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.UDP_MEDIA">
            <summary>
            Media type used for UDP sockets from <seealso cref="T:Adaptive.Aeron.Publication"/> to <seealso cref="T:Adaptive.Aeron.Subscription"/> channels.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.IPC_CHANNEL">
            <summary>
            URI base used for IPC channels for <seealso cref="T:Adaptive.Aeron.Publication"/>s and <seealso cref="T:Adaptive.Aeron.Subscription"/>s
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.UDP_CHANNEL">
            <summary>
            URI base used for UDP channels for <seealso cref="T:Adaptive.Aeron.Publication"/>s and <seealso cref="T:Adaptive.Aeron.Subscription"/>s
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.SPY_PREFIX">
            <summary>
            URI used for Spy <see cref="T:Adaptive.Aeron.Subscription"/>s whereby an outgoing unicast or multicast publication can be spied on
            by IPC without receiving it again via the network.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.ENDPOINT_PARAM_NAME">
            <summary>
            The address and port used for a UDP channel. For the publisher it is the socket to send to,
            for the subscriber it is the socket to receive from.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.INTERFACE_PARAM_NAME">
            <summary>
            The network interface via which the socket will be routed.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.DEBUG_TIMEOUT_PROP_NAME">
            <summary>
            Property name for the timeout to use in debug mode. By default, this is not set and the configured
            timeouts will be used. Setting this value adjusts timeouts to make debugging easier.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.DRIVER_TIMEOUT_MS">
            <summary>
            Timeout in which the driver is expected to respond.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.NULL_SESSION_ID">
            <summary>
            Value to represent a sessionId that is not to be used.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.INITIAL_TERM_ID_PARAM_NAME">
            <summary>
            Initial term id to be used when creating an <seealso cref="T:Adaptive.Aeron.ExclusivePublication"/>.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.TERM_ID_PARAM_NAME">
            <summary>
            Current term id to be used when creating an <seealso cref="T:Adaptive.Aeron.ExclusivePublication"/>.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.TERM_OFFSET_PARAM_NAME">
            <summary>
            Current term offset to be used when creating an <seealso cref="T:Adaptive.Aeron.ExclusivePublication"/>.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.TERM_LENGTH_PARAM_NAME">
            <summary>
            The param name to be used for the term length as a channel URI param.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.MTU_LENGTH_PARAM_NAME">
            <summary>
            MTU length parameter name for using as a channel URI param. If this is greater than the network MTU for UDP
            then the packet will be fragmented and can amplify the impact of loss.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.TTL_PARAM_NAME">
            <summary>
            Time To Live param for a multicast datagram.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_PARAM_NAME">
            <summary>
            The param for the control channel IP address and port for multi-destination-cast semantics.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_PARAM_NAME">
            <summary>
            Key for the mode of control that such be used for multi-destination-cast semantics.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.MTU_LENGTH_URI_PARAM_NAME">
            <summary>
            MTU length parameter name for using as a channel URI param.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE">
            <summary>
            Key for the mode of control that such be used for multi-destination-cast semantics.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_MANUAL">
            <summary>
            Valid value for <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE"/> when manual control is desired.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_DYNAMIC">
            <summary>
            Valid value for <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_PARAM_NAME"/> when dynamic control is desired. Default value.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.SESSION_ID_PARAM_NAME">
            <summary>
            Key for the session id for a publication or restricted subscription.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.LINGER_PARAM_NAME">
            <summary>
            Key for timeout a publication to linger after draining in nanoseconds.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.RELIABLE_STREAM_PARAM_NAME">
            <summary>
            Parameter name for channel URI param to indicate if a subscribed stream must be reliable or not.
            Value is boolean with true to recover loss and false to gap fill.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME">
            <summary>
            Key for the tags for a channel
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.TAG_PREFIX">
            <summary>
            Qualifier for a value which is a tag for reference. This prefix is use in the param value.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.SPARSE_PARAM_NAME">
            <summary>
            Parameter name for channel URI param to indicate if term buffers should be sparse. Value is boolean.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.ALIAS_PARAM_NAME">
             <summary>
             Parameter name for channel URI param to indicate an alias for the given URI. Value not interpreted by Aeron.
            
             This is a reserved application level param used to identify a particular channel for application purposes.
             </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.EOS_PARAM_NAME">
            <summary>
            Parameter name for channel URI param to indicate if End of Stream (EOS) should be sent or not. Value is boolean.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.TETHER_PARAM_NAME">
            <summary>
            Parameter name for channel URI param to indicate if a subscription should tether for local flow control.
            Value is boolean. A tether only applies when there is more than one matching active subscription. If tether is
            true then that subscription is included in flow control. If only one subscription then it tethers pace.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.GROUP_PARAM_NAME">
            <summary>
            Parameter name for channel URI param to indicate if a Subscription represents a group member or individual
            from the perspective of message reception. This can inform loss handling and similar semantics.
            <para>
            When configuring a subscription for an MDC publication then should be added as this is effective multicast.
               
            </para>
            </summary>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_PARAM_NAME"></seealso>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_PARAM_NAME"></seealso>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.REJOIN_PARAM_NAME">
            <summary>
            Parameter name for Subscription URI param to indicate if Images that go unavailable should be allowed to
            rejoin after a short cooldown or not.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.CONGESTION_CONTROL_PARAM_NAME">
            <summary>
            Parameter name for Subscription URI param to indicate the congestion control algorithm to be used.
            Options include {@code static} and {@code cubic}.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.FLOW_CONTROL_PARAM_NAME">
            <summary>
            Parameter name for Publication URI param to indicate the flow control strategy to be used.
            Options include {@code min}, {@code max}, and {@code pref}.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.GROUP_TAG_PARAM_NAME">
            <summary>
            Parameter name for Subscription URI param to indicate the receiver tag to be sent in SMs.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.SPIES_SIMULATE_CONNECTION_PARAM_NAME">
            <summary>
            Parameter name for Publication URI param to indicate whether spy subscriptions should simulate a connection.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.SOCKET_SNDBUF_PARAM_NAME">
            <summary>
            Parameter name for the underlying OS socket send buffer length.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.SOCKET_RCVBUF_PARAM_NAME">
            <summary>
            Parameter name for the underlying OS socket receive buffer length.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.RECEIVER_WINDOW_LENGTH_PARAM_NAME">
            <summary>
            Parameter name for the congestion control's initial receiver window length.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.MEDIA_RCV_TIMESTAMP_OFFSET_PARAM_NAME">
            <summary>
            Parameter name of the offset for the media receive timestamp to be inserted into the incoming message on a
            subscription. The special value of 'reserved' can be used to insert into the reserved value field. Media
            receive timestamp is taken as the earliest possible point after the packet is received from the network. This
            is only supported in the C media driver, the Java Media Driver will generate an error if used.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.CHANNEL_RECEIVE_TIMESTAMP_OFFSET_PARAM_NAME">
            <summary>
            Parameter name of the offset for the channel receive timestamp to be inserted into the incoming message on a
            subscription. The special value of 'reserved' can be used to insert into the reserved value field. Channel
            receive timestamp is taken as soon a possible after the packet is received by Aeron receiver from the transport
            bindings.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.CHANNEL_SEND_TIMESTAMP_OFFSET_PARAM_NAME">
            <summary>
            Parameter name of the offset for the channel send timestamp to be inserted into the outgoing message
            on a publication. The special value of 'reserved' can be used to insert into the reserved value
            field. Channel send timestamp is taken shortly before passing the message over to the configured transport
            bindings.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Aeron.Context.RESERVED_OFFSET">
            <summary>
            Placeholder value to use in URIs to specify that a timestamp should be stored in the reserved value field.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.GetAeronDirectoryName">
            <summary>
            Get the default directory name to be used if <seealso cref="M:Adaptive.Aeron.Aeron.Context.AeronDirectoryName(System.String)"/> is not set. This will take
            the <seealso cref="F:Adaptive.Aeron.Aeron.Context.AERON_DIR_PROP_NAME"/> if set and if not then <seealso cref="F:Adaptive.Aeron.Aeron.Context.AERON_DIR_PROP_DEFAULT"/>.
            </summary>
            <returns> the default directory name to be used if <seealso cref="M:Adaptive.Aeron.Aeron.Context.AeronDirectoryName(System.String)"/> is not set. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Aeron.Context.IsConcluded">
            <summary>
            Has the context had the <seealso cref="M:Adaptive.Aeron.Aeron.Context.Conclude"/> method called.
            </summary>
            <returns> true of the <seealso cref="M:Adaptive.Aeron.Aeron.Context.Conclude"/> method has been called. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ConcludeAeronDirectory">
            <summary>
            Conclude the <seealso cref="M:Adaptive.Aeron.Aeron.Context.AeronDirectory"/> so it does not need to keep being recreated.
            </summary>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.Clone">
            <summary>
            Perform a shallow copy of the object.
            </summary>
            <returns> a shallow copy of the object. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.Conclude">
            <summary>
            This is called automatically by <seealso cref="M:Adaptive.Aeron.Aeron.Connect"/> and its overloads.
            There is no need to call it from a client application. It is responsible for providing default
            values for options that are not individually changed through field setters.
            </summary>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ClientId">
            <summary>
            Get the client identity that has been allocated for communicating with the media driver.
            </summary>
            <returns> the client identity that has been allocated for communicating with the media driver.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.CncFile">
            <summary>
            Get the command and control file.
            </summary>
            <returns> The command and control file. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.UseConductorAgentInvoker(System.Boolean)">
            <summary>
            Should an <see cref="T:Adaptive.Agrona.Concurrent.AgentInvoker"/> be used for running the <see cref="T:Adaptive.Aeron.ClientConductor"/> rather than run it on
            a thread with an <see cref="T:Adaptive.Agrona.Concurrent.AgentRunner"/>
            </summary>
            <param name="useConductorAgentInvoker"> use <see cref="T:Adaptive.Agrona.Concurrent.AgentInvoker"/> for running the <see cref="T:Adaptive.Aeron.ClientConductor"/></param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.UseConductorAgentInvoker">
            <summary>
            Should an <see cref="T:Adaptive.Agrona.Concurrent.AgentInvoker"/> be used for running the <see cref="T:Adaptive.Aeron.ClientConductor"/> rather than run it on
            a thread with an <see cref="T:Adaptive.Agrona.Concurrent.AgentRunner"/>
            </summary>
            <returns> true if the <see cref="T:Adaptive.Aeron.ClientConductor"/> will be run with an <see cref="T:Adaptive.Agrona.Concurrent.AgentInvoker"/> otherwise false.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.PreTouchMappedMemory(System.Boolean)">
            <summary>
            Should mapped-memory be pre-touched to avoid soft page faults.
            </summary>
            <param name="preTouchMappedMemory"> true if mapped-memory should be pre-touched otherwise false. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.PRE_TOUCH_MAPPED_MEMORY_PROP_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.PreTouchMappedMemory">
            <summary>
            Should mapped-memory be pre-touched to avoid soft page faults.
            </summary>
            <returns> true if mapped-memory should be pre-touched otherwise false. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.PRE_TOUCH_MAPPED_MEMORY_PROP_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.DriverAgentInvoker(Adaptive.Agrona.Concurrent.AgentInvoker)">
            <summary>
            Set the <seealso cref="T:Adaptive.Agrona.Concurrent.AgentInvoker"/> for the Media Driver to be used while awaiting a synchronous response.
            <para>
            Useful for when running on a low thread count scenario.
            
            </para>
            </summary>
            <param name="driverAgentInvoker"> to be invoked while awaiting a response in the client. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.DriverAgentInvoker">
            <summary>
            Get the <seealso cref="T:Adaptive.Agrona.Concurrent.AgentInvoker"/> that is used to run the Media Driver while awaiting a synchronous response.
            </summary>
            <returns> the <seealso cref="T:Adaptive.Agrona.Concurrent.AgentInvoker"/> that is used for running the Media Driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ClientLock(Adaptive.Agrona.Concurrent.ILock)">
            <summary>
            The <see cref="T:Adaptive.Agrona.Concurrent.ILock"/> that is used to provide mutual exclusion in the Aeron client.
            
            If the <see cref="M:Adaptive.Aeron.Aeron.Context.UseConductorAgentInvoker(System.Boolean)"/> is set and only one thread accesses the client
            then the lock can be set to <see cref="T:Adaptive.Agrona.Concurrent.NoOpLock"/> to elide the lock overhead.
            
            </summary>
            <param name="lock"> that is used to provide mutual exclusion in the Aeron client.</param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ClientLock">
            <summary>
            Get the <see cref="T:Adaptive.Agrona.Concurrent.ILock"/> that is used to provide mutual exclusion in the Aeron client.
            </summary>
            <returns> the <see cref="T:Adaptive.Agrona.Concurrent.ILock"/> that is used to provide mutual exclusion in the Aeron client.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.EpochClock(Adaptive.Agrona.Concurrent.IEpochClock)">
            <summary>
            Set the <seealso cref="T:Adaptive.Agrona.Concurrent.IEpochClock"/> to be used for tracking wall clock time when interacting with the driver.
            </summary>
            <param name="clock"> <seealso cref="T:Adaptive.Agrona.Concurrent.IEpochClock"/> to be used for tracking wall clock time when interacting with the driver. </param>
            <returns>this for a fluent API.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.EpochClock">
            <summary>
            Get the <seealso cref="T:Adaptive.Agrona.Concurrent.IEpochClock"/> used by the client for the epoch time in milliseconds.
            </summary>
            <returns> the <seealso cref="T:Adaptive.Agrona.Concurrent.IEpochClock"/> used by the client for the epoch time in milliseconds. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.NanoClock(Adaptive.Agrona.Concurrent.INanoClock)">
            <summary>
            Set the <seealso cref="T:Adaptive.Agrona.Concurrent.INanoClock"/> to be used for tracking high resolution time.
            </summary>
            <param name="clock"> <seealso cref="T:Adaptive.Agrona.Concurrent.INanoClock"/> to be used for tracking high resolution time. </param>
            <returns>this for a fluent API.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.NanoClock">
            <summary>
            Get the <seealso cref="T:Adaptive.Agrona.Concurrent.INanoClock"/> to be used for tracking high resolution time.
            </summary>
            <returns> the <seealso cref="T:Adaptive.Agrona.Concurrent.INanoClock"/> to be used for tracking high resolution time. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.IdleStrategy(Adaptive.Agrona.Concurrent.IIdleStrategy)">
            <summary>
            Provides an <seealso cref="T:Adaptive.Agrona.Concurrent.IIdleStrategy"/> for the thread responsible for the client duty cycle.
            </summary>
            <param name="idleStrategy"> Thread idle strategy for the client duty cycle. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.IdleStrategy">
            <summary>
            Get the <seealso cref="T:Adaptive.Agrona.Concurrent.IIdleStrategy"/> employed by the client for the client duty cycle.
            </summary>
            <returns> the <seealso cref="T:Adaptive.Agrona.Concurrent.IIdleStrategy"/> employed by the client for the client duty cycle. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.AwaitingIdleStrategy(Adaptive.Agrona.Concurrent.IIdleStrategy)">
            <summary>
            Provides an <seealso cref="T:Adaptive.Agrona.Concurrent.IIdleStrategy"/> to be used when awaiting a response from the Media Driver.
            </summary>
            <param name="idleStrategy"> Thread idle strategy for awaiting a response from the Media Driver. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.AwaitingIdleStrategy">
            <summary>
            The <seealso cref="T:Adaptive.Agrona.Concurrent.IIdleStrategy"/> to be used when awaiting a response from the Media Driver.
            <para>
            This can be change to a <seealso cref="T:Adaptive.Agrona.Concurrent.BusySpinIdleStrategy"/> or <seealso cref="T:Adaptive.Agrona.Concurrent.YieldingIdleStrategy"/> for lower response time,
            especially for adding counters or releasing resources, at the expense of CPU usage.
            
            </para>
            </summary>
            <returns> the <seealso cref="T:Adaptive.Agrona.Concurrent.IIdleStrategy"/> to be used when awaiting a response from the Media Driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ToClientBuffer(Adaptive.Agrona.Concurrent.Broadcast.CopyBroadcastReceiver)">
            <summary>
            This method is used for testing and debugging.
            </summary>
            <param name="toClientBuffer"> Injected CopyBroadcastReceiver </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ToClientBuffer">
            <summary>
            The buffer used for communicating from the media driver to the Aeron client.
            </summary>
            <returns> the buffer used for communicating from the media driver to the Aeron client. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ToDriverBuffer">
            <summary>
            Get the <seealso cref="T:Adaptive.Agrona.Concurrent.RingBuffer.IRingBuffer"/> used for sending commands to the media driver.
            </summary>
            <returns> the <seealso cref="T:Adaptive.Agrona.Concurrent.RingBuffer.IRingBuffer"/> used for sending commands to the media driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.DriverProxy(Adaptive.Aeron.DriverProxy)">
            <summary>
            Set the proxy for communicating with the media driver.
            </summary>
            <param name="driverProxy"> for communicating with the media driver. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.DriverProxy">
            <summary>
            Get the proxy for communicating with the media driver.
            </summary>
            <returns> the proxy for communicating with the media driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.LogBuffersFactory(Adaptive.Aeron.ILogBuffersFactory)">
            <summary>
            This method is used for testing and debugging.
            </summary>
            <param name="logBuffersFactory"> Injected LogBuffersFactory </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.LogBuffersFactory">
            <summary>
            Get the factory for making log buffers.
            </summary>
            <returns> the factory for making log buffers. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ErrorHandler(Adaptive.Agrona.ErrorHandler)">
            <summary>
            Handle Aeron exceptions in a callback method. The default behavior is defined by
            <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.DEFAULT_ERROR_HANDLER"/>. This is the error handler which will be used if an error occurs
            during the callback for poll operations such as <seealso cref="M:Adaptive.Aeron.Subscription.Poll(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)"/>.
            
            The error handler can be reset after <seealso cref="M:Adaptive.Aeron.Aeron.Connect"/> and the latest version will always be used
            so that the boot-strapping process can be performed such as replacing the default one with a
            <seealso cref="T:Adaptive.Agrona.Concurrent.CountedErrorHandler"/>.
            </summary>
            <param name="errorHandler"> Method to handle objects of type Throwable. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="T:Adaptive.Aeron.Exceptions.DriverTimeoutException" />
            <seealso cref="T:Adaptive.Aeron.Exceptions.RegistrationException" />
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ErrorHandler">
            <summary>
            Get the error handler that will be called for errors reported back from the media driver or during poll operations.
            </summary>
            <returns> the error handler that will be called for errors reported back from the media driver or during poll operations. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.SubscriberErrorHandler(Adaptive.Agrona.ErrorHandler)">
            <summary>
            The error handler which will be used if an error occurs during the callback for poll operations such as
            <seealso cref="M:Adaptive.Aeron.Subscription.Poll(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)"/>. The default will be <seealso cref="M:Adaptive.Aeron.Aeron.Context.ErrorHandler"/> if not set.
            </summary>
            <param name="errorHandler"> Method to handle objects of type Throwable. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="T:Adaptive.Aeron.Exceptions.DriverTimeoutException"/>
            <seealso cref="T:Adaptive.Aeron.Exceptions.RegistrationException"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.SubscriberErrorHandler">
            <summary>
            This is the error handler which will be used if an error occurs during the callback for poll operations
            such as <seealso cref="M:Adaptive.Aeron.Subscription.Poll(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)"/>. The default will be <seealso cref="M:Adaptive.Aeron.Aeron.Context.ErrorHandler"/> if not
            set. To have <seealso cref="M:Adaptive.Aeron.Subscription.Poll(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)"/> not delegate then set with
            <seealso cref="T:Adaptive.Aeron.RethrowingErrorHandler"/>.
            </summary>
            <returns> the error handler that will be called for errors reported back from the media driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.AvailableImageHandler(Adaptive.Aeron.AvailableImageHandler)">
            <summary>
            Setup a default callback for when an <seealso cref="T:Adaptive.Aeron.Image"/> is available.
            </summary>
            <param name="handler"> Callback method for handling available image notifications. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.AvailableImageHandler">
            <summary>
            Get the default callback handler for notifying when <seealso cref="T:Adaptive.Aeron.Image"/>s become available.
            </summary>
            <returns> the callback handler for notifying when <seealso cref="T:Adaptive.Aeron.Image"/>s become available. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.UnavailableImageHandler(Adaptive.Aeron.UnavailableImageHandler)">
            <summary>
            Setup a default callback for when an <seealso cref="T:Adaptive.Aeron.Image"/> is unavailable.
            </summary>
            <param name="handler"> Callback method for handling unavailable image notifications. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.UnavailableImageHandler">
            <summary>
            Get the callback handler for when an <seealso cref="T:Adaptive.Aeron.Image"/> is unavailable.
            </summary>
            <returns> the callback handler for when an <seealso cref="T:Adaptive.Aeron.Image"/> is unavailable. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.AvailableCounterHandler(Adaptive.Aeron.AvailableCounterHandler)">
            <summary>
            Setup a callback for when a counter is available. This will be added to the list first before
            additional handler are added with <seealso cref="M:Adaptive.Aeron.Aeron.AddAvailableCounterHandler(Adaptive.Aeron.AvailableCounterHandler)"/>.
            </summary>
            <param name="handler"> to be called for handling available counter notifications. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.AvailableCounterHandler">
            <summary>
            Get the callback handler for when a counter is available.
            </summary>
            <returns> the callback handler for when a counter is available. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.UnavailableCounterHandler(Adaptive.Aeron.UnavailableCounterHandler)">
            <summary>
            Setup a callback for when a counter is unavailable. This will be added to the list first before
            additional handler are added with <seealso cref="M:Adaptive.Aeron.Aeron.AddUnavailableCounterHandler(Adaptive.Aeron.UnavailableCounterHandler)"/>.
            </summary>
            <param name="handler"> to be called for handling unavailable counter notifications. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.UnavailableCounterHandler">
            <summary>
            Get the callback handler for when a counter is unavailable.
            </summary>
            <returns> the callback handler for when a counter is unavailable. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.CloseHandler(System.Action)">
            <summary>
            Set a <seealso cref="T:System.Action"/> that is called when the client is closed by timeout or normal means.
                   
            It is not safe to call any API functions from any threads after this hook is called. In addition, any
            in flight calls may still cause faults. Thus treating this as a hard error and
            terminate the process in this hook as soon as possible is recommended.
            </summary>
            <param name="handler"> that is called when the client is closed. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.CloseHandler">
            <summary>
            Get the <seealso cref="T:System.Action"/> that is called when the client is closed by timeout or normal means.
            </summary>
            <returns> the <seealso cref="T:System.Action"/> that is called when the client is closed. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.CountersMetaDataBuffer">
            <summary>
            Get the buffer containing the counter metadata. These counters are R/W for the driver, read only for all
            other users.
            </summary>
            <returns> The buffer storing the counter metadata. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.CountersMetaDataBuffer(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
            Set the buffer containing the counter metadata. Testing/internal purposes only.
            </summary>
            <param name="countersMetaDataBuffer"> The new counter metadata buffer. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.CountersValuesBuffer">
            <summary>
            Get the buffer containing the counters. These counters are R/W for the driver, read only for all other users.
            </summary>
            <returns> The buffer storing the counters. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.CountersValuesBuffer(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
            Set the buffer containing the counters. Testing/internal purposes only.
            </summary>
            <param name="countersValuesBuffer"> The new counters buffer. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.KeepAliveIntervalNs(System.Int64)">
            <summary>
            Set the interval in nanoseconds for which the client will perform keep-alive operations.
            </summary>
            <param name="value"> the interval in nanoseconds for which the client will perform keep-alive operations. </param>
            <returns> this Aeron.Context for method chaining. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.KeepAliveIntervalNs">
            <summary>
            Get the interval in nanoseconds for which the client will perform keep-alive operations.
            </summary>
            <returns> the interval in nanoseconds for which the client will perform keep-alive operations. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.DriverTimeoutMs(System.Int64)">
            <summary>
            Set the amount of time, in milliseconds, that this client will wait until it determines the
            Media Driver is unavailable. When this happens a
            <seealso cref="T:Adaptive.Aeron.Exceptions.DriverTimeoutException"/> will be generated for the error handler.
            </summary>
            <param name="driverTimeoutMs"> Number of milliseconds. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="T:Adaptive.Agrona.ErrorHandler" />
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.DriverTimeoutMs">
            <summary>
            Get the driver timeout in milliseconds.
            </summary>
            <returns> driver timeout in milliseconds. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.CheckDebugTimeout(System.Int64,Adaptive.Agrona.TimeUnit,System.String)">
            <summary>
            Override the supplied timeout with the debug value if it has been set, and we are in debug mode.
            </summary>
            <param name="timeout">  The timeout value currently in use. </param>
            <param name="timeUnit"> The units of the timeout value. Debug timeout is specified in ns, so will be converted to this
                            unit. </param>
            <param name="debugFieldName"> The field name to be added to the map.</param>
            <returns> The debug timeout if specified, and we are being debugged or the supplied value if not. Will be in
            timeUnit units. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.InterServiceTimeoutNs(System.Int64)">
             <summary>
             Set the timeout between service calls the to <seealso cref="T:Adaptive.Aeron.ClientConductor"/> duty cycles in nanoseconds.
            
             Note: this method is used for testing only.
             </summary>
             <param name="interServiceTimeout"> the timeout (ns) between service calls the to <seealso cref="T:Adaptive.Aeron.ClientConductor"/> duty cycle. </param>
             <returns> this Aeron.Context for method chaining. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.InterServiceTimeoutNs">
            <summary>
            Return the timeout between service calls to the duty cycle for the client.
            <para>
            When exceeded, <seealso cref="T:Adaptive.Agrona.ErrorHandler"/> will be called and the active <seealso cref="T:Adaptive.Aeron.Publication"/>s, <seealso cref="T:Adaptive.Aeron.Image"/>s,
            and <seealso cref="T:Adaptive.Aeron.Counter"/>s will be closed.
            </para>
            <para>
            This value is controlled by the driver and included in the CnC file. It can be configured by adjusting
            the <code>aeron.client.liveness.timeout</code> property set on the media driver.
            </para>
            </summary>
            <returns> the timeout between service calls in nanoseconds. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ResourceLingerDurationNs(System.Int64)">
            <summary>
            Duration to wait while lingering an entity such as an <seealso cref="T:Adaptive.Aeron.Image"/> before deleting underlying resources
            such as memory mapped files.
            </summary>
            <param name="resourceLingerDurationNs"> to wait before deleting an expired resource. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.RESOURCE_LINGER_DURATION_PROP_NAME"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ResourceLingerDurationNs">
            <summary>
            Duration to wait while lingering an entity such as an <seealso cref="T:Adaptive.Aeron.Image"/> before deleting underlying resources
            such as memory mapped files.
            </summary>
            <returns> duration in nanoseconds to wait before deleting an expired resource. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.RESOURCE_LINGER_DURATION_PROP_NAME"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.CloseLingerDurationNs(System.Int64)">
            <summary>
            Duration to linger on closing to allow publishers and subscribers time to notice closed resources.
            <para>
            This value can be increased from the default to a few seconds to better cope with long GC pauses
            or resource starved environments. Issues could manifest as seg faults using files after they have
            been unmapped from publishers or subscribers not noticing the close in a timely fashion.
                   
            </para>
            </summary>
            <param name="closeLingerDurationNs"> to wait before deleting resources when closing. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.CLOSE_LINGER_DURATION_PROP_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.CloseLingerDurationNs">
            <summary>
            Duration to linger on closing to allow publishers and subscribers time to notice closed resources.
            <para>
            This value can be increased from the default to a few seconds to better cope with long GC pauses
            or resource starved environments. Issues could manifest as seg faults using files after they have
            been unmapped from publishers or subscribers not noticing the close in a timely fashion.
            
            </para>
            </summary>
            <returns> duration in nanoseconds to wait before deleting resources when closing. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Configuration.CLOSE_LINGER_DURATION_PROP_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.AeronDirectoryName">
            <summary>
            Get the top level Aeron directory used for communication between the client and Media Driver, and
            the location of the data buffers.
            </summary>
            <returns> The top level Aeron directory. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.AeronDirectory">
            <summary>
            Get the directory in which the aeron config files are stored.
               
            This is valid after a call to <seealso cref="M:Adaptive.Aeron.Aeron.Context.Conclude"/> or <see cref="M:Adaptive.Aeron.Aeron.Context.ConcludeAeronDirectory"/>.
            </summary>
            <returns> the directory in which the aeron config files are stored.
            </returns>
            
            <seealso cref="M:Adaptive.Aeron.Aeron.Context.AeronDirectoryName"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.AeronDirectoryName(System.String)">
            <summary>
            Set the top level Aeron directory used for communication between the client and Media Driver, and the location
            of the data buffers.
            Check this setting if there is a DriverTimeoutException
            The default path for communicating between the driver and client is based on the process owner's temp directory. %localappdata%\temp\aeron-[username]
            </summary>
            <param name="dirName"> New top level Aeron directory. </param>
            <returns> this Object for method chaining. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ThreadFactory(Adaptive.Agrona.Concurrent.IThreadFactory)">
            <summary>
            Specify the thread factory to use when starting the conductor thread.
            </summary>
            <param name="threadFactory"> thread factory to construct the thread.</param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ThreadFactory">
            <summary>
            The thread factory to be used to construct the conductor thread
            </summary>
            <returns>the specified thread factory of <see cref="T:Adaptive.Agrona.Concurrent.DefaultThreadFactory"/> if none is provided. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.Dispose">
            <summary>
            Clean up all resources that the client uses to communicate with the Media Driver.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.ToString">
            <summary>
            {@inheritDoc}
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.MapExistingCncFile(System.Action{System.String})">
            <summary>
            Map the CnC file if it exists.
            </summary>
            <param name="logProgress"> for feedback</param>
            <returns> a new mapping for the file if it exists otherwise null</returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.IsDriverActive(System.IO.DirectoryInfo,System.Int64,System.Action{System.String})">
            <summary>
            Is a media driver active in the given direction?
            </summary>
            <param name="directory"> to check</param>
            <param name="driverTimeoutMs"> for the driver liveness check.</param>
            <param name="logger"> for feedback as liveness checked.</param>
            <returns> true if a driver is active or false if not.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.IsDriverActive(System.Int64,System.Action{System.String})">
            <summary>
            Is a media driver active in the current Aeron directory?
            </summary>
            <param name="driverTimeoutMs"> for the driver liveness check.</param>
            <param name="logger"> for feedback as liveness checked.</param>
            <returns> true if a driver is active or false if not.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.IsDriverActive(System.Int64,System.Action{System.String},Adaptive.Agrona.Util.MappedByteBuffer)">
            <summary>
            Is a media driver active in the current mapped CnC buffer? If the driver is starting then it will wait for
            up to the driverTimeoutMs by checking for the cncVersion being set.
            </summary>
            <param name="driverTimeoutMs"> for the driver liveness check. </param>
            <param name="logger">          for feedback as liveness checked. </param>
            <param name="cncByteBuffer">   for the existing CnC file. </param>
            <returns> true if a driver is active or false if not. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.RequestDriverTermination(System.IO.DirectoryInfo,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Request a driver to run its termination hook.
            </summary>
            <param name="directory"> for the driver. </param>
            <param name="tokenBuffer"> containing the optional token for the request. </param>
            <param name="tokenOffset"> within the tokenBuffer at which the token begins. </param>
            <param name="tokenLength"> of the token in the tokenBuffer. </param>
            <returns> true if request was sent or false if request could not be sent. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.SaveErrorLog(System.IO.StreamWriter)">
            <summary>
            Read the error log to a given <seealso cref="T:System.IO.StreamWriter"/>
            </summary>
            <param name="writer"> to write the error log contents to. </param>
            <returns> the number of observations from the error log </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.SaveErrorLog(System.IO.StreamWriter,Adaptive.Agrona.Util.MappedByteBuffer)">
            <summary>
            Read the error log to a given <seealso cref="T:System.IO.StreamWriter"/>
            </summary>
            <param name="writer"> to write the error log contents to. </param>
            <param name="cncByteBuffer"> containing the error log.</param>
            <returns> the number of observations from the error log </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.PrintErrorLog(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.IO.TextWriter)">
            <summary>
            Print the contents of an error log to a <seealso cref="T:System.IO.TextWriter"/> in human-readable format.
            </summary>
            <param name="errorBuffer"> to read errors from. </param>
            <param name="out">         print the errors to. </param>
            <returns> number of distinct errors observed. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Aeron.Context.SetupErrorHandler(Adaptive.Agrona.ErrorHandler,Adaptive.Agrona.Concurrent.Errors.DistinctErrorLog)">
            <summary>
            Wrap a user ErrorHandler so that error will continue to write to the errorLog.
            </summary>
            <param name="userErrorHandler"> the user specified ErrorHandler, can be null. </param>
            <param name="errorLog">         the configured errorLog, either the default or user supplied. </param>
            <returns> an error handler that will delegate to both the userErrorHandler and the errorLog. </returns>
        </member>
        <member name="T:Adaptive.Aeron.AeronCounters">
            <summary>
            This class serves as a registry for all counter type IDs used by Aeron.
            <para>
            The following ranges are reserved:
            <ul>
                <li>{@code 0 - 99}: for client/driver counters.</li>
                <li>{@code 100 - 199}: for archive counters.</li>
                <li>{@code 200 - 299}: for cluster counters.</li>
            </ul>
            </para>
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_SYSTEM_COUNTER_TYPE_ID">
            <summary>
            System-wide counters for monitoring. These are separate from counters used for position tracking on streams.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_PUBLISHER_LIMIT_TYPE_ID">
            <summary>
            The limit as a position in bytes applied to publishers on a session-channel-stream tuple. Publishers will
            experience back pressure when this position is passed as a means of flow control.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_SENDER_POSITION_TYPE_ID">
            <summary>
            The position the Sender has reached for sending data to the media on a session-channel-stream tuple.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_RECEIVER_HWM_TYPE_ID">
            <summary>
            The highest position the Receiver has observed on a session-channel-stream tuple while rebuilding the stream.
            It is possible the stream is not complete to this point if the stream has experienced loss.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_SUBSCRIBER_POSITION_TYPE_ID">
            <summary>
            The position an individual Subscriber has reached on a session-channel-stream tuple. It is possible to have
            multiple
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_RECEIVER_POS_TYPE_ID">
            <summary>
            The highest position the Receiver has rebuilt up to on a session-channel-stream tuple while rebuilding the
            stream.
            The stream is complete up to this point.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_SEND_CHANNEL_STATUS_TYPE_ID">
            <summary>
            The status of a send-channel-endpoint represented as a counter value.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_RECEIVE_CHANNEL_STATUS_TYPE_ID">
            <summary>
            The status of a receive-channel-endpoint represented as a counter value.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_SENDER_LIMIT_TYPE_ID">
            <summary>
            The position the Sender can immediately send up-to on a session-channel-stream tuple.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_PER_IMAGE_TYPE_ID">
            <summary>
            A counter per Image indicating presence of the congestion control.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_HEARTBEAT_TYPE_ID">
            <summary>
            A counter for tracking the last heartbeat of an entity with a given registration id.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_PUBLISHER_POS_TYPE_ID">
            <summary>
            The position in bytes a publication has reached appending to the log.
            <para>
            <b>Note:</b> This is a not a real-time value like the other and is updated one per second for monitoring
            purposes.
            </para>
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_SENDER_BPE_TYPE_ID">
            <summary>
            Count of back-pressure events (BPE)s a sender has experienced on a stream.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.NAME_RESOLVER_NEIGHBORS_COUNTER_TYPE_ID">
            <summary>
            Count of media driver neighbors for name resolution.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.NAME_RESOLVER_CACHE_ENTRIES_COUNTER_TYPE_ID">
            <summary>
            Count of entries in the name resolver cache.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.DRIVER_LOCAL_SOCKET_ADDRESS_STATUS_TYPE_ID">
            <summary>
            Counter used to store the status of a bind address and port for the local end of a channel.
            <para>
            When the value is <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ACTIVE"/> then the key value and label will be updated with the
            socket address and port which is bound.
            </para>
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.ARCHIVE_RECORDING_POSITION_TYPE_ID">
            <summary>
            The position a recording has reached when being archived.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.ARCHIVE_ERROR_COUNT_TYPE_ID">
            <summary>
            The type id of the <seealso cref="T:Adaptive.Aeron.Counter"/> used for keeping track of the number of errors that have occurred.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.ARCHIVE_CONTROL_SESSIONS_TYPE_ID">
            <summary>
            The type id of the <seealso cref="T:Adaptive.Aeron.Counter"/> used for keeping track of the count of concurrent control sessions.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_CONSENSUS_MODULE_STATE_TYPE_ID">
            <summary>
            Counter type id for the consensus module state.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_NODE_ROLE_TYPE_ID">
            <summary>
            Counter type id for the cluster node role.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_CONTROL_TOGGLE_TYPE_ID">
            <summary>
            Counter type id for the control toggle.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_COMMIT_POSITION_TYPE_ID">
            <summary>
            Counter type id of the commit position.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_RECOVERY_STATE_TYPE_ID">
            <summary>
            Counter representing the Recovery State for the cluster.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_SNAPSHOT_COUNTER_TYPE_ID">
            <summary>
            Counter type id for count of snapshots taken.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_ELECTION_STATE_TYPE_ID">
            <summary>
            Type id for election state counter.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_BACKUP_STATE_TYPE_ID">
            <summary>
            The type id of the <seealso cref="T:Adaptive.Aeron.Counter"/> used for the backup state.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_BACKUP_LIVE_LOG_POSITION_TYPE_ID">
            <summary>
            The type id of the <seealso cref="T:Adaptive.Aeron.Counter"/> used for the live log position counter.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_BACKUP_QUERY_DEADLINE_TYPE_ID">
            <summary>
            The type id of the <seealso cref="T:Adaptive.Aeron.Counter"/> used for the next query deadline counter.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_BACKUP_ERROR_COUNT_TYPE_ID">
            <summary>
            The type id of the <seealso cref="T:Adaptive.Aeron.Counter"/> used for keeping track of the number of errors that have occurred.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_CONSENSUS_MODULE_ERROR_COUNT_TYPE_ID">
            <summary>
            Counter type id for the consensus module error count.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_CLIENT_TIMEOUT_COUNT_TYPE_ID">
            <summary>
            Counter type id for the number of cluster clients which have been timed out.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_INVALID_REQUEST_COUNT_TYPE_ID">
            <summary>
            Counter type id for the number of invalid requests which the cluster has received.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.AeronCounters.CLUSTER_CLUSTERED_SERVICE_ERROR_COUNT_TYPE_ID">
            <summary>
            Counter type id for the clustered service error count.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.AvailableCounterHandler">
             <summary>
             Interface for notification of<seealso cref="T:Adaptive.Aeron.Counter"/>s becoming available via a <seealso cref="T:Adaptive.Aeron.Aeron"/> client.
            
             Method called by Aeron to deliver notification of a {@link Counter} being available.
             
             Within this callback reentrant calls to the <see cref="T:Adaptive.Aeron.Aeron"/> client are not permitted and
             will result in undefined behaviour.
             
             </summary>
             <param name="countersReader"> for more detail on the counter. </param>
             <param name="registrationId"> for the counter. </param>
             <param name="counterId">      that is available. </param>
        </member>
        <member name="T:Adaptive.Aeron.BufferBuilder">
            <summary>
            Reusable Builder for appending a sequence of buffers that grows internal capacity as needed.
            
            Similar in concept to <see cref="T:System.Text.StringBuilder"/>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.BufferBuilder.#ctor">
            <summary>
            Construct a buffer builder with an initial capacity of zero and isDirect false.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.BufferBuilder.#ctor(System.Int32)">
            <summary>
            Construct a buffer builder with an initial capacity that will be rounded up to the nearest power of 2.
            </summary>
            <param name="initialCapacity"> at which the capacity will start. </param>
        </member>
        <member name="M:Adaptive.Aeron.BufferBuilder.Capacity">
            <summary>
            The current capacity of the buffer.
            </summary>
            <returns> the current capacity of the buffer. </returns>
        </member>
        <member name="M:Adaptive.Aeron.BufferBuilder.Limit">
            <summary>
            The current limit of the buffer that has been used by append operations.
            </summary>
            <returns> the current limit of the buffer that has been used by append operations. </returns>
        </member>
        <member name="M:Adaptive.Aeron.BufferBuilder.Limit(System.Int32)">
            <summary>
            Set this limit for this buffer as the position at which the next append operation will occur.
            </summary>
            <param name="limit"> to be the new value. </param>
        </member>
        <member name="M:Adaptive.Aeron.BufferBuilder.Buffer">
            <summary>
            The <seealso cref="T:Adaptive.Agrona.IMutableDirectBuffer"/> that encapsulates the internal buffer.
            </summary>
            <returns> the <seealso cref="T:Adaptive.Agrona.IMutableDirectBuffer"/> that encapsulates the internal buffer. </returns>
        </member>
        <member name="M:Adaptive.Aeron.BufferBuilder.Reset">
            <summary>
            Reset the builder to restart append operations. The internal buffer does not shrink.
            </summary>
            <returns> the builder for fluent API usage. </returns>
        </member>
        <member name="M:Adaptive.Aeron.BufferBuilder.Compact">
            <summary>
            Compact the buffer to reclaim unused space above the limit.
            </summary>
            <returns> the builder for fluent API usage. </returns>
        </member>
        <member name="M:Adaptive.Aeron.BufferBuilder.Append(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Append a source buffer to the end of the internal buffer, resizing the internal buffer when required.
            </summary>
            <param name="srcBuffer"> from which to copy. </param>
            <param name="srcOffset"> in the source buffer from which to copy. </param>
            <param name="length"> in bytes to copy from the source buffer. </param>
            <returns> the builder for fluent API usage. </returns>
        </member>
        <member name="T:Adaptive.Aeron.ChannelUri">
            <summary>
            Parser for Aeron channel URIs. The format is:
            <pre>
            aeron-uri = "aeron:" media [ "?" param *( "|" param ) ]
            media     = *( "[^?:]" )
            param     = key "=" value
            key       = *( "[^=]" )
            value     = *( "[^|]" )
            </pre>
            <para>
            Multiple params with the same key are allowed, the last value specified takes precedence.
            </para>
            </summary>
            <seealso cref="T:Adaptive.Aeron.ChannelUriStringBuilder"/>
        </member>
        <member name="F:Adaptive.Aeron.ChannelUri.AERON_SCHEME">
            <summary>
            URI Scheme for Aeron channels and destinations.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ChannelUri.SPY_QUALIFIER">
            <summary>
            Qualifier for spy subscriptions which spy on outgoing network destined traffic efficiently.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ChannelUri.INVALID_TAG">
            <summary>
            Invalid tag value returned when calling <seealso cref="M:Adaptive.Aeron.ChannelUri.GetTag(System.String)"/> and the channel is not tagged.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Construct with the components provided to avoid parsing.
            </summary>
            <param name="prefix"> empty if no prefix is required otherwise expected to be 'aeron-spy' </param>
            <param name="media">  for the channel which is typically "udp" or "ipc". </param>
            <param name="params"> for the query string as key value pairs. </param>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.Prefix">
            <summary>
            The prefix for the channel.
            </summary>
            <returns> the prefix for the channel. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.Prefix(System.String)">
            <summary>
            Change the prefix from what has been parsed.
            </summary>
            <param name="prefix"> to replace the existing prefix. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.Media">
            <summary>
            The media over which the channel operates.
            </summary>
            <returns> the media over which the channel operates. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.Media(System.String)">
            <summary>
            Set the media over which the channel operates.
            </summary>
            <param name="media"> to replace the parsed value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="P:Adaptive.Aeron.ChannelUri.Udp">
            <summary>
            Is the channel <seealso cref="M:Adaptive.Aeron.ChannelUri.Media"/> equal to <seealso cref="F:Adaptive.Aeron.Aeron.Context.UDP_MEDIA"/>.
            </summary>
            <returns> true the channel <seealso cref="M:Adaptive.Aeron.ChannelUri.Media"/> equals <seealso cref="F:Adaptive.Aeron.Aeron.Context.UDP_MEDIA"/>. </returns>
        </member>
        <member name="P:Adaptive.Aeron.ChannelUri.Ipc">
            <summary>
            Is the channel <seealso cref="M:Adaptive.Aeron.ChannelUri.Media"/> equal to <seealso cref="F:Adaptive.Aeron.Aeron.Context.IPC_MEDIA"/>.
            </summary>
            <returns> true the channel <seealso cref="M:Adaptive.Aeron.ChannelUri.Media"/> equals <seealso cref="F:Adaptive.Aeron.Aeron.Context.IPC_MEDIA"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.Scheme">
            <summary>
            The scheme for the URI. Must be "aeron".
            </summary>
            <returns> the scheme for the URI. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.Get(System.String)">
            <summary>
            Get a value for a given parameter key.
            </summary>
            <param name="key"> to lookup. </param>
            <returns> the value if set for the key otherwise null. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.Get(System.String,System.String)">
            <summary>
            Get the value for a given parameter key or the default value provided if the key does not exist.
            </summary>
            <param name="key">          to lookup. </param>
            <param name="defaultValue"> to be returned if no key match is found. </param>
            <returns> the value if set for the key otherwise the default value provided. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.Put(System.String,System.String)">
            <summary>
            Put a key and value pair in the map of params.
            </summary>
            <param name="key">   of the param to be put. </param>
            <param name="value"> of the param to be put. </param>
            <returns> the existing value otherwise null. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.Remove(System.String)">
            <summary>
            Remove a key pair in the map of params.
            </summary>
            <param name="key"> of the param to be removed. </param>
            <returns> the previous value of the param or null. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.ContainsKey(System.String)">
            <summary>
            Does the URI contain a value for the given key.
            </summary>
            <param name="key"> to be lookup. </param>
            <returns> true if the key has a value otherwise false. </returns>
            <see cref="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME"/>
            <see cref="F:Adaptive.Aeron.Aeron.Context.TAG_PREFIX"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.ChannelTag">
            <summary>
            Get the channel tag, if it exists, that refers to another channel.
            </summary>
            <returns> channel tag if it exists or null if not in this URI. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.EntityTag">
            <summary>
            Get the entity tag, if it exists, that refers to an entity such as subscription or publication.
            </summary>
            <returns> entity tag if it exists or null if not in this URI. </returns>
            <see cref="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME"/>
            <see cref="F:Adaptive.Aeron.Aeron.Context.TAG_PREFIX"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.ToString">
            <summary>
            Generate a String representation of the URI that is valid for an Aeron channel.
            </summary>
            <returns> a String representation of the URI that is valid for an Aeron channel. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.InitialPosition(System.Int64,System.Int32,System.Int32)">
            <summary>
            Initialise a channel for restarting a publication at a given position.
            </summary>
            <param name="position">      at which the publication should be started. </param>
            <param name="initialTermId"> what which the stream would start. </param>
            <param name="termLength">    for the stream. </param>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.Parse(System.String)">
            <summary>
            Parse a <seealso cref="T:System.String"/> which contains an Aeron URI.
            </summary>
            <param name="cs"> to be parsed. </param>
            <returns> a new <seealso cref="T:Adaptive.Aeron.ChannelUri"/> representing the URI string. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.AddSessionId(System.String,System.Int32)">
            <summary>
            Add a sessionId to a given channel.
            </summary>
            <param name="channel">   to add sessionId to. </param>
            <param name="sessionId"> to add to channel. </param>
            <returns> new string that represents channel with sessionId added. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.IsTagged(System.String)">
            <summary>
            Is the param value tagged? (starts with the "tag:" prefix).
            </summary>
            <param name="paramValue"> to check if tagged. </param>
            <returns> true if tagged or false if not. </returns>
            <see cref="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME"/>
            <see cref="F:Adaptive.Aeron.Aeron.Context.TAG_PREFIX"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUri.GetTag(System.String)">
            <summary>
            Get the value of the tag from a given parameter value.
            </summary>
            <param name="paramValue"> to extract the tag value from. </param>
            <returns> the value of the tag or <seealso cref="F:Adaptive.Aeron.ChannelUri.INVALID_TAG"/> if not tagged. </returns>
            <see cref="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME"/>
            <see cref="F:Adaptive.Aeron.Aeron.Context.TAG_PREFIX"/>
        </member>
        <member name="T:Adaptive.Aeron.ChannelUriStringBuilder">
            <summary>
            Typesafe means of building a channel URI associated with a <seealso cref="T:Adaptive.Aeron.Publication"/> or <seealso cref="T:Adaptive.Aeron.Subscription"/>.
            </summary>
            <seealso cref="M:Adaptive.Aeron.Aeron.AddPublication(System.String,System.Int32)"/>
            <seealso cref="M:Adaptive.Aeron.Aeron.AddSubscription(System.String,System.Int32)"/>
            <seealso cref="T:Adaptive.Aeron.ChannelUri"/>
        </member>
        <member name="F:Adaptive.Aeron.ChannelUriStringBuilder.TAG_PREFIX">
            <summary>
            Can be used when the likes of session-id wants to reference another entity such as a tagged publication.
            <para>
            For example {@code session-id=tag:777} where the publication uses {@code tags=777}.
            </para>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.#ctor(System.String)">
            <summary>
            Constructs the ChannelUriStringBuilder with the initial values derived from the supplied URI. Will parse the
            incoming URI during this process, so could through an exception at this point of the URI is badly formed.
            </summary>
            <param name="initialUri"> initial values for the builder. </param>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.#ctor(Adaptive.Aeron.ChannelUri)">
            <summary>
            Constructs the ChannelUriStringBuilder with the initial values derived from the supplied ChannelUri.
            </summary>
            <param name="channelUri"> initial values for the builder. </param>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Clear">
            <summary>
            Clear out all the values thus setting back to the initial state.
            </summary>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Validate">
            <summary>
            Validates that the collection of set parameters are valid together.
            </summary>
            <returns> this for a fluent API. </returns>
            <exception cref="T:System.InvalidOperationException"> if the combination of params is invalid. </exception>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Prefix(System.String)">
            <summary>
            Set the prefix for taking an addition action such as spying on an outgoing publication with "aeron-spy".
            </summary>
            <param name="prefix"> to be applied to the URI before the scheme. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.ChannelUri.SPY_QUALIFIER"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Prefix(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the prefix value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/>.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.ChannelUri.SPY_QUALIFIER"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Prefix">
            <summary>
            Get the prefix for the additional action to be taken on the request.
            </summary>
            <returns> the prefix for the additional action to be taken on the request. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Media(System.String)">
            <summary>
            Set the media for this channel. Valid values are "udp" and "ipc".
            </summary>
            <param name="media"> for this channel. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Media(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the endpoint value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/>.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Media">
            <summary>
            The media over which the channel transmits.
            </summary>
            <returns> the media over which the channel transmits. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Endpoint(System.String)">
            <summary>
            Set the endpoint address:port pairing for the channel. This is the address the publication sends to and the
            address the subscription receives from.
            </summary>
            <param name="endpoint"> address and port for the channel. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.ENDPOINT_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Endpoint(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the endpoint value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.ENDPOINT_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Endpoint">
            <summary>
            Get the endpoint address:port pairing for the channel.
            </summary>
            <returns> the endpoint address:port pairing for the channel. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.ENDPOINT_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.NetworkInterface(System.String)">
            <summary>
            Set the address of the local interface in the form host:[port]/[subnet mask] for routing traffic.
            </summary>
            <param name="networkInterface"> for routing traffic. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.INTERFACE_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.NetworkInterface(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the network interface value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.INTERFACE_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.NetworkInterface">
            <summary>
            Get the address of the local interface in the form host:[port]/[subnet mask] for routing traffic.
            </summary>
            <returns> the address of the local interface in the form host:[port]/[subnet mask] for routing traffic. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.INTERFACE_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ControlEndpoint(System.String)">
            <summary>
            Set the control address:port pair for dynamically joining a multi-destination-cast publication.
            </summary>
            <param name="controlEndpoint"> for joining a MDC control socket. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ControlEndpoint(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the control endpoint value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ControlEndpoint">
            <summary>
            Get the control address:port pair for dynamically joining a multi-destination-cast publication.
            </summary>
            <returns> the control address:port pair for dynamically joining a multi-destination-cast publication. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ControlMode(System.String)">
            <summary>
            Set the control mode for multi-destination-cast. Set to "manual" for allowing control from the publication API.
            </summary>
            <param name="controlMode"> for taking control of MDC. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="M:Adaptive.Aeron.Publication.AddDestination(System.String)"></seealso>
            <seealso cref="M:Adaptive.Aeron.Publication.RemoveDestination(System.String)"></seealso>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_PARAM_NAME"/>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_MANUAL"/>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_DYNAMIC"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ControlMode(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the control mode to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ControlMode">
            <summary>
            Get the control mode for multi-destination-cast.
            </summary>
            <returns> the control mode for multi-destination-cast. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_PARAM_NAME"/>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_MANUAL"/>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MDC_CONTROL_MODE_DYNAMIC"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Reliable(System.Nullable{System.Boolean})">
            <summary>
            Set the subscription semantics for if loss is acceptable, or not, for a reliable message delivery.
            </summary>
            <param name="isReliable"> false if loss can be gap-filled. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.RELIABLE_STREAM_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Reliable(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the reliable value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.RELIABLE_STREAM_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Reliable">
            <summary>
            Get the subscription semantics for if loss is acceptable, or not, for a reliable message delivery.
            </summary>
            <returns> the subscription semantics for if loss is acceptable, or not, for a reliable message delivery. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.RELIABLE_STREAM_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Ttl(System.Nullable{System.Int32})">
            <summary>
            Set the Time To Live (TTL) for a multicast datagram. Valid values are 0-255 for the number of hops the datagram
            can progress along.
            </summary>
            <param name="ttl"> value for a multicast datagram. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TTL_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Ttl(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the ttl value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TTL_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Ttl">
            <summary>
            Get the Time To Live (TTL) for a multicast datagram.
            </summary>
            <returns> the Time To Live (TTL) for a multicast datagram. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TTL_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Mtu(System.Nullable{System.Int32})">
            <summary>
            Set the maximum transmission unit (MTU) including Aeron header for a datagram payload. If this is greater
            than the network MTU for UDP then the packet will be fragmented and can amplify the impact of loss.
            </summary>
            <param name="mtu"> the maximum transmission unit including Aeron header for a datagram payload. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MTU_LENGTH_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Mtu(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the mtu value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MTU_LENGTH_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Mtu">
            <summary>
            Get the maximum transmission unit (MTU) including Aeron header for a datagram payload. If this is greater
            than the network MTU for UDP then the packet will be fragmented and can amplify the impact of loss.
            </summary>
            <returns> the maximum transmission unit (MTU) including Aeron header for a datagram payload. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.MTU_LENGTH_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TermLength(System.Nullable{System.Int32})">
            <summary>
            Set the length of buffer used for each term of the log. Valid values are powers of 2 in the 64K - 1G range.
            </summary>
            <param name="termLength"> of the buffer used for each term of the log. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TERM_LENGTH_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TermLength(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the termLength value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TERM_LENGTH_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TermLength">
            <summary>
            Get the length of buffer used for each term of the log.
            </summary>
            <returns> the length of buffer used for each term of the log. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TERM_LENGTH_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.InitialTermId(System.Nullable{System.Int32})">
            <summary>
            Set the initial term id at which a publication will start.
            </summary>
            <param name="initialTermId"> the initial term id at which a publication will start. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.INITIAL_TERM_ID_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.InitialTermId(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the initialTermId value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.INITIAL_TERM_ID_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.InitialTermId">
            <summary>
            the initial term id at which a publication will start.
            </summary>
            <returns> the initial term id at which a publication will start. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.INITIAL_TERM_ID_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TermId(System.Nullable{System.Int32})">
            <summary>
            Set the current term id at which a publication will start. This when combined with the initial term can
            establish a starting position.
            </summary>
            <param name="termId"> at which a publication will start. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TERM_ID_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TermId(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the termId value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TERM_ID_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TermId">
            <summary>
            Get the current term id at which a publication will start.
            </summary>
            <returns> the current term id at which a publication will start. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TERM_ID_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TermOffset(System.Nullable{System.Int32})">
            <summary>
            Set the offset within a term at which a publication will start. This when combined with the term id can establish
            a starting position.
            </summary>
            <param name="termOffset"> within a term at which a publication will start. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TERM_OFFSET_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TermOffset(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the termOffset value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TERM_OFFSET_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TermOffset">
            <summary>
            Get the offset within a term at which a publication will start.
            </summary>
            <returns> the offset within a term at which a publication will start. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TERM_OFFSET_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SessionId(System.Nullable{System.Int32})">
            <summary>
            Set the session id for a publication or restricted subscription.
            </summary>
            <param name="sessionId"> for the publication or a restricted subscription. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SESSION_ID_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SessionId(System.String)">
            <summary>
            Set the session id for a publication or restricted subscription from a formatted string.  Supports a format of
            either a string encoded signed 32-bit number or 'tag:' followed by a signed 64 bit value.
            </summary>
            <param name="sessionIdStr"> for the publication or a restricted subscription. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SESSION_ID_PARAM_NAME"/>seealso>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TaggedSessionId(System.Nullable{System.Int64})">
            <summary>
            Set the session id for a publication or restricted subscription as a tag referenced value.
            </summary>
            <param name="sessionId"> for the publication or a restricted subscription. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SESSION_ID_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SessionId(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the sessionId value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SESSION_ID_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SessionId">
            <summary>
            Get the session id for a publication or restricted subscription.
            </summary>
            <returns> the session id for a publication or restricted subscription. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SESSION_ID_PARAM_NAME"/>
            @deprecated this method will not correctly handle tagged sessionId values that are outside the range of
            a signed 32-bit number.  If this is called and a tagged value outside this range is currently held in this
            object, then the result will be the the least significant bits. 
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Linger(System.Nullable{System.Int64})">
            <summary>
            Set the time a network publication will linger in nanoseconds after being drained. This time is so that tail
            loss can be recovered.
            </summary>
            <param name="lingerNs"> time for the publication after it is drained. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.LINGER_PARAM_NAME"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Linger(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the linger value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.LINGER_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Linger">
            <summary>
            Get the time a network publication will linger in nanoseconds after being drained. This time is so that tail
            loss can be recovered.
            </summary>
            <returns> the linger time in nanoseconds a publication will linger after being drained. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.LINGER_PARAM_NAME"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Sparse(System.Nullable{System.Boolean})">
            <summary>
            Set to indicate if a term log buffer should be sparse on disk or not. Sparse saves space at the potential
            expense of latency.
            </summary>
            <param name="isSparse"> true if the term buffer log is sparse on disk. </param>
            <returns> this for a fluent API. </returns>
            <see cref="F:Adaptive.Aeron.Aeron.Context.SPARSE_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Sparse(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the sparse value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SPARSE_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Sparse">
            <summary>
            Should term log buffer be sparse on disk or not. Sparse saves space at the potential expense of latency.
            </summary>
            <returns> true if the term buffer log is sparse on disk. </returns>
            <see cref="F:Adaptive.Aeron.Aeron.Context.SPARSE_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Eos(System.Nullable{System.Boolean})">
            <summary>
            Set to indicate if an EOS should be sent on the media or not.
            </summary>
            <param name="eos"> true if the EOS should be sent. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.EOS_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Eos(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the eos value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.EOS_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Eos">
            <summary>
            Should an EOS flag be sent on the media or not.
            </summary>
            <returns> true if the EOS param should be set. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.EOS_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Tether(System.Nullable{System.Boolean})">
            <summary>
            Should the subscription channel be tethered or not for local flow control.
            </summary>
            <param name="tether"> value to be set for the tether param. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TETHER_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Tether(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the tether value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TETHER_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Tether">
            <summary>
            Should the subscription channel be tethered or not for local flow control.
            </summary>
            <returns> value of the tether param. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TETHER_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Group(System.Nullable{System.Boolean})">
            <summary>
            Is the receiver likely to be part of a group. This informs behaviour such as loss handling.
            </summary>
            <param name="group"> value to be set for the group param. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.GROUP_PARAM_NAME"/>
            <seealso cref="M:Adaptive.Aeron.ChannelUriStringBuilder.ControlMode"/>
            <seealso cref="M:Adaptive.Aeron.ChannelUriStringBuilder.ControlEndpoint"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Group(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the group value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.GROUP_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Group">
            <summary>
            Is the receiver likely to be part of a group. This informs behaviour such as loss handling.
            </summary>
            <returns> value of the group param. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.GROUP_PARAM_NAME"/>
            <seealso cref="M:Adaptive.Aeron.ChannelUriStringBuilder.ControlMode"/>
            <seealso cref="M:Adaptive.Aeron.ChannelUriStringBuilder.ControlEndpoint"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Tags(System.String)">
            <summary>
            Set the tags for a channel used by a publication or subscription. Tags can be used to identify or tag a
            channel so that a configuration can be referenced and reused.
            </summary>
            <param name="tags"> for the channel, publication or subscription. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME"/>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TAG_PREFIX"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Tags(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the tags to be value which is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Tags(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Set the tags to the specified channel and publication/subscription tag <seealso cref="T:Adaptive.Aeron.ChannelUri"/>. The
            publication/subscription may be null. If channel tag is null, then the pubSubTag must be null.
            </summary>
            <param name="channelTag"> optional value for the channel tag. </param>
            <param name="pubSubTag">  option value for the publication/subscription tag. </param>
            <returns> this for a fluent API. </returns>
            <exception cref="T:System.ArgumentException"> if channelTag is null and pubSubTag is not. </exception>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Tags">
            <summary>
            Get the tags for a channel used by a publication or subscription. Tags can be used to identify or tag a
            channel so that a configuration can be referenced and reused.
            </summary>
            <returns> the tags for a channel, publication or subscription. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME"/>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TAG_PREFIX"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.IsSessionIdTagged(System.Boolean)">
            <summary>
            Toggle the value for <seealso cref="M:Adaptive.Aeron.ChannelUriStringBuilder.SessionId"/> being tagged or not.
            </summary>
            <param name="isSessionIdTagged"> for session id </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME"/>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TAG_PREFIX"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.IsSessionIdTagged">
            <summary>
            Is the value for <seealso cref="M:Adaptive.Aeron.ChannelUriStringBuilder.SessionId"/> a tag..
            </summary>
            <returns> whether the value for <seealso cref="M:Adaptive.Aeron.ChannelUriStringBuilder.SessionId"/> a tag reference or not. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TAGS_PARAM_NAME"/>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.TAG_PREFIX"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Alias(System.String)">
            <summary>
            Set the alias for a URI. Aliases are not interpreted by Aeron and are to be used by the application.
            </summary>
            <param name="alias"> for the URI. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.ALIAS_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Alias(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the alias to be value which is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.ALIAS_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Alias">
            <summary>
            Get the alias present in the URI.
            </summary>
            <returns> alias for the URI. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.ALIAS_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.CongestionControl(System.String)">
            <summary>
            Set the congestion control algorithm to be used on a stream.
            </summary>
            <param name="congestionControl"> for the URI. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.CONGESTION_CONTROL_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.CongestionControl(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the congestion control to be value which is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.CONGESTION_CONTROL_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.CongestionControl">
            <summary>
            Get the congestion control algorithm to be used on a stream.
            </summary>
            <returns> congestion control strategy for the channel. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.CONGESTION_CONTROL_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.FlowControl(System.String)">
            <summary>
            Set the flow control strategy to be used on a stream.
            </summary>
            <param name="flowControl"> for the URI. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.FLOW_CONTROL_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.TaggedFlowControl(System.Nullable{System.Int64},System.Nullable{System.Int32},System.String)">
            <summary>
            Set tagged flow control settings to be used on a stream. All specified values may be null and the default
            specified in the MediaDriver.Context will be used instead.
            </summary>
            <param name="groupTag">  receiver tag for this stream. </param>
            <param name="minGroupSize"> group size required to allow publications for this channel to be moved to connected status. </param>
            <param name="timeout">      timeout receivers, default is ns, but allows suffixing of time units (e.g. 5s). </param>
            <returns> this for fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.MinFlowControl(System.Nullable{System.Int32},System.String)">
            <summary>
            Set min flow control settings to be used on a stream. All specified values may be null and the default
            specified in the MediaDriver.Context will be used instead.
            </summary>
            <param name="minGroupSize"> group size required to allow publications for this stream to be moved to connected status. </param>
            <param name="timeout">      timeout receivers, default is ns, but allows suffixing of time units (e.g. 5s). </param>
            <returns> this for fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.FlowControl(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the flow control to be value which is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.FLOW_CONTROL_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.FlowControl">
            <summary>
            Get the flow control strategy to be used on a stream.
            </summary>
            <returns> flow control strategy for the stream. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.FLOW_CONTROL_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.GroupTag(System.Nullable{System.Int64})">
            <summary>
            Set the group tag (gtag) to be sent in SMs (Status Messages).
            </summary>
            <param name="groupTag"> to be sent in SMs </param>
            <returns> this for fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.GROUP_TAG_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.GroupTag(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the group tag (gtag) to be the value which is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.GROUP_TAG_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.GroupTag">
            <summary>
            Get the group tag (gtag) to be sent in SMs (Status Messages).
            </summary>
            <returns> receiver tag to be sent in SMs. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.GROUP_TAG_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Rejoin(System.Nullable{System.Boolean})">
            <summary>
            Set the subscription semantics for if a stream should be rejoined after going unavailable.
            </summary>
            <param name="rejoin"> false if stream is not to be rejoined. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.REJOIN_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Rejoin(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the rejoin value to be what is in the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.REJOIN_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Rejoin">
            <summary>
            Get the subscription semantics for if a stream should be rejoined after going unavailable.
            </summary>
            <returns> the subscription semantics for if a stream should be rejoined after going unavailable. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.REJOIN_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SpiesSimulateConnection(System.Nullable{System.Boolean})">
            <summary>
            Set the publication semantics for whether the presence of spy subscriptions simulate a connection.
            </summary>
            <param name="spiesSimulateConnection"> true if the presence of spy subscriptions simulate a connection. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SPIES_SIMULATE_CONNECTION_PARAM_NAME"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SpiesSimulateConnection(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the publication semantics for whether the presence of spy subscriptions simulate a connection to be what is in
            the <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be null.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SPIES_SIMULATE_CONNECTION_PARAM_NAME"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SpiesSimulateConnection">
            <summary>
            Get the publication semantics for whether the presence of spy subscriptions simulate a connection.
            </summary>
            <returns> true if the presence of spy subscriptions simulate a connection, otherwise false. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SPIES_SIMULATE_CONNECTION_PARAM_NAME"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.InitialPosition(System.Int64,System.Int32,System.Int32)">
            <summary>
            Initialise a channel for restarting a publication at a given position.
            </summary>
            <param name="position">      at which the publication should be started. </param>
            <param name="initialTermId"> what which the stream would start. </param>
            <param name="termLength">    for the stream. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SocketSndbufLength(System.Nullable{System.Int32})">
            <summary>
            Set the underlying OS send buffer length.
            </summary>
            <param name="socketSndbufLength"> parameter to be passed as SO_SNDBUF value. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SOCKET_SNDBUF_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SocketSndbufLength(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the underlying OS send buffer length from an existing <seealso cref="T:Adaptive.Aeron.ChannelUri"/> which may be (null).
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SOCKET_SNDBUF_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SocketSndbufLength">
            <summary>
            Get the underling OS send buffer length setting
            </summary>
            <returns> underlying OS send buffer length setting or null if not specified. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SOCKET_SNDBUF_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SocketRcvbufLength(System.Nullable{System.Int32})">
            <summary>
            Set the underlying OS receive buffer length.
            </summary>
            <param name="socketRcvbufLength"> parameter to be passed as SO_SNDBUF value. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SOCKET_SNDBUF_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SocketRcvbufLength(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the underlying OS receive buffer length from an existing <seealso cref="T:Adaptive.Aeron.ChannelUri"/>, which may have a null value for
            this field.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SOCKET_RCVBUF_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.SocketRcvbufLength">
            <summary>
            Get the underling OS receive buffer length setting.
            </summary>
            <returns> underlying OS receive buffer length setting or null if not specified. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SOCKET_RCVBUF_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ReceiverWindowLength(System.Nullable{System.Int32})">
            <summary>
            Set the flow control initial receiver window length for this channel.
            </summary>
            <param name="receiverWindowLength"> initial receiver window length. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.RECEIVER_WINDOW_LENGTH_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ReceiverWindowLength(Adaptive.Aeron.ChannelUri)">
            <summary>
            Set the flow control initial receiver window length for this channel from an existing <seealso cref="T:Adaptive.Aeron.ChannelUri"/>,
            which may have a null value for this field.
            </summary>
            <param name="channelUri"> to read the value from. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.RECEIVER_WINDOW_LENGTH_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ReceiverWindowLength">
            <summary>
            Get the receiver window length to be used as the initial receiver window for flow control.
            </summary>
            <returns> receiver window length. </returns>
            <seealso cref="F:Adaptive.Aeron.Aeron.Context.SOCKET_RCVBUF_PARAM_NAME"/>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.MediaReceiveTimestampOffset">
            <summary>
            Offset into a message to store the media receive timestamp. May also be the special value 'reserved' which means
            to store the timestamp in the reserved value field.
            </summary>
            <returns> current mediaReceiveTimestampOffset value either as string representation of an integer index or the
            special value 'reserved' </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.MediaReceiveTimestampOffset(System.String)">
            <summary>
            Offset into a message to store the media receive timestamp. May also be the special value 'reserved' which means
            to store the timestamp in the reserved value field.
            </summary>
            <param name="timestampOffset"> to use as the offset. </param>
            <returns> this for a fluent API. </returns>
            <exception cref="T:System.ArgumentException"> if the string is not null and doesn't represent an int or the 'reserved' value. </exception>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.MediaReceiveTimestampOffset(Adaptive.Aeron.ChannelUri)">
            <summary>
            Offset into a message to store the media receive timestamp. May also be the special value 'reserved' which means
            to store the timestamp in the reserved value field.
            </summary>
            <param name="channelUri"> the existing URI to extract the mediaReceiveTimestampOffset from </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ChannelReceiveTimestampOffset">
            <summary>
            Offset into a message to store the channel receive timestamp. May also be the special value 'reserved' which
            means to store the timestamp in the reserved value field.
            </summary>
            <returns> current channelReceiveTimestampOffset value either as string representation of an integer index or
            the special value 'reserved' </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ChannelReceiveTimestampOffset(System.String)">
            <summary>
            Offset into a message to store the channel receive timestamp. May also be the special value 'reserved' which
            means to store the timestamp in the reserved value field.
            </summary>
            <param name="timestampOffset"> to use as the offset. </param>
            <returns> this for a fluent API. </returns>
            <exception cref="T:System.ArgumentException"> if the string doesn't represent an int or the 'reserved' value. </exception>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ChannelReceiveTimestampOffset(Adaptive.Aeron.ChannelUri)">
            <summary>
            Offset into a message to store the channel receive timestamp. May also be the special value 'reserved' which
            means to store the timestamp in the reserved value field.
            </summary>
            <param name="channelUri"> the existing URI to extract the receiveTimestampOffset from. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ChannelSendTimestampOffset">
            <summary>
            Offset into a message to store the channel send timestamp. May also be the special value 'reserved' which means
            to store the timestamp in the reserved value field.
            </summary>
            <returns> current sendTimestampOffset value either as string representation of an integer index or the special
            value 'reserved'. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ChannelSendTimestampOffset(System.String)">
            <summary>
            Offset into a message to store the channel send timestamp. May also be the special value 'reserved' which means
            to store the timestamp in the reserved value field.
            </summary>
            <param name="timestampOffset"> to use as the offset. </param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns> this for a fluent API. </returns>
            <exception cref="T:System.ArgumentException"> if the string is not null doesn't represent an int or the 'reserved' value. </exception>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.ChannelSendTimestampOffset(Adaptive.Aeron.ChannelUri)">
            <summary>
            Offset into a message to store the channel send timestamp. May also be the special value 'reserved' which means
            to store the timestamp in the reserved value field.
            </summary>
            <param name="channelUri"> the existing URI to extract the channelSendTimestampOffset from. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ChannelUriStringBuilder.Build">
            <summary>
            Build a channel URI String for the given parameters.
            </summary>
            <returns> a channel URI String for the given parameters. </returns>
        </member>
        <member name="T:Adaptive.Aeron.ClientConductor">
            <summary>
            Client conductor receives responses and notifications from Media Driver and acts on them in addition to forwarding
            commands from the Client API to the Media Driver conductor.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.CncFileDescriptor">
            <summary>
            Description of the command and control file used between driver and clients
            
            File Layout
            <pre>
             +----------------------------+
             |      Aeron CnC Version     |
             +----------------------------+
             |          Meta Data         |
             +----------------------------+
             |      to-driver Buffer      |
             +----------------------------+
             |      to-clients Buffer     |
             +----------------------------+
             |  Counters Metadata Buffer  |
             +----------------------------+
             |   Counters Values Buffer   |
             +----------------------------+
             |          Error Log         |
             +----------------------------+
            </pre>
            
            Metadata Layout <see cref="F:Adaptive.Aeron.CncFileDescriptor.CNC_VERSION"/>
            <pre>
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                      Aeron CnC Version                        |
            +---------------------------------------------------------------+
            |                   to-driver buffer length                     |
            +---------------------------------------------------------------+
            |                  to-clients buffer length                     |
            +---------------------------------------------------------------+
            |               Counters Metadata buffer length                 |
            +---------------------------------------------------------------+
            |                Counters Values buffer length                  |
            +---------------------------------------------------------------+
            |                   Error Log buffer length                     |
            +---------------------------------------------------------------+
            |                   Client Liveness Timeout                     |
            |                                                               |
            +---------------------------------------------------------------+
            |                    Driver Start Timestamp                     |
            |                                                               |
            +---------------------------------------------------------------+
            |                         Driver PID                            |
            |                                                               |
            +---------------------------------------------------------------+
            </pre>
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.CNC_FILE">
            <summary>
            Name used for CnC file in the Aeron directory.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.CNC_VERSION">
            <summary>
            Version of the CnC file using semantic versioning <see cref="T:Adaptive.Agrona.SemanticVersion"/> stored as an 32-bit integer.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.CNC_VERSION_FIELD_OFFSET">
            <summary>
            Offset at which the version field can be found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.TO_DRIVER_BUFFER_LENGTH_FIELD_OFFSET">
            <summary>
            Offset at which the length field can be found for the command ring buffer to the driver.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.TO_CLIENTS_BUFFER_LENGTH_FIELD_OFFSET">
            <summary>
            Offset at which the length field can be found for the broadcast buffer to the clients can be found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.COUNTERS_METADATA_BUFFER_LENGTH_FIELD_OFFSET">
            <summary>
            Offset at which the length field can be found for counter metadata, e.g. labels, can be found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.COUNTERS_VALUES_BUFFER_LENGTH_FIELD_OFFSET">
            <summary>
            Offset at which the length field can be found for the counters values can be found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.CLIENT_LIVENESS_TIMEOUT_FIELD_OFFSET">
            <summary>
            Offset at which the client liveness timeout value can be found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.ERROR_LOG_BUFFER_LENGTH_FIELD_OFFSET">
            <summary>
            Offset at which the length field can be found for buffer containing the error log can be found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.START_TIMESTAMP_FIELD_OFFSET">
            <summary>
            Offset at which the start timestamp value for the driver can be found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.PID_FIELD_OFFSET">
            <summary>
            Offset at which the PID value for the driver can be found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.META_DATA_LENGTH">
            <summary>
            Length of the metadata header for the CnC file.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.CncFileDescriptor.END_OF_METADATA_OFFSET">
            <summary>
            The offset of the first byte past the metadata header which is aligned on a cache-line boundary.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.ComputeCncFileLength(System.Int32,System.Int32)">
            <summary>
            Compute the length of the cnc file and return it.
            </summary>
            <param name="totalLengthOfBuffers"> in bytes </param>
            <param name="alignment"> for file length to adhere to</param>
            <returns> cnc file length in bytes </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.CncVersionOffset(System.Int32)">
            <summary>
            Offset in the buffer at which the version field exists.
            </summary>
            <param name="baseOffset"> for the start of the metadata. </param>
            <returns> offset in the buffer at which the version field exists. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.ToDriverBufferLengthOffset(System.Int32)">
            <summary>
            Offset in the buffer at which the to driver buffer length field exists.
            </summary>
            <param name="baseOffset"> for the start of the metadata. </param>
            <returns> offset in the buffer at which the to driver buffer length field exists. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.ToClientsBufferLengthOffset(System.Int32)">
            <summary>
            Offset in the buffer at which the to clients buffer length field exists.
            </summary>
            <param name="baseOffset"> for the start of the metadata. </param>
            <returns> offset in the buffer at which the to clients buffer length field exists. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.CountersMetaDataBufferLengthOffset(System.Int32)">
            <summary>
            Offset in the buffer at which the counter metadata buffer length field exists.
            </summary>
            <param name="baseOffset"> for the start of the metadata. </param>
            <returns> offset in the buffer at which the counter metadata buffer length field exists. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.CountersValuesBufferLengthOffset(System.Int32)">
            <summary>
            Offset in the buffer at which the counter value buffer length field exists.
            </summary>
            <param name="baseOffset"> for the start of the metadata. </param>
            <returns> offset in the buffer at which the counter value buffer length field exists. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.ClientLivenessTimeoutOffset(System.Int32)">
            <summary>
            Offset in the buffer at which the client liveness timeout field exists.
            </summary>
            <param name="baseOffset"> for the start of the metadata. </param>
            <returns> offset in the buffer at which the client liveness timeout field exists. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.ErrorLogBufferLengthOffset(System.Int32)">
            <summary>
            Offset in the buffer at which the error buffer length field exists.
            </summary>
            <param name="baseOffset"> for the start of the metadata. </param>
            <returns> offset in the buffer at which the error buffer length field exists. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.StartTimestampOffset(System.Int32)">
            <summary>
            Offset in the buffer at which the driver start time timestamp field exists.
            </summary>
            <param name="baseOffset"> for the start of the metadata. </param>
            <returns> offset in the buffer at which the driver start time timestamp field exists. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.PidOffset(System.Int32)">
            <summary>
            Offset in the buffer at which the driver process PID field exists.
            </summary>
            <param name="baseOffset"> for the start of the metadata. </param>
            <returns> offset in the buffer at which the driver process PID field exists. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.FillMetaData(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int32,System.Int64,System.Int64)">
            <summary>
            Fill the CnC file with metadata to define its sections.
            </summary>
            <param name="cncMetaDataBuffer">           that wraps the metadata section of the CnC file. </param>
            <param name="toDriverBufferLength">        for sending commands to the driver. </param>
            <param name="toClientsBufferLength">       for broadcasting events to the clients. </param>
            <param name="counterMetaDataBufferLength"> buffer length for counters metadata. </param>
            <param name="counterValuesBufferLength">   buffer length for counter values. </param>
            <param name="clientLivenessTimeoutNs">     timeout value in nanoseconds for client liveness and inter-service interval. </param>
            <param name="errorLogBufferLength">        for recording the distinct error log. </param>
            <param name="startTimestampMs">            epoch at which the driver started. </param>
            <param name="pid">                         for the process hosting the driver. </param>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.SignalCncReady(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
            Signal that the CnC file is ready for use by client by writing the version into the CnC file.
            </summary>
            <param name="cncMetaDataBuffer"> for the CnC file. </param>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.CreateMetaDataBuffer(Adaptive.Agrona.Util.MappedByteBuffer)">
            <summary>
            Create the buffer which wraps the area in the CnC file for the metadata about the CnC file itself. </summary>
            <param name="buffer"> for the CnC file </param>
            <returns> the buffer which wraps the area in the CnC file for the metadata about the CnC file itself. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.CreateToDriverBuffer(Adaptive.Agrona.Util.MappedByteBuffer,Adaptive.Agrona.IDirectBuffer)">
            <summary>
            Create the buffer which wraps the area in the CnC file for the command buffer from clients to the driver.
            </summary>
            <param name="buffer">         for the CnC file. </param>
            <param name="metaDataBuffer"> within the CnC file. </param>
            <returns> a buffer which wraps the section in the CnC file for the command buffer from clients to the driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.CreateToClientsBuffer(Adaptive.Agrona.Util.MappedByteBuffer,Adaptive.Agrona.IDirectBuffer)">
            <summary>
            Create the buffer which wraps the section in the CnC file for the broadcast buffer from the driver to clients.
            </summary>
            <param name="buffer">         for the CnC file. </param>
            <param name="metaDataBuffer"> within the CnC file. </param>
            <returns> a buffer which wraps the section in the CnC file for the broadcast buffer from the driver to clients. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.CreateCountersMetaDataBuffer(Adaptive.Agrona.Util.MappedByteBuffer,Adaptive.Agrona.IDirectBuffer)">
            <summary>
            Create the buffer which wraps the section in the CnC file for the counters metadata.
            </summary>
            <param name="buffer">         for the CnC file. </param>
            <param name="metaDataBuffer"> within the CnC file. </param>
            <returns> a buffer which wraps the section in the CnC file for the counters metadata. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.CreateCountersValuesBuffer(Adaptive.Agrona.Util.MappedByteBuffer,Adaptive.Agrona.IDirectBuffer)">
            <summary>
            Create the buffer which wraps the section in the CnC file for the counter values.
            </summary>
            <param name="buffer">         for the CnC file. </param>
            <param name="metaDataBuffer"> within the CnC file. </param>
            <returns> a buffer which wraps the section in the CnC file for the counter values. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.CreateErrorLogBuffer(Adaptive.Agrona.Util.MappedByteBuffer,Adaptive.Agrona.IDirectBuffer)">
            <summary>
            Create the buffer which wraps the section in the CnC file for the error log.
            </summary>
            <param name="buffer">         for the CnC file. </param>
            <param name="metaDataBuffer"> within the CnC file. </param>
            <returns> a buffer which wraps the section in the CnC file for the error log. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.ClientLivenessTimeoutNs(Adaptive.Agrona.IDirectBuffer)">
            <summary>
            Get the timeout in nanoseconds for tracking client liveness and inter-service timeout.
            </summary>
            <param name="metaDataBuffer"> for the CnC file. </param>
            <returns> the timeout in milliseconds for tracking client liveness. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.StartTimestamp(Adaptive.Agrona.IDirectBuffer)">
            <summary>
            Get the start timestamp in milliseconds for the media driver.
            </summary>
            <param name="metaDataBuffer"> for the CnC file. </param>
            <returns> the start timestamp in milliseconds for the media driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.Pid(Adaptive.Agrona.IDirectBuffer)">
            <summary>
            Get the process PID hosting the driver.
            </summary>
            <param name="metaDataBuffer"> for the CnC file. </param>
            <returns> the process PID hosting the driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.CheckVersion(System.Int32)">
            <summary>
            Check the version of the CnC file is compatible with application.
            </summary>
            <param name="cncVersion"> of the CnC file. </param>
            <exception cref="T:Adaptive.Aeron.Exceptions.AeronException"> if the major versions are not compatible. </exception>
        </member>
        <member name="M:Adaptive.Aeron.CncFileDescriptor.IsCncFileLengthSufficient(Adaptive.Agrona.IDirectBuffer,System.Int64)">
            <summary>
            Is the provided length for the CnC file sufficient given what is stored in the metadata.
            </summary>
            <param name="metaDataBuffer"> for the CnC file. </param>
            <param name="cncFileLength">  to check if it is sufficient based on what is stored in the metadata. </param>
            <returns> true is the length is correct otherwise false. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.ClientTimeoutFlyweight">
            <summary>
            Indicate a client has timed out by the driver.
            </summary>
            <seealso cref="T:Adaptive.Aeron.Command.ControlProtocolEvents"/>
            <pre>
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                         Client Id                             |
            |                                                               |
            +---------------------------------------------------------------+
            </pre>
        </member>
        <member name="F:Adaptive.Aeron.Command.ClientTimeoutFlyweight.LENGTH">
            <summary>
            Length of the header
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.ClientTimeoutFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ClientTimeoutFlyweight.ClientId">
            <summary>
            Get client id field.
            </summary>
            <returns> client id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ClientTimeoutFlyweight.ClientId(System.Int64)">
            <summary>
            Set client id field.
            </summary>
            <param name="clientId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.ControlProtocolEvents">
            <summary>
            List of events used in the control protocol between client and the media driver.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ADD_PUBLICATION">
            <summary>
            Add Publication.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.REMOVE_PUBLICATION">
            <summary>
            Remove Publication.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ADD_EXCLUSIVE_PUBLICATION">
            <summary>
            Add an Exclusive Publication.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ADD_SUBSCRIPTION">
            <summary>
            Add a Subscriber.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.REMOVE_SUBSCRIPTION">
            <summary>
            Remove a Subscriber.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.CLIENT_KEEPALIVE">
            <summary>
            Keepalive from Client.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ADD_DESTINATION">
            <summary>
            Add Destination to an existing Publication.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.REMOVE_DESTINATION">
            <summary>
            Remove Destination from an existing Publication.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ADD_COUNTER">
            <summary>
            Add a Counter to the counters-manager.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.REMOVE_COUNTER">
            <summary>
            Remove a Counter from the counters-manager.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.CLIENT_CLOSE">
            <summary>
            Close indication from Client.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ADD_RCV_DESTINATION">
            <summary>
            Add Destination for existing Subscription.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.REMOVE_RCV_DESTINATION">
            <summary>
            Remove Destination for existing Subscription.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.TERMINATE_DRIVER">
            <summary>
            Request the driver to terminate.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ON_ERROR">
            <summary>
            Error Response as a result of attempting to process a client command operation.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ON_AVAILABLE_IMAGE">
            <summary>
            Subscribed Image buffers are available notification.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ON_PUBLICATION_READY">
            <summary>
            New Publication buffers are ready notification.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ON_OPERATION_SUCCESS">
            <summary>
            Operation has succeeded.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ON_UNAVAILABLE_IMAGE">
            <summary>
            Inform client of timeout and removal of an inactive Image.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ON_EXCLUSIVE_PUBLICATION_READY">
            <summary>
            New Exclusive Publication buffers are ready notification.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ON_SUBSCRIPTION_READY">
            <summary>
            New Subscription is ready notification.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ON_COUNTER_READY">
            <summary>
            New counter is ready notification.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ON_UNAVAILABLE_COUNTER">
            <summary>
            Inform clients of removal of counter.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.ControlProtocolEvents.ON_CLIENT_TIMEOUT">
            <summary>
            Inform clients of client timeout.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Command.CorrelatedMessageFlyweight">
            <summary>
            Base flyweight that can be extended to track a client request.
            
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                         Client ID                             |
            |                                                               |
            +---------------------------------------------------------------+
            |                       Correlation ID                          |
            |                                                               |
            +---------------------------------------------------------------+
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Command.CorrelatedMessageFlyweight.LENGTH">
            <summary>
            Length of the header
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.CorrelatedMessageFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CorrelatedMessageFlyweight.ClientId">
            <summary>
            Get client id field.
            </summary>
            <returns> client id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CorrelatedMessageFlyweight.ClientId(System.Int64)">
            <summary>
            Set client id field.
            </summary>
            <param name="clientId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CorrelatedMessageFlyweight.CorrelationId">
            <summary>
            Get correlation id field.
            </summary>
            <returns> correlation id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CorrelatedMessageFlyweight.CorrelationId(System.Int64)">
            <summary>
            Set correlation id field.
            </summary>
            <param name="correlationId"> field value. </param>
            <returns> for fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CorrelatedMessageFlyweight.ValidateLength(System.Int32,System.Int32)">
            <summary>
            Validate buffer length is long enough for message.
            </summary>
            <param name="msgTypeId"> type of message. </param>
            <param name="length"> of message in bytes to validate. </param>
        </member>
        <member name="T:Adaptive.Aeron.Command.CounterMessageFlyweight">
             <summary>
             Message to denote a new counter.
            
             <b>Note:</b> Layout should be SBE 2.0 compliant so that the label length is aligned.
             
             </summary>
             <seealso cref="T:Adaptive.Aeron.Command.ControlProtocolEvents">
             <pre>
               0                   1                   2                   3
               0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                          Client ID                            |
              |                                                               |
              +---------------------------------------------------------------+
              |                        Correlation ID                         |
              |                                                               |
              +---------------------------------------------------------------+
              |                        Counter Type ID                        |
              +---------------------------------------------------------------+
              |                           Key Length                          |
              +---------------------------------------------------------------+
              |                           Key Buffer                         ...
             ...                                                              |
              +---------------------------------------------------------------+
              |                          Label Length                         |
              +---------------------------------------------------------------+
              |                          Label (ASCII)                       ...
             ...                                                              |
              +---------------------------------------------------------------+
             </pre>
             </seealso>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.TypeId">
            <summary>
            Get type id field.
            </summary>
            <returns> type id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.TypeId(System.Int32)">
            <summary>
            Set counter type id field.
            </summary>
            <param name="typeId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.KeyBufferOffset">
            <summary>
            Relative offset of the key buffer.
            </summary>
            <returns> relative offset of the key buffer. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.KeyBufferLength">
            <summary>
            Length of the key buffer in bytes.
            </summary>
            <returns> length of key buffer in bytes. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.KeyBuffer(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Fill the key buffer.
            </summary>
            <param name="keyBuffer">   containing the optional key for the counter. </param>
            <param name="keyOffset">   within the keyBuffer at which the key begins. </param>
            <param name="keyLength">   of the key in the keyBuffer. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.LabelBufferOffset">
            <summary>
            Relative offset of label buffer.
            </summary>
            <returns> relative offset of label buffer. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.LabelBufferLength">
            <summary>
            Length of label buffer in bytes.
            </summary>
            <returns> length of label buffer in bytes </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.LabelBuffer(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Fill the label buffer.
            </summary>
            <param name="labelBuffer"> containing the mandatory label for the counter. </param>
            <param name="labelOffset"> within the labelBuffer at which the label begins. </param>
            <param name="labelLength"> of the label in the labelBuffer. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.Label(System.String)">
            <summary>
            Fill the label.
            </summary>
            <param name="label"> for the counter. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.Length">
            <summary>
            Get the length of the current message.
            <para>
            NB: must be called after the data is written in order to be accurate.
            
            </para>
            </summary>
            <returns> the length of the current message </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.ComputeLength(System.Int32,System.Int32)">
            <summary>
            Compute the length of the command message given key and label length.
            </summary>
            <param name="keyLength">   to be appended. </param>
            <param name="labelLength"> to be appended. </param>
            <returns> the length of the command message given key and label length. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterMessageFlyweight.ToString">
            <summary>
            {@inheritDoc}
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Command.CounterUpdateFlyweight">
            <summary>
            Message to denote that a Counter has become available or unavailable.
            </summary>
            <seealso cref="T:Adaptive.Aeron.Command.ControlProtocolEvents">
            <pre>
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                         Correlation ID                        |
             |                                                               |
             +---------------------------------------------------------------+
             |                           Counter ID                          |
             +---------------------------------------------------------------+
            </pre>
            </seealso>
        </member>
        <member name="F:Adaptive.Aeron.Command.CounterUpdateFlyweight.LENGTH">
            <summary>
            Length of the header.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterUpdateFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterUpdateFlyweight.CorrelationId">
            <summary>
            Get the correlation id field.
            </summary>
            <returns> correlation id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterUpdateFlyweight.CorrelationId(System.Int64)">
            <summary>
            Set the correlation id field.
            </summary>
            <param name="correlationId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterUpdateFlyweight.CounterId">
            <summary>
            The counter id.
            </summary>
            <returns> counter id. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.CounterUpdateFlyweight.CounterId(System.Int32)">
            <summary>
            Set counter id field.
            </summary>
            <param name="counterId"> field value </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.DestinationMessageFlyweight">
            <summary>
            Control message for adding or removing a destination for a Publication in multi-destination-cast or a Subscription
            in multi-destination Subscription.
            
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                          Client ID                            |
            |                                                               |
            +---------------------------------------------------------------+
            |                    Command Correlation ID                     |
            |                                                               |
            +---------------------------------------------------------------+
            |                  Registration Correlation ID                  |
            |                                                               |
            +---------------------------------------------------------------+
            |                       Channel Length                          |
            +---------------------------------------------------------------+
            |                       Channel(ASCII)                        ...
            ..                                                              |
            +---------------------------------------------------------------+
            
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.DestinationMessageFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.DestinationMessageFlyweight.RegistrationCorrelationId">
            <summary>
            Return correlation id used in registration field.
            </summary>
            <returns> correlation id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.DestinationMessageFlyweight.RegistrationCorrelationId(System.Int64)">
            <summary>
            Set registration correlation id field.
            </summary>
            <param name="correlationId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.DestinationMessageFlyweight.Channel">
            <summary>
            Get the channel field in ASCII.
            </summary>
            <returns> channel field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.DestinationMessageFlyweight.AppendChannel(System.Text.StringBuilder)">
            <summary>
            Append the channel value to a <seealso cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="stringBuilder"> to append channel to. </param>
        </member>
        <member name="M:Adaptive.Aeron.Command.DestinationMessageFlyweight.Channel(System.String)">
            <summary>
            Set channel field in ASCII.
            </summary>
            <param name="channel"> field value </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.DestinationMessageFlyweight.Length">
            <summary>
            Length of the frame in bytes.
            </summary>
            <returns> length of the frame in bytes. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.DestinationMessageFlyweight.ComputeLength(System.Int32)">
            <summary>
            Compute the length of the command message for a given channel length.
            </summary>
            <param name="channelLength"> to be appended to the header. </param>
            <returns> the length of the command message for a given channel length. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.ErrorResponseFlyweight">
            <summary>
            Control message flyweight for any errors sent from driver to clients
            
            <para>
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |              Offending Command Correlation ID                 |
            |                                                               |
            +---------------------------------------------------------------+
            |                         Error Code                            |
            +---------------------------------------------------------------+
            |                   Error Message Length                        |
            +---------------------------------------------------------------+
            |                       Error Message                          ...
            ...                                                             |
            +---------------------------------------------------------------+
            </para>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.ErrorResponseFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ErrorResponseFlyweight.OffendingCommandCorrelationId">
            <summary>
            Return correlation ID of the offending command.
            </summary>
            <returns> correlation ID of the offending command </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ErrorResponseFlyweight.OffendingCommandCorrelationId(System.Int64)">
            <summary>
            Set correlation ID of the offending command.
            </summary>
            <param name="correlationId"> of the offending command. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ErrorResponseFlyweight.ErrorCode">
            <summary>
            Error code for the command.
            </summary>
            <returns> error code for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ErrorResponseFlyweight.ErrorCodeValue">
            <summary>
            Error code value for the command.
            </summary>
            <returns>error code value for the command.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ErrorResponseFlyweight.ErrorCode(Adaptive.Aeron.ErrorCode)">
            <summary>
            Set the error code for the command.
            </summary>
            <param name="code"> for the error.</param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ErrorResponseFlyweight.ErrorMessage">
            <summary>
            Error message associated with the error.
            </summary>
            <returns> error message </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ErrorResponseFlyweight.AppendMessage(System.Text.StringBuilder)">
            <summary>
            Append the error message to an appendable without allocation.
            </summary>
            <param name="stringBuilder"> to append error message to. </param>
            <returns> number bytes copied. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ErrorResponseFlyweight.ErrorMessage(System.String)">
            <summary>
            Set the error message
            </summary>
            <param name="message"> to associate with the error </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ErrorResponseFlyweight.Length">
            <summary>
            Length of the error response in bytes.
            </summary>
            <returns> length of the error response in bytes. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight">
            <summary>
            Message to denote that new buffers for a publication image are ready for a subscription.
            
            <b>Note:</b> Layout should be SBE 2.0 compliant so that the source identity length is aligned.
            </summary>
            <seealso cref="T:Adaptive.Aeron.Command.ControlProtocolEvents" />
            
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                       Correlation ID                          |
            |                                                               |
            +---------------------------------------------------------------+
            |                         Session ID                            |
            +---------------------------------------------------------------+
            |                          Stream ID                            |
            +---------------------------------------------------------------+
            |                Subscription Registration Id                   |
            |                                                               |
            +---------------------------------------------------------------+
            |                    Subscriber Position Id                     |
            +---------------------------------------------------------------+
            |                       Log File Length                         |
            +---------------------------------------------------------------+
            |                     Log File Name(ASCII)                    ..
            ..                                                              |
            +---------------------------------------------------------------+
            |                    Source identity Length                     |
            +---------------------------------------------------------------+
            |                    Source identity(ASCII)                   ..
            ..                                                              |
            +---------------------------------------------------------------+
            
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.CorrelationId">
            <summary>
            The correlation id field.
            </summary>
            <returns> correlation id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.CorrelationId(System.Int64)">
            <summary>
            Set the correlation id field.
            </summary>
            <param name="correlationId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.SessionId">
            <summary>
            Get the session id field.
            </summary>
            <returns> session id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.SessionId(System.Int32)">
            <summary>
            Set the session id field. </summary>
            <param name="sessionId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.StreamId">
            <summary>
            Get the stream id field
            </summary>
            <returns> stream id field </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.StreamId(System.Int32)">
            <summary>
            Set the stream id field.
            </summary>
            <param name="streamId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.SubscriberPositionId(System.Int32)">
            <summary>
            Set the position counter id for the subscriber.
            </summary>
            <param name="id"> for the subscriber position counter. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.SubscriberPositionId">
            <summary>
            The the position counter id for the subscriber.
            </summary>
            <returns> position counter id for the subscriber. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.SubscriptionRegistrationId(System.Int64)">
            <summary>
            Set the registration id for the Subscription.
            </summary>
            <param name="id"> for the Subscription. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.SubscriptionRegistrationId">
            <summary>
            Return the registration id for the Subscription.
            </summary>
            <returns> registration id for the Subscription. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.LogFileName">
            <summary>
            The Log Filename in ASCII.
            </summary>
            <returns> log filename </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.AppendLogFileName(System.Text.StringBuilder)">
            <summary>
            Append the log file name to a <seealso cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="stringBuilder"> to append log file name to. </param>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.LogFileName(System.String)">
            <summary>
            Set the log filename in ASCII.
            </summary>
            <param name="logFileName"> for the image </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.SourceIdentity">
            <summary>
            The source identity string in ASCII.
            </summary>
            <returns> source identity string. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.AppendSourceIdentity(System.Text.StringBuilder)">
            <summary>
            Append the source identity to an <seealso cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="stringBuilder"> to append source identity to. </param>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.SourceIdentity(System.String)">
            <summary>
            Set the source identity string in ASCII.
            Note: Can be called only after log file name was set!
            </summary>
            <param name="value"> for the source identity. </param>
            <returns> this for a fluent API. </returns>
            <see cref="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.LogFileName(System.String)"/>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageBuffersReadyFlyweight.Length">
            <summary>
            Get the length of the current message
            
            NB: must be called after the data is written in order to be accurate.
            </summary>
            <returns> the length of the current message </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.ImageMessageFlyweight">
            <summary>
            Control message flyweight for any message that needs to represent a connection
            <para>
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                        Correlation ID                         |
             |                                                               |
             +---------------------------------------------------------------+
             |                 Subscription Registration ID                  |
             |                                                               |
             +---------------------------------------------------------------+
             |                          Stream ID                            |
             +---------------------------------------------------------------+
             |                       Channel Length                          |
             +---------------------------------------------------------------+
             |                       Channel (ASCII)                        ...
            ...                                                              |
             +---------------------------------------------------------------+
            </para>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.CorrelationId">
            <summary>
            The correlation id field. </summary>
            <returns> correlation id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.CorrelationId(System.Int64)">
            <summary>
            Set the correlation id field. </summary>
            <param name="correlationId"> field value </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.SubscriptionRegistrationId">
            <summary>
            Registration ID for the subscription.
            </summary>
            <returns> registration ID for the subscription. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.SubscriptionRegistrationId(System.Int64)">
            <summary>
            Set the registration ID for the subscription.
            </summary>
            <param name="registrationId"> for the subscription </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.StreamId">
            <summary>
            The stream id field
            </summary>
            <returns> stream id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.StreamId(System.Int32)">
            <summary>
            Set the stream id field
            </summary>
            <param name="streamId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.Channel">
            <summary>
            Get the channel field as ASCII.
            </summary>
            <returns> channel field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.AppendChannel(System.Text.StringBuilder)">
            <summary>
            Append the channel value to a <seealso cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="stringBuilder"> to append channel to. </param>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.Channel(System.String)">
            <summary>
            Set the channel field as ASCII
            </summary>
            <param name="channel"> field value </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.ImageMessageFlyweight.Length">
            <summary>
            Get the length of the current message
            
            NB: must be called after the data is written in order to be accurate.
            </summary>
            <returns> the length of the current message </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.OperationSucceededFlyweight">
            <summary>
            Indicate a given operation is done and has succeeded.
            </summary>
            <seealso cref="T:Adaptive.Aeron.Command.ControlProtocolEvents">
            <pre>
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                         Correlation ID                        |
            |                                                               |
            +---------------------------------------------------------------+
            </pre>
            </seealso>
        </member>
        <member name="F:Adaptive.Aeron.Command.OperationSucceededFlyweight.LENGTH">
            <summary>
            Length of the header.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.OperationSucceededFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.OperationSucceededFlyweight.CorrelationId">
            <summary>
            The correlation id field.
            </summary>
            <returns> correlation id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.OperationSucceededFlyweight.CorrelationId(System.Int64)">
            <summary>
            Set the correlation id field.
            </summary>
            <param name="correlationId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight">
            <summary>
            Message to denote that new buffers have been setup for a publication.
            </summary>
            <seealso cref="T:Adaptive.Aeron.Command.ControlProtocolEvents" />
            
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                         Correlation ID                        |
            |                                                               |
            +---------------------------------------------------------------+
            |                        Registration ID                        |
            |                                                               |
            +---------------------------------------------------------------+
            |                          Session ID                           |
            +---------------------------------------------------------------+
            |                           Stream ID                           |
            +---------------------------------------------------------------+
            |                  Publication Limit Counter ID                 |
            +---------------------------------------------------------------+
            |                  Channel Status Indicator ID                  |
            +---------------------------------------------------------------+
            |                        Log File Length                        |
            +---------------------------------------------------------------+
            |                     Log File Name(ASCII)                    ...
            ...                                                              |
            +---------------------------------------------------------------+
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.CorrelationId">
            <summary>
            Get the correlation id field.
            </summary>
            <returns> correlation id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.CorrelationId(System.Int64)">
            <summary>
            Set the correlation id field.
            </summary>
            <param name="correlationId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.RegistrationId">
            <summary>
            Get the registration id field.
            </summary>
            <returns> correlation id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.RegistrationId(System.Int64)">
            <summary>
            Set the correlation id field.
            </summary>
            <param name="registrationId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.SessionId">
            <summary>
            Get the session id field.
            </summary>
            <returns> session id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.SessionId(System.Int32)">
            <summary>
            Set the session id field.
            </summary>
            <param name="sessionId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.StreamId">
            <summary>
            Get the stream id field.
            </summary>
            <returns> stream id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.StreamId(System.Int32)">
            <summary>
            Set the stream id field.
            </summary>
            <param name="streamId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.PublicationLimitCounterId">
            <summary>
            The publication limit counter id.
            </summary>
            <returns> publication limit counter id. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.PublicationLimitCounterId(System.Int32)">
            <summary>
            Set the position counter id field.
            </summary>
            <param name="positionCounterId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.ChannelStatusCounterId">
            <summary>
            The channel status counter id.
            </summary>
            <returns> channel status counter id. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.ChannelStatusCounterId(System.Int32)">
            <summary>
            Set channel status counter id field.
            </summary>
            <param name="counterId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.LogFileName">
            <summary>
            Get the log file name in ASCII.
            </summary>
            <returns> the log file name in ASCII. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.AppendLogFileName(System.Text.StringBuilder)">
            <summary>
            Append the log file name to a <seealso cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="stringBuilder"> to append log file name to. </param>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.LogFileName(System.String)">
            <summary>
            Set the log file name in ASCII.
            </summary>
            <param name="logFileName"> for the publication buffers. </param>
            <returns> the log file name in ASCII. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationBuffersReadyFlyweight.Length">
            <summary>
            Get the length of the current message
            
            NB: must be called after the data is written in order to be accurate.
            </summary>
            <returns> the length of the current message </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.PublicationMessageFlyweight">
            <summary>
            Control message for adding or removing a publication
            <para>
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                          Client ID                            |
             |                                                               |
             +---------------------------------------------------------------+
             |                       Correlation ID                          |
             |                                                               |
             +---------------------------------------------------------------+
             |                          Stream ID                            |
             +---------------------------------------------------------------+
             |                       Channel Length                          |
             +---------------------------------------------------------------+
             |                       Channel (ASCII)                        ...
            ...                                                              |
             +---------------------------------------------------------------+
            </para>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationMessageFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationMessageFlyweight.StreamId">
            <summary>
            Get the stream id field.
            </summary>
            <returns> stream id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationMessageFlyweight.StreamId(System.Int32)">
            <summary>
            Set the stream id field.
            </summary>
            <param name="streamId"> field value </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationMessageFlyweight.Channel">
            <summary>
            Get the channel field in ASCII.
            </summary>
            <returns> channel field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationMessageFlyweight.AppendChannel(System.Text.StringBuilder)">
            <summary>
            Append the channel value to a <seealso cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="stringBuilder"> to append channel to. </param>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationMessageFlyweight.Channel(System.String)">
            <summary>
            Set the channel field in ASCII.
            </summary>
            <param name="channel"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationMessageFlyweight.Length">
            <summary>
            Get the length of the current message.
            
            NB: must be called after the data is written in order to be accurate.
            </summary>
            <returns> the length of the current message. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.PublicationMessageFlyweight.ComputeLength(System.Int32)">
            <summary>
            Compute the length of the command message for a given channel length.
            </summary>
            <param name="channelLength"> to be appended to the header. </param>
            <returns> the length of the command message for a given channel length. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.RemoveMessageFlyweight">
            <summary>
            Control message for removing a Publication or Subscription.
            
            <para>
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                            Client ID                          |
            |                                                               |
            +---------------------------------------------------------------+
            |                    Command Correlation ID                     |
            |                                                               |
            +---------------------------------------------------------------+
            |                         Registration ID                       |
            |                                                               |
            +---------------------------------------------------------------+
            </para>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.RemoveMessageFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.RemoveMessageFlyweight.RegistrationId">
            <summary>
            Get the registration id field.
            </summary>
            <returns> registration id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.RemoveMessageFlyweight.RegistrationId(System.Int64)">
            <summary>
            Set registration  id field.
            </summary>
            <param name="registrationId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.RemoveMessageFlyweight.Length">
            <summary>
            Length of the message in bytes.
            </summary>
            <returns> length of the message in bytes. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.SubscriptionMessageFlyweight">
            <summary>
            Control message for adding or removing a subscription.
            <para>
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                          Client ID                            |
             |                                                               |
             +---------------------------------------------------------------+
             |                    Command Correlation ID                     |
             |                                                               |
             +---------------------------------------------------------------+
             |                 Registration Correlation ID                   |
             |                                                               |
             +---------------------------------------------------------------+
             |                         Stream Id                             |
             +---------------------------------------------------------------+
             |                       Channel Length                          |
             +---------------------------------------------------------------+
             |                       Channel (ASCII)                        ...
            ...                                                              |
             +---------------------------------------------------------------+
            </para>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionMessageFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionMessageFlyweight.RegistrationCorrelationId">
            <summary>
            return correlation id used in registration field.
            </summary>
            <returns> correlation id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionMessageFlyweight.RegistrationCorrelationId(System.Int64)">
            <summary>
            Set the registration correlation id field.
            </summary>
            <param name="correlationId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionMessageFlyweight.StreamId">
            <summary>
            Get the stream id.
            </summary>
            <returns> the stream id. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionMessageFlyweight.StreamId(System.Int32)">
            <summary>
            Set the stream id.
            </summary>
            <param name="streamId"> the channel id. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionMessageFlyweight.Channel">
            <summary>
            Get the channel field in ASCII.
            </summary>
            <returns> channel field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionMessageFlyweight.AppendChannel(System.Text.StringBuilder)">
            <summary>
            Append the channel value to a <seealso cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="stringBuilder"> to append channel to. </param>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionMessageFlyweight.Channel(System.String)">
            <summary>
            Set channel field in ASCII.
            </summary>
            <param name="channel"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionMessageFlyweight.Length">
            <summary>
            Length of the message in bytes. Only valid after the channel is set.
            </summary>
            <returns> length of the message in bytes. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionMessageFlyweight.ComputeLength(System.Int32)">
            <summary>
            Compute the length of the command message for a given channel length.
            </summary>
            <param name="channelLength"> to be appended to the header. </param>
            <returns> the length of the command message for a given channel length. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.SubscriptionReadyFlyweight">
            <summary>
            Message to denote that a Subscription has been successfully set up.
            </summary>
            <seealso cref="T:Adaptive.Aeron.Command.ControlProtocolEvents">
            <pre>
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                        Correlation ID                         |
             |                                                               |
             +---------------------------------------------------------------+
             |                  Channel Status Indicator ID                  |
             +---------------------------------------------------------------+
            </pre>
            </seealso>
        </member>
        <member name="F:Adaptive.Aeron.Command.SubscriptionReadyFlyweight.LENGTH">
            <summary>
            Length of the header.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionReadyFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionReadyFlyweight.CorrelationId">
            <summary>
            Get the correlation id field.
            </summary>
            <returns> correlation id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionReadyFlyweight.CorrelationId(System.Int64)">
            <summary>
            Set the correlation id field.
            </summary>
            <param name="correlationId"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionReadyFlyweight.ChannelStatusCounterId">
            <summary>
            The channel status counter id
            </summary>
            <returns> channel status counter id </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.SubscriptionReadyFlyweight.ChannelStatusCounterId(System.Int32)">
            <summary>
            Set channel status counter id field
            </summary>
            <param name="counterId"> field value </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Command.TerminateDriverFlyweight">
            <summary>
            Command message flyweight to ask the driver process to terminate.
            </summary>
            <seealso cref="T:Adaptive.Aeron.Command.ControlProtocolEvents"/>
            <pre>
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                          Client ID                            |
             |                                                               |
             +---------------------------------------------------------------+
             |                        Correlation ID                         |
             |                                                               |
             +---------------------------------------------------------------+
             |                         Token Length                          |
             +---------------------------------------------------------------+
             |                         Token Buffer                         ...
            ...                                                              |
             +---------------------------------------------------------------+
            </pre>
        </member>
        <member name="M:Adaptive.Aeron.Command.TerminateDriverFlyweight.Wrap(Adaptive.Agrona.IMutableDirectBuffer,System.Int32)">
            <summary>
            Wrap the buffer at a given offset for updates.
            </summary>
            <param name="buffer"> to wrap. </param>
            <param name="offset"> at which the message begins. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.TerminateDriverFlyweight.TokenBufferOffset">
            <summary>
            Relative offset of the token buffer
            </summary>
            <returns> relative offset of the token buffer </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.TerminateDriverFlyweight.TokenBufferLength">
            <summary>
            Length of the token buffer in bytes
            </summary>
            <returns> length of token buffer in bytes </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.TerminateDriverFlyweight.TokenBuffer(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Fill the token buffer.
            </summary>
            <param name="tokenBuffer"> containing the optional token for the request. </param>
            <param name="tokenOffset"> within the tokenBuffer at which the token begins. </param>
            <param name="tokenLength"> of the token in the tokenBuffer. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.TerminateDriverFlyweight.Length">
            <summary>
            Get the length of the current message.
            <para>
            NB: must be called after the data is written in order to be correct.
            
            </para>
            </summary>
            <returns> the length of the current message </returns>
        </member>
        <member name="M:Adaptive.Aeron.Command.TerminateDriverFlyweight.ComputeLength(System.Int32)">
            <summary>
            Compute the length of the command message for a given token length.
            </summary>
            <param name="tokenLength"> to be appended to the header. </param>
            <returns> the length of the command message for a given token length. </returns>
        </member>
        <member name="T:Adaptive.Aeron.ConcurrentPublication">
            <summary>
            Aeron publisher API for sending messages to subscribers of a given channel and streamId pair. <seealso cref="T:Adaptive.Aeron.Publication"/>s
            are created via the <seealso cref="M:Adaptive.Aeron.Aeron.AddPublication(System.String,System.Int32)"/> method, and messages are sent via one of the
            <seealso cref="M:Adaptive.Aeron.Publication.Offer(Adaptive.Agrona.Concurrent.UnsafeBuffer)"/> methods, or a <seealso cref="M:Adaptive.Aeron.ConcurrentPublication.TryClaim(System.Int32,Adaptive.Aeron.LogBuffer.BufferClaim)"/> and <seealso cref="M:Adaptive.Aeron.LogBuffer.BufferClaim.Commit"/>
            method combination.
            <para>
            The APIs used for try claim and offer are non-blocking and thread safe.
            </para>
            <para>
            <b>Note:</b> Instances are threadsafe and can be shared between publishing threads.
            
            </para>
            </summary>
            <seealso cref="M:Adaptive.Aeron.Aeron.AddPublication(System.String,System.Int32)"></seealso>
            <seealso cref="T:Adaptive.Aeron.LogBuffer.BufferClaim"></seealso>
        </member>
        <member name="P:Adaptive.Aeron.ConcurrentPublication.AvailableWindow">
            <inheritdoc />
        </member>
        <member name="M:Adaptive.Aeron.ConcurrentPublication.Offer(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <inheritdoc />
        </member>
        <member name="M:Adaptive.Aeron.ConcurrentPublication.Offer(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <inheritdoc />
        </member>
        <member name="M:Adaptive.Aeron.ConcurrentPublication.Offer(Adaptive.Aeron.DirectBufferVector[],Adaptive.Aeron.ReservedValueSupplier)">
            <inheritdoc />
        </member>
        <member name="M:Adaptive.Aeron.ConcurrentPublication.TryClaim(System.Int32,Adaptive.Aeron.LogBuffer.BufferClaim)">
            <inheritdoc />
        </member>
        <member name="T:Adaptive.Aeron.ControlledFragmentAssembler">
            <summary>
            A <seealso cref="T:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler"/> that sits in a chain-of-responsibility pattern that reassembles fragmented
            messages so that the next handler in the chain only sees whole messages.
            
            Unfragmented messages are delegated without copy. Fragmented messages are copied to a temporary
            buffer for reassembly before delegation.
            
            The <seealso cref="T:Adaptive.Aeron.LogBuffer.Header"/> passed to the delegate on assembling a message will be that of the last fragment.
            
            Session based buffers will be allocated and grown as necessary based on the length of messages to be assembled.
            When sessions go inactive see <seealso cref="T:Adaptive.Aeron.UnavailableImageHandler"/>, it is possible to free the buffer by calling
            <seealso cref="M:Adaptive.Aeron.ControlledFragmentAssembler.FreeSessionBuffer(System.Int32)"/>.
            </summary>
            <seealso cref="M:Adaptive.Aeron.Subscription.ControlledPoll(Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int32)"/>
            <seealso cref="M:Adaptive.Aeron.Image.ControlledPoll(Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int32)"/>
            <seealso cref="M:Adaptive.Aeron.Image.ControlledPeek(System.Int64,Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int64)"/>
        </member>
        <member name="M:Adaptive.Aeron.ControlledFragmentAssembler.#ctor(Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int32)">
            <summary>
            Construct an adapter to reassembly message fragments and delegate on only whole messages.
            </summary>
            <param name="delegate">            onto which whole messages are forwarded. </param>
            <param name="initialBufferLength"> to be used for each session. </param>
        </member>
        <member name="M:Adaptive.Aeron.ControlledFragmentAssembler.Delegate">
            <summary>
            Get the delegate unto which assembled messages are delegated.
            </summary>
            <returns>  the delegate unto which assembled messages are delegated. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ControlledFragmentAssembler.OnFragment(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.Header)">
            <summary>
            The implementation of <seealso cref="T:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler"/> that reassembles and forwards whole messages.
            </summary>
            <param name="buffer"> containing the data. </param>
            <param name="offset"> at which the data begins. </param>
            <param name="length"> of the data in bytes. </param>
            <param name="header"> representing the metadata for the data. </param>
            <returns> <seealso cref="T:Adaptive.Aeron.LogBuffer.ControlledFragmentHandlerAction"/> to be taken after processing fragment. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ControlledFragmentAssembler.FreeSessionBuffer(System.Int32)">
            <summary>
            Free an existing session buffer to reduce memory pressure when an image goes inactive or no more
            large messages are expected.
            </summary>
            <param name="sessionId"> to have its buffer freed </param>
            <returns> true if a buffer has been freed otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ControlledFragmentAssembler.Clear">
            <summary>
            Clear down the cache of buffers by session for reassembling messages.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Counter">
            <summary>
            Counter stored in a file managed by the media driver which can be observed with AeronStat.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Counter.#ctor(Adaptive.Agrona.Concurrent.Status.CountersReader,System.Int64,System.Int32)">
            <summary>
            Construct a read-write view of an existing counter.
            </summary>
            <param name="countersReader"> for getting access to the buffers. </param>
            <param name="registrationId"> assigned by the driver for the counter or <see cref="F:Adaptive.Aeron.Aeron.NULL_VALUE"/> if not known. </param>
            <param name="counterId">      for the counter to be viewed. </param>
            <exception cref="T:Adaptive.Aeron.Exceptions.AeronException"> if the id has for the counter has not been allocated. </exception>
        </member>
        <member name="P:Adaptive.Aeron.Counter.RegistrationId">
            <summary>
            Return the registration id used to register this counter with the media driver.
            </summary>
            <value> registration id </value>
        </member>
        <member name="M:Adaptive.Aeron.Counter.Dispose">
            <summary>
            Close the counter, releasing the resource managed by the media driver if this was the creator of the Counter.
            <para>
            This method is idempotent.
            </para>
            </summary>
        </member>
        <member name="P:Adaptive.Aeron.Counter.IsClosed">
            <summary>
            Has this object been closed and should no longer be used?
            </summary>
            <returns> true if it has been closed otherwise false. </returns>
        </member>
        <member name="T:Adaptive.Aeron.DirectBufferVector">
            <summary>
            Vector into a <seealso cref="T:Adaptive.Agrona.IDirectBuffer"/> to be used for gathering IO as and offset and length.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.#ctor">
            <summary>
            Default constructor so the fluent API can be used.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.#ctor(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Construct a new vector as a subset of a buffer.
            </summary>
            <param name="buffer"> which is the super set. </param>
            <param name="offset"> at which the vector begins. </param>
            <param name="length"> of the vector. </param>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.Reset(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Reset the values.
            </summary>
            <param name="buffer"> which is the super set. </param>
            <param name="offset"> at which the vector begins. </param>
            <param name="length"> of the vector. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.Buffer">
            <summary>
            The buffer which the vector applies to.
            </summary>
            <returns> buffer which the vector applies to. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.Buffer(Adaptive.Agrona.IDirectBuffer)">
            <summary>
            The buffer which the vector applies to.
            </summary>
            <param name="buffer"> which the vector applies to. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.Offset">
            <summary>
            Offset in the buffer at which the vector starts.
            </summary>
            <returns> offset in the buffer at which the vector starts. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.Offset(System.Int32)">
            <summary>
            Offset in the buffer at which the vector starts.
            </summary>
            <param name="offset"> in the buffer at which the vector starts. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.Length">
            <summary>
            Length of the vector in the buffer starting at the offset.
            </summary>
            <returns> length of the vector in the buffer starting at the offset. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.Length(System.Int32)">
            <summary>
            Length of the vector in the buffer starting at the offset.
            </summary>
            <param name="length"> of the vector in the buffer starting at the offset. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.Validate">
            <summary>
            Ensure the vector is valid for the buffer.
            </summary>
            <exception cref="T:System.NullReferenceException"> if the buffer is null. </exception>
            <exception cref="T:System.ArgumentException"> if the offset is out of range for the buffer. </exception>
            <exception cref="T:System.ArgumentException"> if the length is out of range for the buffer. </exception>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DirectBufferVector.ValidateAndComputeLength(Adaptive.Aeron.DirectBufferVector[])">
            <summary>
            Validate an array of vectors to make up a message and compute the total length.
            </summary>
            <param name="vectors"> to be validated summed. </param>
            <returns> the sum of the vector lengths. </returns>
        </member>
        <member name="T:Adaptive.Aeron.DriverEventsAdapter">
            <summary>
            Analogue of the <see cref="T:Adaptive.Aeron.DriverProxy"/> on the client side for dispatching driver events to the client conductor.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.DriverProxy">
            <summary>
            Separates the concern of communicating with the client conductor away from the rest of the client.
            
            Writes commands into the client conductor buffer.
            
            Note: this class is not thread safe and is expecting to be called within <see cref="M:Adaptive.Aeron.Aeron.Context.ClientLock(Adaptive.Agrona.Concurrent.ILock)"/>.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.TimeOfLastDriverKeepaliveMs">
            <summary>
            Time of the last heartbeat to indicate the driver is alive.
            </summary>
            <returns> time of the last heartbeat to indicate the driver is alive. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.AddPublication(System.String,System.Int32)">
            <summary>
            Instruct the driver to add a concurrent publication.
            </summary>
            <param name="channel">  uri in string format. </param>
            <param name="streamId"> within the channel. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.AddExclusivePublication(System.String,System.Int32)">
            <summary>
            Instruct the driver to add a non-concurrent, i.e. exclusive, publication.
            </summary>
            <param name="channel">  uri in string format. </param>
            <param name="streamId"> within the channel. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.RemovePublication(System.Int64)">
            <summary>
            Instruct the driver to remove a publication by its registration id.
            </summary>
            <param name="registrationId"> for the publication to be removed. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.AddSubscription(System.String,System.Int32)">
            <summary>
            Instruct the driver to add a subscription.
            </summary>
            <param name="channel">  uri in string format. </param>
            <param name="streamId"> within the channel. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.RemoveSubscription(System.Int64)">
            <summary>
            Instruct the driver to remove a subscription by its registration id.
            </summary>
            <param name="registrationId"> for the subscription to be removed. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.AddDestination(System.Int64,System.String)">
            <summary>
            Add a destination to the send channel of an existing MDC Publication.
            </summary>
            <param name="registrationId">  of the Publication. </param>
            <param name="endpointChannel"> for the destination. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.RemoveDestination(System.Int64,System.String)">
            <summary>
            Remove a destination from the send channel of an existing MDC Publication.
            </summary>
            <param name="registrationId">  of the Publication. </param>
            <param name="endpointChannel"> used for the <seealso cref="M:Adaptive.Aeron.DriverProxy.AddDestination(System.Int64,System.String)"/> command. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.AddRcvDestination(System.Int64,System.String)">
            <summary>
            Add a destination to the receive channel of an existing MDS Subscription.
            </summary>
            <param name="registrationId">  of the Subscription. </param>
            <param name="endpointChannel"> for the destination. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.RemoveRcvDestination(System.Int64,System.String)">
            <summary>
            Remove a destination from the receive channel of an existing MDS Subscription.
            </summary>
            <param name="registrationId">  of the Subscription. </param>
            <param name="endpointChannel"> used for the <seealso cref="M:Adaptive.Aeron.DriverProxy.AddRcvDestination(System.Int64,System.String)"/> command. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.AddCounter(System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Add a new counter with a type id plus the label and key are provided in buffers.
            </summary>
            <param name="typeId">      for associating with the counter. </param>
            <param name="keyBuffer">   containing the metadata key. </param>
            <param name="keyOffset">   offset at which the key begins. </param>
            <param name="keyLength">   length in bytes for the key. </param>
            <param name="labelBuffer"> containing the label. </param>
            <param name="labelOffset"> offset at which the label begins. </param>
            <param name="labelLength"> length in bytes for the label. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.AddCounter(System.Int32,System.String)">
            <summary>
            Add a new counter with a type id and label, the key will be blank.
            </summary>
            <param name="typeId"> for associating with the counter. </param>
            <param name="label">  that is human-readable for the counter. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.RemoveCounter(System.Int64)">
            <summary>
            Instruct the media driver to remove an existing counter by its registration id.
            </summary>
            <param name="registrationId"> of counter to remove. </param>
            <returns> the correlation id for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.ClientClose">
            <summary>
            Notify the media driver that this client is closing.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.DriverProxy.TerminateDriver(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Instruct the media driver to terminate.
            </summary>
            <param name="tokenBuffer"> containing the authentication token. </param>
            <param name="tokenOffset"> at which the token begins. </param>
            <param name="tokenLength"> in bytes. </param>
            <returns> true is successfully sent. </returns>
        </member>
        <member name="T:Adaptive.Aeron.EndOfStreamHandler">
            <summary>
            Delegeate for delivery of End of Stream image notification to a <see cref="T:Adaptive.Aeron.Subscription"/>
            </summary>
            <param name="image"> that has reached End Of Stream.</param>
        </member>
        <member name="T:Adaptive.Aeron.ErrorCode">
            <summary>
            Error codes between media driver and client and the on-wire protocol.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.UNUSED">
            <summary>
            Old generic value, no longer used (0 value clashes with success). Retained for version compatibility. 
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.INVALID_CHANNEL">
            <summary>
            A failure occurred creating a new channel or parsing the channel string. 
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.UNKNOWN_SUBSCRIPTION">
            <summary>
            Attempted to reference a subscription, but it was not found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.UNKNOWN_PUBLICATION">
            <summary>
            Attempted to reference a publication, but it was not found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.CHANNEL_ENDPOINT_ERROR">
            <summary>
            Channel Endpoint could not be successfully opened.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.UNKNOWN_COUNTER">
            <summary>
            Attempted to reference a counter, but it was not found.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.UNKNOWN_COMMAND_TYPE_ID">
            <summary>
            Attempted to send a command unknown by the driver.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.MALFORMED_COMMAND">
            <summary>
            Attempted to send a command that is malformed. Typically, too short.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.NOT_SUPPORTED">
            <summary>
            Attempted to send a command known by the driver, but not currently supported.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.UNKNOWN_HOST">
            <summary>
            Attempted to send a command that had a hostname that could not be resolved.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.RESOURCE_TEMPORARILY_UNAVAILABLE">
            <summary>
            Attempted to send a command that referred to a resource that was unavailable.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.GENERIC_ERROR">
            <summary>
            Aeron encountered an error condition.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.ErrorCode.UNKNOWN_CODE_VALUE">
            <summary>
            A code value returned was not known.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Exceptions.AeronException">
            <summary>
            Base Aeron exception for catching all Aeron specific errors.
            </summary>
        </member>
        <member name="P:Adaptive.Aeron.Exceptions.AeronException.Category">
            <summary>
            <seealso cref="T:Adaptive.Aeron.Exceptions.Category"/> of the exception to help the client decide how they should proceed.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Exceptions.AeronException.#ctor">
            <summary>
            Default Aeron exception as <seealso cref="F:Adaptive.Aeron.Exceptions.Category.ERROR"/>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Exceptions.AeronException.#ctor(Adaptive.Aeron.Exceptions.Category)">
            <summary>
            Default Aeron exception with provided <seealso cref="T:Adaptive.Aeron.Exceptions.Category"/>.
            </summary>
            <param name="category"> of this exception. </param>
        </member>
        <member name="T:Adaptive.Aeron.Exceptions.Category">
            <summary>
            Category of <seealso cref="T:System.Exception"/>
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Exceptions.Category.FATAL">
            <summary>
            Exception indicates a fatal condition. Recommendation is to terminate process immediately to avoid
            state corruption.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Exceptions.Category.ERROR">
            <summary>
            Exception is an error. Corrective action is recommended if understood, otherwise treat as fatal.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Exceptions.Category.WARN">
            <summary>
            Exception is a warning. Action has been, or will be, taken to handle the condition.
            Additional corrective action by the application may be needed.
            </summary>
        </member>
        <member name="P:Adaptive.Aeron.Exceptions.ChannelEndpointException.StatusIndicatorId">
            <summary>
            Return the id for the counter associated with the channel endpoint.
            </summary>
            <returns>counter id associated with the channel endpoint</returns>
        </member>
        <member name="T:Adaptive.Aeron.Exceptions.ClientTimeoutException">
            <summary>
            Client timeout event received from the driver for this client.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Exceptions.ConcurrentConcludeException">
            <summary>
            Conclude has been called concurrently on a Context. The caller that receives this should not close the
            concluded context as it will be owned by another caller.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Exceptions.ConductorServiceTimeoutException">
            <summary>
            A timeout has occurred between service calls for the client conductor.
            <para>
            This is likely to occur due to GC or resource starvation where the client conductor thread has not being able to
            run within the <code>aeron.client.liveness.timeout</code> property set on the media driver.
            </para>
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Exceptions.DriverTimeoutException">
            <summary>
            A timeout has occurred while waiting on the media driver responding to an operation.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Exceptions.RegistrationException">
            <summary>
            Caused when a error occurs during addition, modification, or release of client resources such as
            <seealso cref="T:Adaptive.Aeron.Publication"/>s, <seealso cref="T:Adaptive.Aeron.Subscription"/>s, or <seealso cref="T:Adaptive.Aeron.Counter"/>s.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Exceptions.RegistrationException.CorrelationId">
            <summary>
            Get the correlation id of the command to register the resource action.
            </summary>
            <returns> the correlation id of the command to register the resource action. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Exceptions.RegistrationException.ErrorCode">
            <summary>
            Get the <seealso cref="M:Adaptive.Aeron.Exceptions.RegistrationException.ErrorCode"/> for the specific exception.
            </summary>
            <returns> the <seealso cref="M:Adaptive.Aeron.Exceptions.RegistrationException.ErrorCode"/> for the specific exception. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Exceptions.RegistrationException.ErrorCodeValue">
            <summary>
            Value of the errorCode encoded. This can provide additional information when a
            <seealso cref="F:Adaptive.Aeron.ErrorCode.UNKNOWN_CODE_VALUE"/> is returned.
            </summary>
            <returns> value of the errorCode encoded as an int. </returns>
        </member>
        <member name="T:Adaptive.Aeron.ExclusivePublication">
            <summary>
            Aeron publisher API for sending messages to subscribers of a given channel and streamId pair. ExclusivePublications
            each get their own session id so multiple can be concurrently active on the same media driver as independent streams.
            <para>
            <seealso cref="T:Adaptive.Aeron.ExclusivePublication"/>s are created via the <seealso cref="M:Adaptive.Aeron.Aeron.AddExclusivePublication(System.String,System.Int32)"/> method,
            and messages are sent via one of the <seealso cref="M:Adaptive.Aeron.Publication.Offer(Adaptive.Agrona.Concurrent.UnsafeBuffer)"/> methods, or a
            <seealso cref="M:Adaptive.Aeron.ExclusivePublication.TryClaim(System.Int32,Adaptive.Aeron.LogBuffer.BufferClaim)"/> and <seealso cref="M:Adaptive.Aeron.LogBuffer.BufferClaim.Commit"/> method combination.
            </para>
            <para>
            <seealso cref="T:Adaptive.Aeron.ExclusivePublication"/>s have the potential to provide greater throughput than the default <seealso cref="T:Adaptive.Aeron.Publication"/>
            which supports concurrent access.
            </para>
            <para>
            The APIs used for tryClaim and offer are non-blocking.
            </para>
            <para>
            <b>Note:</b> Instances are NOT threadsafe for offer and tryClaim methods but are for the others.
            
            </para>
            </summary>
            <seealso cref="M:Adaptive.Aeron.Aeron.AddExclusivePublication(System.String,System.Int32)"></seealso>
        </member>
        <member name="P:Adaptive.Aeron.ExclusivePublication.Position">
            <inheritdoc />
        </member>
        <member name="P:Adaptive.Aeron.ExclusivePublication.AvailableWindow">
            <inheritdoc />
        </member>
        <member name="M:Adaptive.Aeron.ExclusivePublication.TermId">
            <summary>
            The current term-id of the publication.
            </summary>
            <returns> the current term-id of the publication. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ExclusivePublication.TermOffset">
            <summary>
            The current term-offset of the publication.
            </summary>
            <returns> the current term-offset of the publication. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ExclusivePublication.Offer(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <inheritdoc />
        </member>
        <member name="M:Adaptive.Aeron.ExclusivePublication.Offer(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <inheritdoc />
        </member>
        <member name="M:Adaptive.Aeron.ExclusivePublication.Offer(Adaptive.Aeron.DirectBufferVector[],Adaptive.Aeron.ReservedValueSupplier)">
            <inheritdoc />
        </member>
        <member name="M:Adaptive.Aeron.ExclusivePublication.TryClaim(System.Int32,Adaptive.Aeron.LogBuffer.BufferClaim)">
            <inheritdoc />
        </member>
        <member name="M:Adaptive.Aeron.ExclusivePublication.AppendPadding(System.Int32)">
            <summary>
            Append a padding record log of a given length to make up the log to a position.
            </summary>
            <param name="length"> of the range to claim, in bytes.. </param>
            <returns> The new stream position, otherwise a negative error value of <seealso cref="F:Adaptive.Aeron.Publication.NOT_CONNECTED"/>,
            <seealso cref="F:Adaptive.Aeron.Publication.BACK_PRESSURED"/>, <seealso cref="F:Adaptive.Aeron.Publication.ADMIN_ACTION"/>, <seealso cref="F:Adaptive.Aeron.Publication.CLOSED"/>, or <seealso cref="F:Adaptive.Aeron.Publication.MAX_POSITION_EXCEEDED"/>. </returns>
            <exception cref="T:System.ArgumentException"> if the length is greater than <seealso cref="P:Adaptive.Aeron.Publication.MaxMessageLength"/>. </exception>
        </member>
        <member name="M:Adaptive.Aeron.ExclusivePublication.OfferBlock(Adaptive.Agrona.IMutableDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Offer a block of pre-formatted message fragments directly into the current term.
            </summary>
            <param name="buffer"> containing the pre-formatted block of message fragments. </param>
            <param name="offset"> offset in the buffer at which the first fragment begins. </param>
            <param name="length"> in bytes of the encoded block. </param>
            <returns> The new stream position, otherwise a negative error value of <seealso cref="F:Adaptive.Aeron.Publication.NOT_CONNECTED"/>,
            <seealso cref="F:Adaptive.Aeron.Publication.BACK_PRESSURED"/>, <seealso cref="F:Adaptive.Aeron.Publication.ADMIN_ACTION"/>, <seealso cref="F:Adaptive.Aeron.Publication.CLOSED"/>,
            or <seealso cref="F:Adaptive.Aeron.Publication.MAX_POSITION_EXCEEDED"/>. </returns>
            <exception cref="T:System.ArgumentException"> if the length is greater than remaining size of the current term. </exception>
            <exception cref="T:System.ArgumentException"> if the first frame within the block is not properly formatted, i.e. if the
            <code>streamId</code> is not equal to the value returned by the <seealso cref="P:Adaptive.Aeron.Publication.StreamId"/>
            method or if the <code>sessionId</code> is not equal to the value returned by the
            <seealso cref="P:Adaptive.Aeron.Publication.SessionId"/> method or if the frame type is not equal to the
            <seealso cref="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_DATA"/>. </exception>
        </member>
        <member name="T:Adaptive.Aeron.FragmentAssembler">
            <summary>
            A <seealso cref="T:Adaptive.Aeron.LogBuffer.FragmentHandler"/> that sits in a chain-of-responsibility pattern that reassembles fragmented messages
            so that the next handler in the chain only sees whole messages.
            
            Unfragmented messages are delegated without copy. Fragmented messages are copied to a temporary
            buffer for reassembly before delegation.
            
            The <seealso cref="T:Adaptive.Aeron.LogBuffer.Header"/> passed to the _delegate on assembling a message will be that of the last fragment.
            
            Session based buffers will be allocated and grown as necessary based on the length of messages to be assembled.
            When sessions go inactive see <seealso cref="T:Adaptive.Aeron.UnavailableImageHandler"/>, it is possible to free the buffer by calling
            <seealso cref="M:Adaptive.Aeron.FragmentAssembler.FreeSessionBuffer(System.Int32)"/>.
            
            <see cref="M:Adaptive.Aeron.Subscription.Poll(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)"/>
            <see cref="M:Adaptive.Aeron.Image.Poll(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.FragmentAssembler.#ctor(Adaptive.Aeron.LogBuffer.IFragmentHandler,System.Int32)">
            <summary>
            Construct an adapter to reassemble message fragments and _delegate on only whole messages.
            </summary>
            <param name="fragmentHandler">            onto which whole messages are forwarded. </param>
            <param name="initialBufferLength"> to be used for each session. </param>
        </member>
        <member name="M:Adaptive.Aeron.FragmentAssembler.#ctor(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)">
            <summary>
            Construct an adapter to reassemble message fragments and _delegate on only whole messages.
            </summary>
            <param name="fragmentHandler">            onto which whole messages are forwarded. </param>
            <param name="initialBufferLength"> to be used for each session. </param>
        </member>
        <member name="M:Adaptive.Aeron.FragmentAssembler.Delegate">
            <summary>
            Get the delegate unto which assembled messages are delegated.
            </summary>
            <returns> the delegate unto which assembled messages are delegated.</returns>
        </member>
        <member name="M:Adaptive.Aeron.FragmentAssembler.OnFragment(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.Header)">
            <summary>
            The implementation of <seealso cref="T:Adaptive.Aeron.LogBuffer.IFragmentHandler"/> that reassembles and forwards whole messages.
            </summary>
            <param name="buffer"> containing the data. </param>
            <param name="offset"> at which the data begins. </param>
            <param name="length"> of the data in bytes. </param>
            <param name="header"> representing the metadata for the data. </param>
        </member>
        <member name="M:Adaptive.Aeron.FragmentAssembler.FreeSessionBuffer(System.Int32)">
            <summary>
            Free an existing session buffer to reduce memory pressure when an image goes inactive or no more
            large messages are expected.
            </summary>
            <param name="sessionId"> to have its buffer freed </param>
            <returns> true if a buffer has been freed otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.FragmentAssembler.Clear">
            <summary>
            Clear down the cache of buffers by session for reassembling messages.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.ILogBuffersFactory">
            <summary>
            Interface for encapsulating the strategy of mapping <seealso cref="T:Adaptive.Aeron.LogBuffers"/> at a giving file location.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.ILogBuffersFactory.Map(System.String)">
            <summary>
            Map a log file into memory and wrap each section with a <seealso cref="T:Adaptive.Agrona.Concurrent.UnsafeBuffer"/>.
            </summary>
            <param name="logFileName"> to be mapped into memory. </param>
            <returns> a representation of the mapped log buffer. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Image">
            <summary>
            Represents a replicated <see cref="T:Adaptive.Aeron.Publication"/> from a publisher which matches a <seealso cref="P:Adaptive.Aeron.Image.Subscription"/>.
            Each <seealso cref="T:Adaptive.Aeron.Image"/> identifies a source <see cref="T:Adaptive.Aeron.Publication"/> by <see cref="P:Adaptive.Aeron.Image.SessionId"/>.
            
            By default fragmented messages are not reassembled before delivery. If an application must
            receive whole messages, whether or not they were fragmented, then the Subscriber
            should be created with a <seealso cref="T:Adaptive.Aeron.FragmentAssembler"/> or a custom implementation.
            
            It is an application's responsibility to <seealso cref="M:Adaptive.Aeron.Image.Poll(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)"/> the <seealso cref="T:Adaptive.Aeron.Image"/> for new messages.
            
            <b>Note:</b>Images are not threadsafe and should not be shared between subscribers.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Image.#ctor(Adaptive.Aeron.Subscription,System.Int32,Adaptive.Agrona.Concurrent.Status.IPosition,Adaptive.Aeron.LogBuffers,Adaptive.Agrona.ErrorHandler,System.String,System.Int64)">
            <summary>
            Construct a new image over a log to represent a stream of messages from a <seealso cref="T:Adaptive.Aeron.Publication"/>.
            </summary>
            <param name="subscription">       to which this <seealso cref="T:Adaptive.Aeron.Image"/> belongs. </param>
            <param name="sessionId">          of the stream of messages. </param>
            <param name="subscriberPosition"> for indicating the position of the subscriber in the stream. </param>
            <param name="logBuffers">         containing the stream of messages. </param>
            <param name="errorHandler">       to be called if an error occurs when polling for messages. </param>
            <param name="sourceIdentity">     of the source sending the stream of messages. </param>
            <param name="correlationId">      of the request to the media driver. </param>
        </member>
        <member name="P:Adaptive.Aeron.Image.PositionBitsToShift">
            <summary>
            Number of bits to right shift a position to get a term count for how far the stream has progressed.
            </summary>
            <returns> of bits to right shift a position to get a term count for how far the stream has progressed. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.TermBufferLength">
            <summary>
            Get the length in bytes for each term partition in the log buffer.
            </summary>
            <returns> the length in bytes for each term partition in the log buffer. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.SessionId">
            <summary>
            The sessionId for the steam of messages. Sessions are unique within a <see cref="P:Adaptive.Aeron.Image.Subscription"/> and unique across
            all <see cref="T:Adaptive.Aeron.Publication"/>s from a <see cref="P:Adaptive.Aeron.Image.SourceIdentity"/>
            </summary>
            <returns> the sessionId for the steam of messages. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.SourceIdentity">
            <summary>
            The source identity of the sending publisher as an abstract concept appropriate for the media.
            </summary>
            <returns> source identity of the sending publisher as an abstract concept appropriate for the media. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.MtuLength">
            <summary>
            The length in bytes of the MTU (Maximum Transmission Unit) the Sender used for the datagram.
            </summary>
            <returns> length in bytes of the MTU (Maximum Transmission Unit) the Sender used for the datagram. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.InitialTermId">
            <summary>
            The initial term at which the stream started for this session.
            </summary>
            <returns> the initial term id. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.CorrelationId">
            <summary>
            The correlationId for identification of the image with the media driver.
            </summary>
            <returns> the correlationId for identification of the image with the media driver. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.Subscription">
            <summary>
            Get the <seealso cref="P:Adaptive.Aeron.Image.Subscription"/> to which this <seealso cref="T:Adaptive.Aeron.Image"/> belongs.
            </summary>
            <returns> the <seealso cref="P:Adaptive.Aeron.Image.Subscription"/> to which this <seealso cref="T:Adaptive.Aeron.Image"/> belongs. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.Closed">
            <summary>
            Has this object been closed and should no longer be used?
            </summary>
            <returns> true if it has been closed otherwise false. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.JoinPosition">
            <summary>
            Get the position the subscriber joined this stream at.
            </summary>
            <returns> the position the subscriber joined this stream at.</returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.Position">
            <summary>
            The position this <seealso cref="T:Adaptive.Aeron.Image"/> has been consumed to by the subscriber.
            </summary>
            <returns> the position this <seealso cref="T:Adaptive.Aeron.Image"/> has been consumed to by the subscriber. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.SubscriberPositionId">
            <summary>
            The counter id for the subscriber position counter.
            </summary>
            <returns> the id for the subscriber position counter. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Image.IsEndOfStream">
            <summary>
            Is the current consumed position at the end of the stream?
            </summary>
            <returns> true if at the end of the stream or false if not. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Image.ActiveTransportCount">
            <summary>
            Count of observed active transports within the image liveness timeout.
              
            If the image is closed, then this is 0. This may also be 0 if no actual datagrams have arrived. IPC
            Images also will be 0.
            </summary>
            <returns> count of active transports - 0 if Image is closed, no datagrams yet, or IPC. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Image.Poll(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)">
            <summary>
            Poll for new messages in a stream. If new messages are found beyond the last consumed position then they
            will be delivered to the <seealso cref="T:Adaptive.Aeron.LogBuffer.FragmentHandler"/> up to a limited number of fragments as specified.
            
            Use a <see cref="T:Adaptive.Aeron.FragmentAssembler"/> to assemble messages which span multiple fragments.
            </summary>
            <param name="fragmentHandler"> to which message fragments are delivered. </param>
            <param name="fragmentLimit">   for the number of fragments to be consumed during one polling operation. </param>
            <returns> the number of fragments that have been consumed. </returns>
            <seealso cref="T:Adaptive.Aeron.FragmentAssembler" />
            <seealso cref="T:Adaptive.Aeron.ImageFragmentAssembler" />
        </member>
        <member name="M:Adaptive.Aeron.Image.Poll(Adaptive.Aeron.LogBuffer.IFragmentHandler,System.Int32)">
            <summary>
            Poll for new messages in a stream. If new messages are found beyond the last consumed position then they
            will be delivered to the <seealso cref="T:Adaptive.Aeron.LogBuffer.FragmentHandler"/> up to a limited number of fragments as specified.
            
            Use a <see cref="T:Adaptive.Aeron.FragmentAssembler"/> to assemble messages which span multiple fragments.
            </summary>
            <param name="fragmentHandler"> to which message fragments are delivered. </param>
            <param name="fragmentLimit">   for the number of fragments to be consumed during one polling operation. </param>
            <returns> the number of fragments that have been consumed. </returns>
            <seealso cref="T:Adaptive.Aeron.FragmentAssembler" />
            <seealso cref="T:Adaptive.Aeron.ImageFragmentAssembler" />
        </member>
        <member name="M:Adaptive.Aeron.Image.ControlledPoll(Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int32)">
            <summary>
            Poll for new messages in a stream. If new messages are found beyond the last consumed position then they
            will be delivered to the <seealso cref="T:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler"/> up to a limited number of fragments as specified.
                
            Use a <see cref="T:Adaptive.Aeron.ControlledFragmentAssembler"/>. to assemble messages which span multiple fragments.
            
            </summary>
            <param name="handler"> to which message fragments are delivered. </param>
            <param name="fragmentLimit">   for the number of fragments to be consumed during one polling operation. </param>
            <returns> the number of fragments that have been consumed. </returns>
            <seealso cref="T:Adaptive.Aeron.ControlledFragmentAssembler" />
            <seealso cref="T:Adaptive.Aeron.ImageControlledFragmentAssembler" />
        </member>
        <member name="M:Adaptive.Aeron.Image.ControlledPoll(Adaptive.Aeron.LogBuffer.ControlledFragmentHandler,System.Int32)">
            <summary>
            Poll for new messages in a stream. If new messages are found beyond the last consumed position then they
            will be delivered to the <seealso cref="T:Adaptive.Aeron.LogBuffer.ControlledFragmentHandler"/> up to a limited number of fragments as specified.
                
            Use a <see cref="T:Adaptive.Aeron.ControlledFragmentAssembler"/>. to assemble messages which span multiple fragments.
            
            </summary>
            <param name="handler"> to which message fragments are delivered. </param>
            <param name="fragmentLimit">   for the number of fragments to be consumed during one polling operation. </param>
            <returns> the number of fragments that have been consumed. </returns>
            <seealso cref="T:Adaptive.Aeron.ControlledFragmentAssembler" />
            <seealso cref="T:Adaptive.Aeron.ImageControlledFragmentAssembler" />
        </member>
        <member name="M:Adaptive.Aeron.Image.BoundedPoll(Adaptive.Aeron.LogBuffer.IFragmentHandler,System.Int64,System.Int32)">
            <summary>
            Poll for new messages in a stream. If new messages are found beyond the last consumed position then they
            will be delivered to the <seealso cref="T:Adaptive.Aeron.LogBuffer.FragmentHandler"/> up to a limited number of fragments as specified or
            the maximum position specified.
            <para>
            Use a <seealso cref="T:Adaptive.Aeron.FragmentAssembler"/> to assemble messages which span multiple fragments.
               
            </para>
            </summary>
            <param name="handler">       to which message fragments are delivered. </param>
            <param name="limitPosition"> to consume messages up to. </param>
            <param name="fragmentLimit"> for the number of fragments to be consumed during one polling operation. </param>
            <returns> the number of fragments that have been consumed. </returns>
            <seealso cref="T:Adaptive.Aeron.FragmentAssembler" />
            <seealso cref="T:Adaptive.Aeron.ImageFragmentAssembler" />
        </member>
        <member name="M:Adaptive.Aeron.Image.BoundedPoll(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int64,System.Int32)">
            <summary>
            Poll for new messages in a stream. If new messages are found beyond the last consumed position then they
            will be delivered to the <seealso cref="T:Adaptive.Aeron.LogBuffer.FragmentHandler"/> up to a limited number of fragments as specified or
            the maximum position specified.
            <para>
            Use a <seealso cref="T:Adaptive.Aeron.FragmentAssembler"/> to assemble messages which span multiple fragments.
               
            </para>
            </summary>
            <param name="handler">       to which message fragments are delivered. </param>
            <param name="limitPosition"> to consume messages up to. </param>
            <param name="fragmentLimit"> for the number of fragments to be consumed during one polling operation. </param>
            <returns> the number of fragments that have been consumed. </returns>
            <seealso cref="T:Adaptive.Aeron.FragmentAssembler" />
            <seealso cref="T:Adaptive.Aeron.ImageFragmentAssembler" />
        </member>
        <member name="M:Adaptive.Aeron.Image.BoundedControlledPoll(Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int64,System.Int32)">
            <summary>
            Poll for new messages in a stream. If new messages are found beyond the last consumed position then they
            will be delivered to the <seealso cref="T:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler"/> up to a limited number of fragments as specified or
            the maximum position specified.
            <para>
            Use a <seealso cref="T:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler"/> to assemble messages which span multiple fragments.
                
            </para>
            </summary>
            <param name="handler"> to which message fragments are delivered. </param>
            <param name="limitPosition">     to consume messages up to. </param>
            <param name="fragmentLimit">   for the number of fragments to be consumed during one polling operation. </param>
            <returns> the number of fragments that have been consumed. </returns>
            <seealso cref="T:Adaptive.Aeron.ControlledFragmentAssembler"/>
            <seealso cref="T:Adaptive.Aeron.ImageControlledFragmentAssembler"/>
        </member>
        <member name="M:Adaptive.Aeron.Image.BoundedControlledPoll(Adaptive.Aeron.LogBuffer.ControlledFragmentHandler,System.Int64,System.Int32)">
            <summary>
            Poll for new messages in a stream. If new messages are found beyond the last consumed position then they
            will be delivered to the <seealso cref="T:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler"/> up to a limited number of fragments as specified or
            the maximum position specified.
            <para>
            Use a <seealso cref="T:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler"/> to assemble messages which span multiple fragments.
                
            </para>
            </summary>
            <param name="handler"> to which message fragments are delivered. </param>
            <param name="limitPosition">     to consume messages up to. </param>
            <param name="fragmentLimit">   for the number of fragments to be consumed during one polling operation. </param>
            <returns> the number of fragments that have been consumed. </returns>
            <seealso cref="T:Adaptive.Aeron.ControlledFragmentAssembler"/>
            <seealso cref="T:Adaptive.Aeron.ImageControlledFragmentAssembler"/>
        </member>
        <member name="M:Adaptive.Aeron.Image.ControlledPeek(System.Int64,Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int64)">
            <summary>
            Peek for new messages in a stream by scanning forward from an initial position. If new messages are found then
            they will be delivered to the <seealso cref="T:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler"/> up to a limited position.
               
            Use a <seealso cref="T:Adaptive.Aeron.ControlledFragmentAssembler"/> to assemble messages which span multiple fragments. Scans must also
            start at the beginning of a message so that the assembler is reset.
            
            </summary>
            <param name="initialPosition"> from which to peek forward. </param>
            <param name="handler"> to which message fragments are delivered. </param>
            <param name="limitPosition">   up to which can be scanned. </param>
            <returns> the resulting position after the scan terminates which is a complete message. </returns>
            <seealso cref="T:Adaptive.Aeron.ControlledFragmentAssembler"/>
            <seealso cref="T:Adaptive.Aeron.ImageControlledFragmentAssembler"/>
        </member>
        <member name="M:Adaptive.Aeron.Image.BlockPoll(Adaptive.Aeron.LogBuffer.BlockHandler,System.Int32)">
             <summary>
             Poll for new messages in a stream. If new messages are found beyond the last consumed position then they
             will be delivered to the <seealso cref="T:Adaptive.Aeron.LogBuffer.IBlockHandler"/> up to a limited number of bytes.
            
             A scan will terminate if a padding frame is encountered. If first frame in a scan is padding then a block
             for the padding is notified. If the padding comes after the first frame in a scan then the scan terminates
             at the offset the padding frame begins. Padding frames are delivered singularly in a block.
            
             Padding frames may be for a greater range than the limit offset but only the header needs to be valid so
             relevant length of the frame is <see cref="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.HEADER_LENGTH"/>
             </summary>
             <param name="handler">     to which block is delivered. </param>
             <param name="blockLengthLimit"> up to which a block may be in length. </param>
             <returns> the number of bytes that have been consumed. </returns>
        </member>
        <member name="T:Adaptive.Aeron.ImageControlledFragmentAssembler">
            <summary>
            A <seealso cref="T:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler"/> that sits in a chain-of-responsibility pattern that reassembles fragmented
            messages so that the next handler in the chain only sees whole messages. This is for a single session on an
            <seealso cref="T:Adaptive.Aeron.Image"/> and not for multiple session <seealso cref="T:Adaptive.Aeron.Image"/>s in a <seealso cref="T:Adaptive.Aeron.Subscription"/>.
            
            Unfragmented messages are delegated without copy. Fragmented messages are copied to a temporary
            buffer for reassembly before delegation.
            
            The <seealso cref="T:Adaptive.Aeron.LogBuffer.Header"/> passed to the delegate on assembling a message will be that of the last fragment.
            </summary>
            <see cref="M:Adaptive.Aeron.Image.ControlledPoll(Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int32)"/>
            <see cref="M:Adaptive.Aeron.Image.ControlledPeek(System.Int64,Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int64)"/>
        </member>
        <member name="M:Adaptive.Aeron.ImageControlledFragmentAssembler.#ctor(Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int32)">
            <summary>
            Construct an adapter to reassembly message fragments and delegate on only whole messages.
            </summary>
            <param name="delegate">            onto which whole messages are forwarded. </param>
            <param name="initialBufferLength"> to be used for each session. </param>
        </member>
        <member name="M:Adaptive.Aeron.ImageControlledFragmentAssembler.Delegate">
            <summary>
            Get the delegate unto which assembled messages are delegated.
            </summary>
            <returns>  the delegate unto which assembled messages are delegated. </returns>
        </member>
        <member name="M:Adaptive.Aeron.ImageControlledFragmentAssembler.Builder">
            <summary>
            Get the <see cref="T:Adaptive.Aeron.BufferBuilder"/> for resetting this assembler.
            </summary>
            <returns> the <see cref="T:Adaptive.Aeron.BufferBuilder"/> for resetting this assembler</returns>
        </member>
        <member name="M:Adaptive.Aeron.ImageControlledFragmentAssembler.OnFragment(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.Header)">
            <summary>
            The implementation of <seealso cref="T:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler"/> that reassembles and forwards whole messages.
            </summary>
            <param name="buffer"> containing the data. </param>
            <param name="offset"> at which the data begins. </param>
            <param name="length"> of the data in bytes. </param>
            <param name="header"> representing the metadata for the data. </param>
            <returns> <see cref="T:Adaptive.Aeron.LogBuffer.ControlledFragmentHandlerAction"/> to be taken after processing fragment.</returns>
        </member>
        <member name="T:Adaptive.Aeron.ImageFragmentAssembler">
            <summary>
            A <seealso cref="T:Adaptive.Aeron.LogBuffer.IFragmentHandler"/> that sits in a chain-of-responsibility pattern that reassembles fragmented messages
            so that the next handler in the chain only sees whole messages. This is for a single session on an {@link Image}
            and not for multiple session <see cref="T:Adaptive.Aeron.Image"/>s in a <see cref="T:Adaptive.Aeron.Subscription"/>.
            
            Unfragmented messages are delegated without copy. Fragmented messages are copied to a temporary
            buffer for reassembly before delegation.
            
            The <seealso cref="T:Adaptive.Aeron.LogBuffer.Header"/> passed to the _delegate on assembling a message will be that of the last fragment.
            
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.ImageFragmentAssembler.#ctor(Adaptive.Aeron.LogBuffer.IFragmentHandler,System.Int32)">
            <summary>
            Construct an adapter to reassemble message fragments and _delegate on only whole messages.
            </summary>
            <param name="fragmentHandler">            onto which whole messages are forwarded. </param>
            <param name="initialBufferLength"> to be used for each session. </param>
        </member>
        <member name="M:Adaptive.Aeron.ImageFragmentAssembler.#ctor(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)">
            <summary>
            Construct an adapter to reassemble message fragments and _delegate on only whole messages.
            </summary>
            <param name="fragmentHandler">            onto which whole messages are forwarded. </param>
            <param name="initialBufferLength"> to be used for each session. </param>
        </member>
        <member name="M:Adaptive.Aeron.ImageFragmentAssembler.Delegate">
            <summary>
            Get the delegate unto which assembled messages are delegated.
            </summary>
            <returns> the delegate unto which assembled messages are delegated.</returns>
        </member>
        <member name="M:Adaptive.Aeron.ImageFragmentAssembler.Builder">
            <summary>
            Get the <see cref="T:Adaptive.Aeron.BufferBuilder"/> for resetting this assembler.
            </summary>
            <returns> the <see cref="T:Adaptive.Aeron.BufferBuilder"/> for resetting this assembler</returns>
        </member>
        <member name="M:Adaptive.Aeron.ImageFragmentAssembler.OnFragment(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.Header)">
            <summary>
            The implementation of <seealso cref="T:Adaptive.Aeron.LogBuffer.FragmentHandler"/> that reassembles and forwards whole messages.
            </summary>
            <param name="buffer"> containing the data. </param>
            <param name="offset"> at which the data begins. </param>
            <param name="length"> of the data in bytes. </param>
            <param name="header"> representing the metadata for the data. </param>
        </member>
        <member name="T:Adaptive.Aeron.AvailableImageHandler">
            <summary>
            Interface for notification of new <see cref="T:Adaptive.Aeron.Image"/>s becoming available under a <see cref="T:Adaptive.Aeron.Subscription"/>
            
            Method called by Aeron to deliver notification of a new <see cref="T:Adaptive.Aeron.Image"/> being available for polling.
            
            Within this callback reentrant calls to the <see cref="T:Adaptive.Aeron.Aeron"/> client are not permitted and
            will result in undefined behaviour.
            </summary>
            <param name="image"> that is now available.</param>
        </member>
        <member name="T:Adaptive.Aeron.UnavailableImageHandler">
             <summary>
             Interface for delivery of inactive image notification to a <seealso cref="T:Adaptive.Aeron.Subscription"/>.
             
             Method called by Aeron to deliver notification that an <see cref="T:Adaptive.Aeron.Image"/> is no longer available for polling.
            
             Within this callback reentrant calls to the <see cref="T:Adaptive.Aeron.Aeron"/> client are not permitted and
             will result in undefined behaviour.
             </summary>
             <param name="image"> that is no longer available for polling.</param>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffers">
            <summary>
            Takes a log file name and maps the file into memory and wraps it with <seealso cref="T:Adaptive.Agrona.Concurrent.UnsafeBuffer"/>s as appropriate.
            </summary>
            <seealso cref="T:Adaptive.Aeron.LogBuffer.LogBufferDescriptor" />
        </member>
        <member name="M:Adaptive.Aeron.LogBuffers.#ctor(System.String)">
            <summary>
            Construct the log buffers for a given log file.
            </summary>
            <param name="logFileName"></param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffers.MetaDataBuffer">
            <summary>
            Get the buffer which holds the log metadata.
            </summary>
            <returns> the buffer which holds the log metadata. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffers.PreTouch">
            <summary>
            Pre touch memory pages, so they are faulted in to be available before access.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffers.TermLength">
            <summary>
             The length of the term buffer in each log partition.
            </summary>
            <returns> length of the term buffer in each log partition. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffers.IncRef">
            <summary>
            Increment reference count.
            </summary>
            <returns> current reference count after increment. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffers.DecRef">
            <summary>
            Decrement reference count.
            </summary>
            <returns> current reference counter after decrement. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffers.LingerDeadlineNs(System.Int64)">
            <summary>
            Set the deadline for how long to linger around once unreferenced.
            </summary>
            <param name="timeNs"> the deadline for how long to linger around once unreferenced. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffers.LingerDeadlineNs">
            <summary>
            The deadline for how long to linger around once unreferenced.
            </summary>
            <returns> the deadline for how long to linger around once unreferenced. </returns>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.BlockHandler">
            <summary>
            Callback for handling a block of message fragments scanned from the log.
            </summary>
            <param name="buffer">    containing the block of message fragments. </param>
            <param name="offset">    at which the block begins, including any frame headers. </param>
            <param name="length">    of the block in bytes, including any frame headers that is aligned up to
                             <seealso cref="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.FRAME_ALIGNMENT"/>. </param>
            <param name="sessionId"> of the stream containing this block of message fragments. </param>
            <param name="termId">    of the stream containing this block of message fragments. </param>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.BufferClaim">
            <summary>
            Represents a claimed range in a buffer to be used for recording a message without copy semantics for later commit.
            
            The claimed space is in <seealso cref="P:Adaptive.Aeron.LogBuffer.BufferClaim.Buffer"/> between <seealso cref="P:Adaptive.Aeron.LogBuffer.BufferClaim.Offset"/> and <seealso cref="P:Adaptive.Aeron.LogBuffer.BufferClaim.Offset"/> + <seealso cref="P:Adaptive.Aeron.LogBuffer.BufferClaim.Length"/>.
            When the buffer is filled with message data, use <seealso cref="M:Adaptive.Aeron.LogBuffer.BufferClaim.Commit"/> to make it available to subscribers.
            
            If the claimed space is no longer required it can be aborted by calling <seealso cref="M:Adaptive.Aeron.LogBuffer.BufferClaim.Abort"/>.
            
            <see cref="M:Adaptive.Aeron.Publication.TryClaim(System.Int32,Adaptive.Aeron.LogBuffer.BufferClaim)"/>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.BufferClaim.Wrap(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32,System.Int32)">
            <summary>
            Wrap a region of an underlying log buffer so it can represent a claimed space for use by a publisher.
            </summary>
            <param name="buffer"> to be wrapped. </param>
            <param name="offset"> at which the claimed region begins including space for the header. </param>
            <param name="length"> length of the underlying claimed region including space for the header. </param>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.BufferClaim.Buffer">
            <summary>
            The referenced buffer to be used.
            </summary>
            <returns> the referenced buffer to be used.. </returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.BufferClaim.Offset">
            <summary>
            The offset in the buffer at which the claimed range begins.
            </summary>
            <returns> offset in the buffer at which the range begins. </returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.BufferClaim.Length">
            <summary>
            The length of the claimed range in the buffer.
            </summary>
            <returns> length of the range in the buffer. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.BufferClaim.HeaderType">
            <summary>
            Get the value of the header type field. The lower 16 bits are valid.
            </summary>
            <returns> the value of the header type field. </returns>
            <seealso cref="T:Adaptive.Aeron.Protocol.DataHeaderFlyweight"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.BufferClaim.Flags">
            <summary>
            Get the value of the flags field.
            </summary>
            <returns> the value of the header flags field. </returns>
            <seealso cref="T:Adaptive.Aeron.Protocol.DataHeaderFlyweight"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.BufferClaim.Flags(System.Byte)">
            <summary>
            Set the value of the header flags field.
            </summary>
            <param name="flags"> value to be set in the header. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="T:Adaptive.Aeron.Protocol.DataHeaderFlyweight"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.BufferClaim.HeaderType(System.Int32)">
            <summary>
            Set the value of the header type field. The lower 16 bits are valid.
            </summary>
            <param name="type"> value to be set in the header. </param>
            <returns> this for a fluent API. </returns>
            <seealso cref="T:Adaptive.Aeron.Protocol.DataHeaderFlyweight"></seealso>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.BufferClaim.ReservedValue">
            <summary>
            Get the value stored in the reserve space at the end of a data frame header.
            
            Note: The value is in <seealso cref="F:Adaptive.Agrona.ByteOrder.LittleEndian"/> format.
            </summary>
            <returns> the value stored in the reserve space at the end of a data frame header. </returns>
            <seealso cref="T:Adaptive.Aeron.Protocol.DataHeaderFlyweight"/>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.BufferClaim.ReservedValue(System.Int64)">
            <summary>
            Write the provided value into the reserved space at the end of the data frame header.
            
            Note: The value will be written in <seealso cref="F:Adaptive.Agrona.ByteOrder.LittleEndian"/> format.
            </summary>
            <param name="value"> to be stored in the reserve space at the end of a data frame header. </param>
            <returns> this for fluent API semantics. </returns>
            <seealso cref="T:Adaptive.Aeron.Protocol.DataHeaderFlyweight" />
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.BufferClaim.PutBytes(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Put bytes into the claimed buffer space for a message. To write multiple parts then use <seealso cref="P:Adaptive.Aeron.LogBuffer.BufferClaim.Buffer"/>
            and <seealso cref="P:Adaptive.Aeron.LogBuffer.BufferClaim.Offset"/>.
            </summary>
            <param name="srcBuffer"> to copy into the claimed space. </param>
            <param name="srcIndex">  in the source buffer from which to copy. </param>
            <param name="length">    of the source buffer to copy. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.BufferClaim.Commit">
            <summary>
            Commit the message to the log buffer so that is it available to subscribers.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.BufferClaim.Abort">
            <summary>
            Abort a claim of the message space to the log buffer so that the log can progress by ignoring this claim.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.ControlledFragmentHandler">
             <summary>
             Handler for reading data that is coming from a log buffer. The frame will either contain a whole message
             or a fragment of a message to be reassembled. Messages are fragmented if greater than the frame for MTU in length.
            
             Within this callback reentrant calls to the <see cref="T:Adaptive.Aeron.Aeron"/> client are not permitted and
             will result in undefined behaviour.
             </summary>
             <param name="buffer"> containing the data. </param>
             <param name="offset"> at which the data begins. </param>
             <param name="length"> of the data in bytes. </param>
             <param name="header"> representing the metadata for the data. </param>
             <returns> The action to be taken with regard to the stream position after the callback. </returns>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.ControlledFragmentHandlerAction">
            <summary>
            Action to be taken on return from <see cref="T:Adaptive.Aeron.LogBuffer.ControlledFragmentHandler"/>.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.ControlledFragmentHandlerAction.ABORT">
            <summary>
            Abort the current polling operation and do not advance the position for this fragment.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.ControlledFragmentHandlerAction.BREAK">
            <summary>
            Break from the current polling operation and commit the position as of the end of the current fragment
            being handled.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.ControlledFragmentHandlerAction.COMMIT">
            <summary>
            Continue processing but commit the position as of the end of the current fragment so that
            flow control is applied to this point.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.ControlledFragmentHandlerAction.CONTINUE">
            <summary>
            Continue processing until fragment limit or no fragments with position commit at end of poll as the in
            <seealso cref="T:Adaptive.Aeron.LogBuffer.ControlledFragmentHandler"/>.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender">
            <summary>
            Term buffer appender which supports a single exclusive producer writing an append-only log.
            
            <b>Note:</b> This class is NOT threadsafe.
            
            Messages are appended to a term using a framing protocol as described in <seealso cref="T:Adaptive.Aeron.LogBuffer.FrameDescriptor"/>.
            
            A default message header is applied to each message with the fields filled in for fragment flags, type, term number,
            as appropriate.
            
            A message of type <seealso cref="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.PADDING_FRAME_TYPE"/> is appended at the end of the buffer if claimed
            space is not sufficiently large to accommodate the message about to be written.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.FAILED">
            <summary>
            The append operation tripped the end of the buffer and needs to rotate.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.#ctor(Adaptive.Agrona.Concurrent.UnsafeBuffer,Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Construct a view over a term buffer and state buffer for appending frames.
            </summary>
            <param name="termBuffer">     for where messages are stored. </param>
            <param name="metaDataBuffer"> for where the state of writers is stored manage concurrency. </param>
            <param name="partitionIndex"> for this will be the active appender.</param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.Claim(System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.HeaderWriter,System.Int32,Adaptive.Aeron.LogBuffer.BufferClaim)">
            <summary>
            Claim length of a term buffer for writing in the message with zero copy semantics.
            </summary>
            <param name="termId">      for the current term.</param>
            <param name="termOffset">  in the term at which to append.</param>
            <param name="header">      for writing the default header. </param>
            <param name="length">      of the message to be written. </param>
            <param name="bufferClaim"> to be updated with the claimed region. </param>
            <returns> the resulting offset of the term after the append operation on success otherwise <see cref="F:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.FAILED"/>.</returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.AppendPadding(System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.HeaderWriter,System.Int32)">
            <summary>
            Pad a length of the term buffer with a padding record.
            </summary>
            <param name="termId"> for the current term.</param>
            <param name="termOffset"> in the term at which to append.</param>
            <param name="header"> for writing the default header.</param>
            <param name="length"> of the padding to be written.</param>
            <returns> the resulting offset of the term after success otherwise <see cref="F:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.FAILED"/>.</returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.AppendUnfragmentedMessage(System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <summary>
            Append an unfragmented message to the term buffer.
            </summary>
            <param name="termId">      for the current term.</param>
            <param name="termOffset">  in the term at which to append.</param>
            <param name="header">    for writing the default header. </param>
            <param name="srcBuffer"> containing the message. </param>
            <param name="srcOffset"> at which the message begins. </param>
            <param name="length">    of the message in the source buffer. </param>
            <param name="reservedValueSupplier"><see cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame</param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.FAILED"/>.</returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.AppendUnfragmentedMessage(System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <summary>
            Append an unfragmented message to the term buffer.
            </summary>
            <param name="termId">                for the current term. </param>
            <param name="termOffset">            in the term at which to append. </param>
            <param name="header">                for writing the default header. </param>
            <param name="bufferOne">             containing the first part of the message. </param>
            <param name="offsetOne">             at which the first part of the message begins. </param>
            <param name="lengthOne">             of the first part of the message. </param>
            <param name="bufferTwo">             containing the second part of the message. </param>
            <param name="offsetTwo">             at which the second part of the message begins. </param>
            <param name="lengthTwo">             of the second part of the message. </param>
            <param name="reservedValueSupplier"> <seealso cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame. </param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.FAILED"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.AppendUnfragmentedMessage(System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Aeron.DirectBufferVector[],System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <summary>
            Append an unfragmented message to the term buffer.
            </summary>
            <param name="termId">      for the current term.</param>
            <param name="termOffset">  in the term at which to append.</param>
            <param name="header">    for writing the default header. </param>
            <param name="vectors">   to the buffers. </param>
            <param name="length">    of the message in the source buffer. </param>
            <param name="reservedValueSupplier"><see cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame</param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.FAILED"/>.</returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.AppendFragmentedMessage(System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <summary>
            Append a fragmented message to the term buffer.
            The message will be split up into fragments of MTU length minus header.
            </summary>
            <param name="termId">      for the current term.</param>
            <param name="termOffset">  in the term at which to append.</param>
            <param name="header">           for writing the default header. </param>
            <param name="srcBuffer">        containing the message. </param>
            <param name="srcOffset">        at which the message begins. </param>
            <param name="length">           of the message in the source buffer. </param>
            <param name="maxPayloadLength"> that the message will be fragmented into. </param>
            /// <param name="reservedValueSupplier"><see cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame</param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.FAILED"/>.</returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.AppendFragmentedMessage(System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <summary>
            Append a fragmented message to the term buffer.
            The message will be split up into fragments of MTU length minus header.
            </summary>
            <param name="termId">                for the current term. </param>
            <param name="termOffset">            in the term at which to append. </param>
            <param name="header">                for writing the default header. </param>
            <param name="bufferOne">             containing the first part of the message. </param>
            <param name="offsetOne">             at which the first part of the message begins. </param>
            <param name="lengthOne">             of the first part of the message. </param>
            <param name="bufferTwo">             containing the second part of the message. </param>
            <param name="offsetTwo">             at which the second part of the message begins. </param>
            <param name="lengthTwo">             of the second part of the message. </param>
            <param name="maxPayloadLength">      that the message will be fragmented into. </param>
            <param name="reservedValueSupplier"> <seealso cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame. </param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.FAILED"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.AppendFragmentedMessage(System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Aeron.DirectBufferVector[],System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <summary>
            Append a fragmented message to the term buffer.
            The message will be split up into fragments of MTU length minus header.
            </summary>
            <param name="termId">      for the current term.</param>
            <param name="termOffset">  in the term at which to append.</param>
            <param name="header">           for writing the default header. </param>
            <param name="vectors">        to the buffers. </param>
            <param name="length">           of the message in the source buffer. </param>
            <param name="maxPayloadLength"> that the message will be fragmented into. </param>
            /// <param name="reservedValueSupplier"><see cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame</param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.FAILED"/>.</returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.AppendBlock(System.Int32,System.Int32,Adaptive.Agrona.IMutableDirectBuffer,System.Int32,System.Int32)">
            <summary>
            Append pre-formatted block of message fragments into the term buffer.
            <para>
            <em>WARNING: This is internal API used by {@code ExclusivePublication#offerBlock} method.</em>
            </para>
            </summary>
            <param name="termId">     for the current term. </param>
            <param name="termOffset"> in the term at which to append. </param>
            <param name="buffer">     which contains block of messages. </param>
            <param name="offset">     within the buffer at which the block begins. </param>
            <param name="length">     of the block in bytes (always aligned). </param>
            <returns> the resulting offset of the term after success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.ExclusiveTermAppender.FAILED"/>. </returns>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.FragmentHandler">
             <summary>
             Handler for reading data that is coming from a log buffer. The frame will either contain a whole message
             or a fragment of a message to be reassembled. Messages are fragmented if greater than the frame for MTU in length.
            
             Within this callback reentrant calls to the <see cref="T:Adaptive.Aeron.Aeron"/> client are not permitted and
             will result in undefined behaviour.
             </summary>
             <param name="buffer"> containing the data. </param>
             <param name="offset"> at which the data begins. </param>
             <param name="length"> of the data in bytes. </param>
             <param name="header"> representing the metadata for the data. </param>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.FrameDescriptor">
            <summary>
            Description of the structure for message framing in a log buffer.
            
            All messages are logged in frames that have a minimum header layout as follows plus a reserve then
            the encoded message follows:
            
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |R|                       Frame Length                          |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------------------------------+
             |  Version      |B|E| Flags     |             Type              |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-------------------------------+
             |R|                       Term Offset                           |
             +-+-------------------------------------------------------------+
             |                      Additional Fields                       ...
            ...                                                              |
             +---------------------------------------------------------------+
             |                        Encoded Message                       ...
            ...                                                              |
             +---------------------------------------------------------------+
            
            The (B)egin and (E)nd flags are used for message fragmentation. R is for reserved bit.
            Both (B)egin and (E)nd flags are set for a message that does not span frames.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.MAX_MESSAGE_LENGTH">
            <summary>
            Set a pragmatic maximum message length regardless of term length to encourage better design.
            Messages larger than half the cache size should be broken up into chunks and streamed.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.FRAME_ALIGNMENT">
            <summary>
            Alignment as a multiple of bytes for each frame. The length field will store the unaligned length in bytes.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.BEGIN_FRAG_FLAG">
            <summary>
            Beginning fragment of a frame.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.END_FRAG_FLAG">
            <summary>
            End fragment of a frame.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.UNFRAGMENTED">
            <summary>
            End fragment of a frame.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.VERSION_OFFSET">
            <summary>
            Offset within a frame at which the version field begins
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.FLAGS_OFFSET">
            <summary>
            Offset within a frame at which the flags field begins
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.TYPE_OFFSET">
            <summary>
            Offset within a frame at which the type field begins
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.TERM_OFFSET">
            <summary>
            Offset within a frame at which the term offset field begins
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.TERM_ID_OFFSET">
            <summary>
            Offset within a frame at which the term id field begins
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.SESSION_ID_OFFSET">
            <summary>
            Offset within a frame at which the session id field begins
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.PADDING_FRAME_TYPE">
            <summary>
            Padding frame type to indicate the message should be ignored.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.ComputeMaxMessageLength(System.Int32)">
            <summary>
            Compute the maximum supported message length for a buffer of given termLength.
            </summary>
            <param name="termLength"> of the log buffer. </param>
            <returns> the maximum supported length for a message. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.LengthOffset(System.Int32)">
            <summary>
            The buffer offset at which the length field begins.
            </summary>
            <param name="termOffset"> at which the frame begins. </param>
            <returns> the offset at which the length field begins. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.VersionOffset(System.Int32)">
            <summary>
            The buffer offset at which the version field begins.
            </summary>
            <param name="termOffset"> at which the frame begins. </param>
            <returns> the offset at which the version field begins. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FlagsOffset(System.Int32)">
            <summary>
            The buffer offset at which the flags field begins.
            </summary>
            <param name="termOffset"> at which the frame begins. </param>
            <returns> the offset at which the flags field begins. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.TypeOffset(System.Int32)">
            <summary>
            The buffer offset at which the type field begins.
            </summary>
            <param name="termOffset"> at which the frame begins. </param>
            <returns> the offset at which the type field begins. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.TermOffsetOffset(System.Int32)">
            <summary>
            The buffer offset at which the term offset field begins.
            </summary>
            <param name="termOffset"> at which the frame begins. </param>
            <returns> the offset at which the term offset field begins. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.TermIdOffset(System.Int32)">
            <summary>
            The buffer offset at which the term id field begins.
            </summary>
            <param name="termOffset"> at which the frame begins. </param>
            <returns> the offset at which the term id field begins. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.SessionIdOffset(System.Int32)">
            <summary>
            The buffer offset at which the session id field begins.
            </summary>
            <param name="termOffset"> at which the frame begins. </param>
            <returns> the offset at which the session id field begins. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameVersion(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32)">
            <summary>
            Read the type of the frame from header.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <returns> the value of the frame type header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameFlags(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32)">
            <summary>
            Get the flags field for a frame.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <returns> the value of the frame type header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameType(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32)">
            <summary>
            Read the type of the frame from header.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <returns> the value of the frame type header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.IsPaddingFrame(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32)">
            <summary>
            Is the frame starting at the termOffset a padding frame at the end of a buffer?
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <returns> true if the frame is a padding frame otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameLength(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32)">
            <summary>
            Get the length of a frame from the header.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <returns> the value for the frame length. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameTermId(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Get the term id of a frame from the header.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <returns> the value for the term id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameSessionId(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Get the session id of a frame from the header.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <returns> the value for the session id field. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameLengthVolatile(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32)">
            <summary>
            Get the length of a frame from the header as a volatile read.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <returns> the value for the frame length. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameLengthOrdered(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32,System.Int32)">
            <summary>
            Write the length header for a frame in a memory ordered fashion.
            </summary>
            <param name="buffer">      containing the frame. </param>
            <param name="termOffset">  at which a frame begins. </param>
            <param name="frameLength"> field to be set for the frame. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameType(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32,System.Int32)">
            <summary>
            Write the type field for a frame.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <param name="type">       type value for the frame. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameFlags(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32,System.Byte)">
            <summary>
            Write the flags field for a frame.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <param name="flags">      value for the frame. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameTermOffset(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Write the term offset field for a frame.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameTermId(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,System.Int32)">
            <summary>
            Write the term id field for a frame.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <param name="termId">     value for the frame. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.FrameDescriptor.FrameSessionId(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,System.Int32)">
            <summary>
            Write the session id field for a frame.
            </summary>
            <param name="buffer">     containing the frame. </param>
            <param name="termOffset"> at which a frame begins. </param>
            <param name="sessionId">     value for the frame. </param>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.Header">
            <summary>
            Represents the header of the data frame for accessing metadata fields.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.Header.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a header that references a buffer for the log.
            </summary>
            <param name="initialTermId">       this stream started at. </param>
            <param name="positionBitsToShift"> for calculating positions. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.Header.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            Construct a header that references a buffer for the log.
            </summary>
            <param name="initialTermId">       this stream started at. </param>
            <param name="positionBitsToShift"> for calculating positions. </param>
            <param name="context"> for storing state when which can be accessed with <see cref="P:Adaptive.Aeron.LogBuffer.Header.Context"/>.</param>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.Context">
            <summary>
            Context for storing state related to the context of the callback where the header is used.
            </summary>
            <returns>  context for storing state related to the context of the callback where the header is used.</returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.Position">
            <summary>
            Get the current position to which the image has advanced on reading this message.
            </summary>
            <value> the current position to which the image has advanced on reading this message. </value>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.PositionBitsToShift">
            <summary>
            The number of times to left shift the term count to multiply by term length.
            </summary>
            <returns> number of times to left shift the term count to multiply by term length. </returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.InitialTermId">
            <summary>
            Get the initial term id this stream started at.
            </summary>
            <value> the initial term id this stream started at. </value>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.Offset">
            <summary>
            The offset at which the frame begins.
            </summary>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.Buffer">
            <summary>
            The <seealso cref="T:Adaptive.Agrona.IDirectBuffer"/> containing the header.
            </summary>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.FrameLength">
            <summary>
            The total length of the frame including the header.
            </summary>
            <returns> the total length of the frame including the header. </returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.SessionId">
            <summary>
            The session ID to which the frame belongs.
            </summary>
            <returns> the session ID to which the frame belongs. </returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.StreamId">
            <summary>
            The stream ID to which the frame belongs.
            </summary>
            <returns> the stream ID to which the frame belongs. </returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.TermId">
            <summary>
            The term ID to which the frame belongs.
            </summary>
            <returns> the term ID to which the frame belongs. </returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.TermOffset">
            <summary>
            The offset in the term at which the frame begins. This will be the same as <seealso cref="P:Adaptive.Aeron.LogBuffer.Header.Offset"/>
            </summary>
            <returns> the offset in the term at which the frame begins. </returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.Type">
            <summary>
            The type of the frame which should always be <seealso cref="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_DATA"/>
            </summary>
            <returns> type of the frame which should always be <seealso cref="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_DATA"/> </returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.Flags">
            <summary>
            The flags for this frame. Valid flags are <seealso cref="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.BEGIN_FLAG"/>
            and <seealso cref="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.END_FLAG"/>. A convenience flag <seealso cref="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.BEGIN_AND_END_FLAGS"/>
            can be used for both flags.
            </summary>
            <returns> the flags for this frame. </returns>
        </member>
        <member name="P:Adaptive.Aeron.LogBuffer.Header.ReservedValue">
            <summary>
            Get the value stored in the reserve space at the end of a data frame header.
            <para>
            Note: The value is in <seealso cref="F:Adaptive.Agrona.ByteOrder.LittleEndian"/> format.
            
            </para>
            </summary>
            <returns> the value stored in the reserve space at the end of a data frame header. </returns>
            <seealso cref="T:Adaptive.Aeron.Protocol.DataHeaderFlyweight" />
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.HeaderWriter">
            <summary>
            Utility for applying a header to a message in a term buffer.
            
            This class is designed to be thread safe to be used across multiple producers and makes the header
            visible in the correct order for consumers.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.HeaderWriter.Write(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Write a header to the term buffer in <seealso cref="F:Adaptive.Agrona.ByteOrder.LittleEndian"/> format using the minimum instructions.
            </summary>
            <param name="termBuffer"> to be written to. </param>
            <param name="offset">     at which the header should be written. </param>
            <param name="length">     of the fragment including the header. </param>
            <param name="termId">     of the current term buffer. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.IBlockHandler.OnBlock(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Callback for handling a block of message fragments scanned from the log.
            </summary>
            <param name="buffer">    containing the block of message fragments. </param>
            <param name="offset">    at which the block begins, including any frame headers. </param>
            <param name="length">    of the block in bytes, including any frame headers that is aligned up to
                             <seealso cref="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.FRAME_ALIGNMENT"/>. </param>
            <param name="sessionId"> of the stream containing this block of message fragments. </param>
            <param name="termId">    of the stream containing this block of message fragments. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.IControlledFragmentHandler.OnFragment(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.Header)">
             <summary>
             Handler for reading data that is coming from a log buffer. The frame will either contain a whole message
             or a fragment of a message to be reassembled. Messages are fragmented if greater than the frame for MTU in length.
            
             Within this callback reentrant calls to the <see cref="T:Adaptive.Aeron.Aeron"/> client are not permitted and
             will result in undefined behaviour.
             
             </summary>
             <param name="buffer"> containing the data. </param>
             <param name="offset"> at which the data begins. </param>
             <param name="length"> of the data in bytes. </param>
             <param name="header"> representing the meta data for the data. </param>
             <returns> The action to be taken with regard to the stream position after the callback. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.IFragmentHandler.OnFragment(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.LogBuffer.Header)">
             <summary>
             Handler for reading data that is coming from a log buffer. The frame will either contain a whole message
             or a fragment of a message to be reassembled. Messages are fragmented if greater than the frame for MTU in length.
            
             Within this callback reentrant calls to the <see cref="T:Adaptive.Aeron.Aeron"/> client are not permitted and
             will result in undefined behaviour.
             </summary>
             <param name="buffer"> containing the data. </param>
             <param name="offset"> at which the data begins. </param>
             <param name="length"> of the data in bytes. </param>
             <param name="header"> representing the meta data for the data. </param>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.LogBufferDescriptor">
            <summary>
                Layout description for log buffers which contains partitions of terms with associated term metadata,
                plus ending with overall log metadata.
                <pre>
                    +----------------------------+
                    |           Term 0           |
                    +----------------------------+
                    |           Term 1           |
                    +----------------------------+
                    |           Term 2           |
                    +----------------------------+
                    |        Log metadata       |
                    +----------------------------+
                </pre>
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.PARTITION_COUNT">
            <summary>
                The number of partitions the log is divided into terms and a metadata buffer.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.TERM_MIN_LENGTH">
            <summary>
                Minimum buffer length for a log term.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.TERM_MAX_LENGTH">
            <summary>
                Maximum buffer length for a log term.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.PAGE_MIN_SIZE">
            <summary>
                Minimum page size.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.PAGE_MAX_SIZE">
            <summary>
                Maximum page size.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_META_DATA_SECTION_INDEX">
            <summary>
                Section index for which buffer contains the log metadata.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.TERM_TAIL_COUNTERS_OFFSET">
            <summary>
                Offset within the metadata where the tail values are stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_ACTIVE_TERM_COUNT_OFFSET">
            <summary>
                Offset within the log metadata where the active partition index is stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_END_OF_STREAM_POSITION_OFFSET">
            <summary>
                Offset within the log metadata where the position of the End of Stream is stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_IS_CONNECTED_OFFSET">
            <summary>
                Offset within the log metadata where whether the log is connected or not is stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_ACTIVE_TRANSPORT_COUNT">
            <summary>
                Offset within the log metadata where the count of active transports is stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_INITIAL_TERM_ID_OFFSET">
            <summary>
                Offset within the log metadata where the active term id is stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_DEFAULT_FRAME_HEADER_LENGTH_OFFSET">
            <summary>
                Offset within the log metadata which the length field for the frame header is stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_MTU_LENGTH_OFFSET">
            <summary>
                Offset within the log metadata which the MTU length is stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_CORRELATION_ID_OFFSET">
            <summary>
                Offset within the log metadata which the correlation id is stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_TERM_LENGTH_OFFSET">
            <summary>
                Offset within the log metadata which the term length is stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_PAGE_SIZE_OFFSET">
            <summary>
                Offset within the log metadata which the page size is stored.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_DEFAULT_FRAME_HEADER_OFFSET">
            <summary>
                Offset at which the default frame headers begin.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_DEFAULT_FRAME_HEADER_MAX_LENGTH">
            <summary>
                Maximum length of a frame header
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_META_DATA_LENGTH">
            <summary>
                Total length of the log metadata buffer in bytes.
                <pre>
                    0                   1                   2                   3
                    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
                    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                    |                       Tail Counter 0                          |
                    |                                                               |
                    +---------------------------------------------------------------+
                    |                       Tail Counter 1                          |
                    |                                                               |
                    +---------------------------------------------------------------+
                    |                       Tail Counter 2                          |
                    |                                                               |
                    +---------------------------------------------------------------+
                    |                      Active Term Count                        |
                    +---------------------------------------------------------------+
                    |                     Cache Line Padding                       ...
                    ...                                                              |
                    +---------------------------------------------------------------+
                    |                    End of Stream Position                     |
                    |                                                               |
                    +---------------------------------------------------------------+
                    |                        Is Connected                           |
                    +---------------------------------------------------------------+
                    |                   Active Transport Count                      |
                    +---------------------------------------------------------------+
                    |                      Cache Line Padding                      ...
                    ...                                                              |
                    +---------------------------------------------------------------+
                    |                 Registration / Correlation ID                 |
                    |                                                               |
                    +---------------------------------------------------------------+
                    |                        Initial Term Id                        |
                    +---------------------------------------------------------------+
                    |                  Default Frame Header Length                  |
                    +---------------------------------------------------------------+
                    |                          MTU Length                           |
                    +---------------------------------------------------------------+
                    |                         Term Length                           |
                    +---------------------------------------------------------------+
                    |                          Page Size                            |
                    +---------------------------------------------------------------+
                    |                      Cache Line Padding                      ...
                    ...                                                              |
                    +---------------------------------------------------------------+
                    |                     Default Frame Header                     ...
                    ...                                                              |
                    +---------------------------------------------------------------+
                </pre>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.CheckTermLength(System.Int32)">
            <summary>
                Check that term length is valid and alignment is valid.
            </summary>
            <param name="termLength"> to be checked. </param>
            <exception cref="T:System.InvalidOperationException"> if the length is not as expected. </exception>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.CheckPageSize(System.Int32)">
            <summary>
                Check that page size is valid and alignment is valid.
            </summary>
            <param name="pageSize"> to be checked. </param>
            <exception cref="T:System.InvalidOperationException"> if the size is not as expected. </exception>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.InitialTermId(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get the value of the initial Term id used for this log.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <returns> the value of the initial Term id used for this log. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.InitialTermId(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
                Set the initial term at which this log begins. Initial should be randomised so that stream does not get
                reused accidentally.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <param name="initialTermId">     value to be set. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.MtuLength(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get the value of the MTU length used for this log.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <returns> the value of the MTU length used for this log. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.MtuLength(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
                Set the MTU length used for this log.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <param name="mtuLength">         value to be set. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.TermLength(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get the value of the Term Length used for this log.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <returns> the value of the term length used for this log. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.TermLength(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
                Set the term length used for this log.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <param name="termLength">        value to be set. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.PageSize(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get the value of the page size used for this log.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <returns> the value of the page size used for this log. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.PageSize(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
                Set the page size used for this log.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <param name="pageSize">          value to be set. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.CorrelationId(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get the value of the correlation ID for this log relating to the command which created it.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <returns> the value of the correlation ID used for this log. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.CorrelationId(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int64)">
            <summary>
                Set the correlation ID used for this log relating to the command which created it.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <param name="id">                value to be set. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.IsConnected(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get whether the log is considered connected or not by the driver.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <returns> whether the log is considered connected or not by the driver. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.IsConnected(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Boolean)">
            <summary>
                Set whether the log is considered connected or not by the driver.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <param name="isConnected">       or not. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.ActiveTransportCount(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get the count of active transports for the Image.
            </summary>
            <param name="metadataBuffer"> containing the meta data. </param>
            <returns> count of active transports. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.ActiveTransportCount(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
                Set the number of active transports for the Image.
            </summary>
            <param name="metadataBuffer"> containing the meta data. </param>
            <param name="numberOfActiveTransports"> value to be set. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.EndOfStreamPosition(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get the value of the end of stream position.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <returns> the value of end of stream position </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.EndOfStreamPosition(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int64)">
            <summary>
                Set the value of the end of stream position.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <param name="position">          value of the end of stream position. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.ActiveTermCount(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get the value of the active term count used by the producer of this log. Consumers may have a different
                active term count if they are running behind. The read is done with volatile semantics.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <returns> the value of the active term count used by the producer of this log. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.ActiveTermCountOrdered(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
                Set the value of the current active term count for the producer using memory ordered semantics.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <param name="termCount">         value of the active term count used by the producer of this log. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.CasActiveTermCount(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,System.Int32)">
            <summary>
                Compare and set the value of the current active term count.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <param name="expectedTermCount"> value of the active term count expected in the log. </param>
            <param name="updateTermCount">   value of the active term count to be updated in the log. </param>
            <returns> true if successful otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.ActiveTermCount(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
                Set the value of the current active partition index for the producer.
            </summary>
            <param name="metaDataBuffer"> containing the metadata. </param>
            <param name="termCount">         value of the active term count used by the producer of this log. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.NextPartitionIndex(System.Int32)">
            <summary>
                Rotate to the next partition in sequence for the term id.
            </summary>
            <param name="currentIndex"> partition index. </param>
            <returns> the next partition index. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.IndexByTerm(System.Int32,System.Int32)">
            <summary>
                Determine the partition index to be used given the initial term and active term ids.
            </summary>
            <param name="initialTermId"> at which the log buffer usage began. </param>
            <param name="activeTermId">  that is in current usage. </param>
            <returns> the index of which buffer should be used. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.IndexByTermCount(System.Int64)">
            <summary>
                Determine the partition index based on number of terms that have passed.
            </summary>
            <param name="termCount"> for the number of terms that have passed. </param>
            <returns> the partition index for the term count. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.IndexByPosition(System.Int64,System.Int32)">
            <summary>
                Determine the partition index given a stream position.
            </summary>
            <param name="position"> in the stream in bytes. </param>
            <param name="positionBitsToShift"> number of times to left shift to multiply by term length. </param>
            <returns> the partition index for the position. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.ComputePosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Compute the current position in absolute number of bytes.
            </summary>
            <param name="activeTermId">        active term id. </param>
            <param name="termOffset">          in the term. </param>
            <param name="positionBitsToShift"> number of times to left shift the term count to multiply by term length. </param>
            <param name="initialTermId">       the initial term id that this stream started on. </param>
            <returns> the absolute position in bytes. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.ComputeTermBeginPosition(System.Int32,System.Int32,System.Int32)">
            <summary>
                Compute the current position in absolute number of bytes for the beginning of a term.
            </summary>
            <param name="activeTermId">        active term id. </param>
            <param name="positionBitsToShift"> number of times to left shift the term count to multiply by term length.  </param>
            <param name="initialTermId">       the initial term id that this stream started on. </param>
            <returns> the absolute position in bytes. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.ComputeTermIdFromPosition(System.Int64,System.Int32,System.Int32)">
            <summary>
                Compute the term id from a position.
            </summary>
            <param name="position">            to calculate from </param>
            <param name="positionBitsToShift"> number of times to left shift the position to multiply by term length. </param>
            <param name="initialTermId">       the initial term id that this stream started on. </param>
            <returns> the term id according to the position. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.ComputeLogLength(System.Int32,System.Int32)">
            <summary>
                Compute the total length of a log file given the term length.
                Assumes <see cref="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.TERM_MAX_LENGTH" /> is 1 GB and that filePageSize is 1 GB or less and a power of 2.
            </summary>
            <param name="termLength"> on which to base the calculation. </param>
            <param name="filePageSize"> to use for log. </param>
            <returns> the total length of the log file. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.StoreDefaultFrameHeader(Adaptive.Agrona.Concurrent.UnsafeBuffer,Adaptive.Agrona.IDirectBuffer)">
            <summary>
                Store the default frame header to the log metadata buffer.
            </summary>
            <param name="metaDataBuffer"> into which the default headers should be stored. </param>
            <param name="defaultHeader">     to be stored. </param>
            <exception cref="T:System.ArgumentException">
                if the defaultHeader is larger than
                <seealso cref="F:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.LOG_DEFAULT_FRAME_HEADER_MAX_LENGTH" />.
            </exception>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.DefaultFrameHeader(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get a wrapper around the default frame header from the log metadata.
            </summary>
            <param name="metaDataBuffer"> containing the raw bytes for the default frame header. </param>
            <returns> a buffer wrapping the raw bytes. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.ApplyDefaultHeader(Adaptive.Agrona.Concurrent.UnsafeBuffer,Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
                Apply the default header for a message in a term.
            </summary>
            <param name="metaDataBuffer"> containing the default headers. </param>
            <param name="termBuffer">        to which the default header should be applied. </param>
            <param name="termOffset">        at which the default should be applied. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.RotateLog(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,System.Int32)">
            <summary>
                Rotate the log and update the tail counter for the new term.
                This method is safe for concurrent use.
            </summary>
            <param name="metaDataBuffer"> for the metadata. </param>
            <param name="currentTermCount">  from which to rotate. </param>
            <param name="currentTermId">     to be used in the default headers. </param>
            <returns> true if log was rotated. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.InitialiseTailWithTermId(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,System.Int32)">
            <summary>
                Set the initial value for the termId in the upper bits of the tail counter.
            </summary>
            <param name="logMetaData"> contain the tail counter. </param>
            <param name="partitionIndex"> to be intialized. </param>
            <param name="termId"> to be set.</param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.TermId(System.Int64)">
            <summary>
                Get the termId from a packed raw tail value.
            </summary>
            <param name="rawTail"> containing the termId. </param>
            <returns> the termId from a packed raw tail value. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.TermOffset(System.Int64,System.Int64)">
            <summary>
                Read the termOffset from a packed raw tail value.
            </summary>
            <param name="rawTail">    containing the termOffset. </param>
            <param name="termLength"> that the offset cannot exceed. </param>
            <returns> the termOffset value.</returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.TermOffset(System.Int64)">
            <summary>
                The termOffset as a result of the append operation.
            </summary>
            <param name="result"> into which the termOffset value has been packed.</param>
            <returns> the termOffset after the append operation. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.PackTail(System.Int32,System.Int32)">
            <summary>
                Pack a termId and termOffset into a raw tail value.
            </summary>
            <param name="termId">     to be packed. </param>
            <param name="termOffset"> to be packed. </param>
            <returns> the packed value. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.RawTail(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,System.Int64)">
            <summary>
                Set the raw value of the tail for the given partition.
            </summary>
            <param name="metaDataBuffer"> containing the tail counters. </param>
            <param name="partitionIndex">    for the tail counter. </param>
            <param name="rawTail">           to be stored. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.RawTail(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
                Get the raw value of the tail for the given partition.
            </summary>
            <param name="metaDataBuffer"> containing the tail counters. </param>
            <param name="partitionIndex">    for the tail counter. </param>
            <returns> the raw value of the tail for the current active partition. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.RawTailVolatile(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,System.Int64)">
            <summary>
                Set the raw value of the tail for the given partition.
            </summary>
            <param name="metaDataBuffer"> containing the tail counters. </param>
            <param name="partitionIndex">    for the tail counter. </param>
            <param name="rawTail">           to be stored. </param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.RawTailVolatile(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
                Get the raw value of the tail for the given partition.
            </summary>
            <param name="metaDataBuffer">containing the tail counters.</param>
            <param name="partitionIndex">for the tail counter.</param>
            <returns>the raw value of the tail for the current active partition.</returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.RawTailVolatile(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
                Get the raw value of the tail for the current active partition.
            </summary>
            <param name="metaDataBuffer">metaDataBuffer containing the tail counters.</param>
            <returns>the raw value of the tail for the current active partition.</returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.CasRawTail(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,System.Int64,System.Int64)">
            <summary>
                Compare and set the raw value of the tail for the given partition.
            </summary>
            <param name="metaDataBuffer"> containing the tail counters. </param>
            <param name="partitionIndex">    for the tail counter. </param>
            <param name="expectedRawTail">   expected current value. </param>
            <param name="updateRawTail">     to be applied. </param>
            <returns> true if the update was successful otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.LogBufferDescriptor.PositionBitsToShift(System.Int32)">
            <summary>
                Get the number of bits to shift when dividing or multiplying by the term buffer length.
            </summary>
            <param name="termBufferLength"> to compute the number of bits to shift for. </param>
            <returns> the number of bits to shift to divide or multiply by the term buffer length. </returns>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.TermAppender">
            <summary>
            Term buffer appender which supports many producers concurrently writing an append-only log.
            
            <b>Note:</b> This class is threadsafe.
            
            Messages are appended to a term using a framing protocol as described in <seealso cref="T:Adaptive.Aeron.LogBuffer.FrameDescriptor"/>.
            
            A default message header is applied to each message with the fields filled in for fragment flags, type, term number,
            as appropriate.
            
            A message of type <seealso cref="F:Adaptive.Aeron.LogBuffer.FrameDescriptor.PADDING_FRAME_TYPE"/> is appended at the end of the buffer if claimed
            space is not sufficiently large to accommodate the message about to be written.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.LogBuffer.TermAppender.FAILED">
            <summary>
            The append operation failed because it was past the end of the buffer.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermAppender.#ctor(Adaptive.Agrona.Concurrent.UnsafeBuffer,Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Construct a view over a term buffer and state buffer for appending frames.
            </summary>
            <param name="termBuffer">     for where messages are stored. </param>
            <param name="metaDataBuffer"> for where the state of writers is stored manage concurrency. </param>
            <param name="partitionIndex"> for this will be the active appender.</param>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermAppender.RawTailVolatile">
            <summary>
            Get the raw current tail value in a volatile memory ordering fashion.
            </summary>
            <returns> the current tail value. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermAppender.Claim(Adaptive.Aeron.LogBuffer.HeaderWriter,System.Int32,Adaptive.Aeron.LogBuffer.BufferClaim,System.Int32)">
            <summary>
            Claim length of the term buffer for writing in the message with zero copy semantics.
            </summary>
            <param name="header">      for writing the default header. </param>
            <param name="length">      of the message to be written. </param>
            <param name="bufferClaim"> to be updated with the claimed region. </param>
            <param name="activeTermId"> used for flow control. </param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.TermAppender.FAILED"/>.</returns> 
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermAppender.AppendUnfragmentedMessage(Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier,System.Int32)">
            <summary>
            Append an unfragmented message to the term buffer.
            </summary>
            <param name="header">                for writing the default header. </param>
            <param name="bufferOne">             containing the first part of the message. </param>
            <param name="offsetOne">             at which the first part of the message begins. </param>
            <param name="lengthOne">             of the first part of the message. </param>
            <param name="bufferTwo">             containing the second part of the message. </param>
            <param name="offsetTwo">             at which the second part of the message begins. </param>
            <param name="lengthTwo">             of the second part of the message. </param>
            <param name="reservedValueSupplier"> <seealso cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame. </param>
            <param name="activeTermId">          used for flow control. </param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.TermAppender.FAILED"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermAppender.AppendUnfragmentedMessage(Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier,System.Int32)">
            <summary>
            Append an unfragmented message to the term buffer.
            </summary>
            <param name="header">    for writing the default header. </param>
            <param name="buffer"> containing the message. </param>
            <param name="offset"> at which the message begins. </param>
            <param name="length">    of the message in the source buffer. </param>
            <param name="reservedValueSupplier"><see cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame</param>
            <param name="activeTermId"> used for flow control. </param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.TermAppender.FAILED"/>. </returns> 
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermAppender.AppendUnfragmentedMessage(Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Aeron.DirectBufferVector[],System.Int32,Adaptive.Aeron.ReservedValueSupplier,System.Int32)">
            <summary>
            Append an unfragmented message to the term buffer.
            </summary>
            <param name="header">    for writing the default header. </param>
            <param name="vectors">   to the buffers. </param>
            <param name="length">    of the message in the source buffer. </param>
            <param name="reservedValueSupplier"><see cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame</param>
            <param name="activeTermId"> used for flow control. </param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.TermAppender.FAILED"/>. </returns> 
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermAppender.AppendFragmentedMessage(Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier,System.Int32)">
            <summary>
            Append a fragmented message to the term buffer.
            The message will be split up into fragments of MTU length minus header.
            </summary>
            <param name="header">           for writing the default header. </param>
            <param name="buffer">        containing the message. </param>
            <param name="offset">        at which the message begins. </param>
            <param name="length">           of the message in the source buffer. </param>
            <param name="maxPayloadLength"> that the message will be fragmented into. </param>
            <param name="reservedValueSupplier"><see cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame</param>
            <param name="activeTermId"> used for flow control. </param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.TermAppender.FAILED"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermAppender.AppendFragmentedMessage(Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier,System.Int32)">
            <summary>
            Append a fragmented message to the term buffer.
            The message will be split up into fragments of MTU length minus header.
            </summary>
            <param name="header">                for writing the default header. </param>
            <param name="bufferOne">             containing the first part of the message. </param>
            <param name="offsetOne">             at which the first part of the message begins. </param>
            <param name="lengthOne">             of the first part of the message. </param>
            <param name="bufferTwo">             containing the second part of the message. </param>
            <param name="offsetTwo">             at which the second part of the message begins. </param>
            <param name="lengthTwo">             of the second part of the message. </param>
            <param name="maxPayloadLength">      that the message will be fragmented into. </param>
            <param name="reservedValueSupplier"> <seealso cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame. </param>
            <param name="activeTermId">          used for flow control. </param>
            <returns> the resulting offset of the term after the append operation on success otherwise  <seealso cref="F:Adaptive.Aeron.LogBuffer.TermAppender.FAILED"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermAppender.AppendFragmentedMessage(Adaptive.Aeron.LogBuffer.HeaderWriter,Adaptive.Aeron.DirectBufferVector[],System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier,System.Int32)">
            <summary>
            Append a fragmented message to the term buffer.
            The message will be split up into fragments of MTU length minus header.
            </summary>
            <param name="header">           for writing the default header. </param>
            <param name="vectors">          to the buffers. </param>
            <param name="length">           of the message as a sum of the vectors. </param>
            <param name="maxPayloadLength"> that the message will be fragmented into. </param>
            <param name="reservedValueSupplier"><see cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame</param>
            <param name="activeTermId"> used for flow control. </param>
            <returns> the resulting offset of the term after the append operation on success otherwise <seealso cref="F:Adaptive.Aeron.LogBuffer.TermAppender.FAILED"/>. </returns>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.TermBlockScanner">
            <summary>
            Scan a term buffer for a block of message fragments including padding. The block must include complete fragments.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermBlockScanner.Scan(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32,System.Int32)">
             <summary>
             Scan a term buffer for a block of message fragments from and offset up to a limitOffset.
            
             A scan will terminate if a padding frame is encountered. If first frame in a scan is padding then a block
             for the padding is notified. If the padding comes after the first frame in a scan then the scan terminates
             at the offset the padding frame begins. Padding frames are delivered singularly in a block.
            
             Padding frames may be for a greater range than the limit offset but only the header needs to be valid so
             relevant length of the frame is <see cref="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.HEADER_LENGTH"/>
             </summary>
             <param name="termBuffer"> to scan for message fragments. </param>
             <param name="termOffset">     at which the scan should begin. </param>
             <param name="limitOffset">      at which the scan should stop. </param>
             <returns> the offset at which the scan terminated. </returns>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.TermReader">
            <summary>
            Utility functions for reading a term within a log buffer.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermReader.Read(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,Adaptive.Aeron.LogBuffer.IFragmentHandler,System.Int32,Adaptive.Aeron.LogBuffer.Header,Adaptive.Agrona.ErrorHandler,System.Int64,Adaptive.Agrona.Concurrent.Status.IPosition)">
            <summary>
            Reads data from a term in a log buffer and updates a passed <seealso cref="T:Adaptive.Agrona.Concurrent.Status.IPosition"/> so progress is not lost in the
            event of an exception.
            </summary>
            <param name="termBuffer">         to be read for fragments. </param>
            <param name="termOffset">         within the buffer that the read should begin. </param>
            <param name="handler">            the handler for data that has been read </param>
            <param name="fragmentsLimit">     limit the number of fragments read. </param>
            <param name="header">             to be used for mapping over the header for a given fragment. </param>
            <param name="errorHandler">       to be notified if an error occurs during the callback. </param>
            <param name="currentPosition">    prior to reading further fragments </param>
            <param name="subscriberPosition"> to be updated after reading with new position </param>
            <returns> the number of fragments read </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermReader.Read(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32,Adaptive.Aeron.LogBuffer.IFragmentHandler,System.Int32,Adaptive.Aeron.LogBuffer.Header,Adaptive.Agrona.ErrorHandler)">
            <summary>
            Reads data from a term in a log buffer.
            
            </summary>
            <param name="termBuffer">     to be read for fragments. </param>
            <param name="termOffset">     offset within the buffer that the read should begin. </param>
            <param name="handler">        the handler for data that has been read </param>
            <param name="fragmentsLimit"> limit the number of fragments read. </param>
            <param name="header">         to be used for mapping over the header for a given fragment. </param>
            <param name="errorHandler">   to be notified if an error occurs during the callback. </param>
            <returns> the number of fragments read </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermReader.Pack(System.Int32,System.Int32)">
            <summary>
            Pack the values for fragmentsRead and offset into a long for returning on the stack.
            </summary>
            <param name="offset">        value to be packed. </param>
            <param name="fragmentsRead"> value to be packed. </param>
            <returns> a long with both ints packed into it. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermReader.FragmentsRead(System.Int64)">
            <summary>
            The number of fragments that have been read.
            </summary>
            <param name="readOutcome"> into which the fragments read value has been packed. </param>
            <returns> the number of fragments that have been read. </returns>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermReader.Offset(System.Int64)">
            <summary>
            The offset up to which the term has progressed.
            </summary>
            <param name="readOutcome"> into which the offset value has been packed. </param>
            <returns> the offset up to which the term has progressed. </returns>
        </member>
        <member name="T:Adaptive.Aeron.LogBuffer.TermRebuilder">
            <summary>
            Rebuild a term buffer from received frames which can be out-of-order. The resulting data structure will only
            monotonically increase in state.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.LogBuffer.TermRebuilder.Insert(Adaptive.Agrona.Concurrent.IAtomicBuffer,System.Int32,Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Insert a packet of frames into the log at the appropriate termOffset as indicated by the term termOffset header.
            
            If the packet has already been inserted then this is a noop.
            </summary>
            <param name="termBuffer"> into which the packet should be inserted. </param>
            <param name="termOffset"> in the term at which the packet should be inserted. </param>
            <param name="packet">     containing a sequence of frames. </param>
            <param name="length">     of the packet of frames in bytes. </param>
        </member>
        <member name="T:Adaptive.Aeron.MappedLogBuffersFactory">
            <summary>
            Default factory for mapping log buffers in the client.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Protocol.DataHeaderFlyweight">
            <summary>
            Flyweight for Data Frame header of a message fragment.
            
            <a target="_blank" href="https://github.com/real-logic/aeron/wiki/Protocol-Specification#data-frame">Data Frame</a>
            wiki page.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.HEADER_LENGTH">
            <summary>
            Length of the Data Header.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.BEGIN_FLAG">
            <summary>
            (B) - Fragment that Begins a message Flag.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.END_FLAG">
            <summary>
            (E) - Fragment that Ends a message Flag.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.BEGIN_AND_END_FLAGS">
            <summary>
            Begin and End Flags.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.EOS_FLAG">
            <summary>
            (S) - End of Stream (EOS) Flag for heartbeats after the publication is closed.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.BEGIN_END_AND_EOS_FLAGS">
            <summary>
            Begin, End, and EOS Flags.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.DEFAULT_RESERVE_VALUE">
            <summary>
            Default value to be placed in the reserved value field.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.TERM_OFFSET_FIELD_OFFSET">
            <summary>
            Offset in the frame at which the term-offset field begins.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.SESSION_ID_FIELD_OFFSET">
            <summary>
            Offset in the frame at which the session-id field begins.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.STREAM_ID_FIELD_OFFSET">
            <summary>
            Offset in the frame at which the stream-id field begins.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.TERM_ID_FIELD_OFFSET">
            <summary>
            Offset in the frame at which the term-id field begins.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.RESERVED_VALUE_OFFSET">
            <summary>
            Offset in the frame at which the reserved value field begins.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.DataHeaderFlyweight.DATA_OFFSET">
            <summary>
            Offset in the frame at which the data payload begins.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.#ctor">
            <summary>
            Default constructor which can later be used to wrap a frame.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.#ctor(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
            Construct the flyweight over a frame.
            </summary>
            <param name="buffer"> containing the frame. </param>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.FragmentLength(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Get the fragment length field from the header.
            </summary>
            <param name="termBuffer">  containing the header. </param>
            <param name="frameOffset"> in the buffer where the header starts. </param>
            <returns> the fragment length field from the header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.IsHeartbeat(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Is the frame at data frame at the beginning of packet a heartbeat message?
            </summary>
            <param name="packet"> containing the data frame. </param>
            <param name="length"> of the data frame. </param>
            <returns> true if a heartbeat otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.IsEndOfStream(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
            Does the data frame in the packet have the EOS flag set?
            </summary>
            <param name="packet"> containing the data frame. </param>
            <returns> true if the EOS flag is set otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.SessionId">
            <summary>
            return session-id field from the header.
            </summary>
            <returns> session-id field from the header.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.SessionId(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Get the session-id field from the header.
            </summary>
            <param name="termBuffer">  containing the header. </param>
            <param name="frameOffset"> in the buffer where the header starts. </param>
            <returns> the session-id field from the header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.SessionId(System.Int32)">
            <summary>
            Set the session-id field in the header.
            </summary>
            <param name="sessionId"> value to set.</param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.StreamId">
            <summary>
            Get the stream-id field from the header.
            </summary>
            <returns> he stream-id field from the header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.StreamId(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Get the stream-id field from the header.
            </summary>
            <param name="termBuffer">  containing the header. </param>
            <param name="frameOffset"> in the buffer where the header starts. </param>
            <returns> the stream-id field from the header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.StreamId(System.Int32)">
            <summary>
            Set the stream-id field in the header.
            </summary>
            <param name="streamId"> value to set. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.TermId">
            <summary>
            Get the term-id field from the header.
            </summary>
            <returns> the term-id field from the header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.TermId(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Get the term-id field from the header.
            </summary>
            <param name="termBuffer">  containing the header. </param>
            <param name="frameOffset"> in the buffer where the header starts. </param>
            <returns> the term-id field from the header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.TermId(System.Int32)">
            <summary>
            Set the term-id field in the header.
            </summary>
            <param name="termId"> value to set. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.TermOffset">
            <summary>
            Get the term-offset field from the header.
            </summary>
            <returns> the term-offset field from the header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.TermOffset(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Get the term-offset field from the header.
            </summary>
            <param name="termBuffer">  containing the header. </param>
            <param name="frameOffset"> in the buffer where the header starts. </param>
            <returns> the term-offset field from the header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.TermOffset(System.Int32)">
            <summary>
            Set the term-offset field in the header.
            </summary>
            <param name="termOffset"> value to set. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.ReservedValue">
            <summary>
            Get the reserved value in LITTLE_ENDIAN format.
            </summary>
            <returns> value of the reserved value. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.ReservedValue(Adaptive.Agrona.Concurrent.UnsafeBuffer,System.Int32)">
            <summary>
            Get the reserved value field from the header.
            </summary>
            <param name="termBuffer">  containing the header. </param>
            <param name="frameOffset"> in the buffer where the header starts. </param>
            <returns> the reserved value field from the header. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.ReservedValue(System.Int64)">
            <summary>
            Set the reserved value in LITTLE_ENDIAN format.
            </summary>
            <param name="reservedValue"> to be stored </param>
            <returns> flyweight </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.DataOffset">
            <summary>
            Return offset in buffer for data
            </summary>
            <returns> offset of data in the buffer </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.DataHeaderFlyweight.CreateDefaultHeader(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return an initialised default Data Frame Header.
            </summary>
            <param name="sessionId"> for the header </param>
            <param name="streamId">  for the header </param>
            <param name="termId">    for the header </param>
            <returns> byte array containing the header </returns>
        </member>
        <member name="T:Adaptive.Aeron.Protocol.HeaderFlyweight">
            <summary>
            Flyweight for general Aeron network protocol header of a message frame.
            
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                        Frame Length                           |
            +---------------------------------------------------------------+
            |  Version    |     Flags     |               Type              |
            +-------------+---------------+---------------------------------+
            |                       Depends on Type                        ...
            
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_PAD">
            <summary>
            header type PAD 
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_DATA">
            <summary>
            header type DATA 
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_NAK">
            <summary>
            header type NAK 
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_SM">
            <summary>
            header type SM 
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_ERR">
            <summary>
            header type ERR 
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_SETUP">
            <summary>
            header type SETUP
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_RTTM">
            <summary>
            header type RTT Measurement 
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_RES">
            <summary>
            header type RESOLUTION
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.HDR_TYPE_EXT">
            <summary>
            header type EXT 
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.CURRENT_VERSION">
            <summary>
            default version 
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.FRAME_LENGTH_FIELD_OFFSET">
            <summary>
            Offset in the frame at which the frame length field begins.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.VERSION_FIELD_OFFSET">
            <summary>
            Offset in the frame at which the version field begins.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.FLAGS_FIELD_OFFSET">
            <summary>
            Offset in the frame at which the flags field begins.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.TYPE_FIELD_OFFSET">
            <summary>
            Offset in the frame at which the frame type field begins.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Protocol.HeaderFlyweight.MIN_HEADER_LENGTH">
            <summary>
            Minimum length of any Aeron frame.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.#ctor">
            <summary>
            Default constructor which can later be used to wrap a frame.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.#ctor(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
            Construct a flyweight which wraps a <seealso cref="T:Adaptive.Agrona.Concurrent.UnsafeBuffer"/> over the frame.
            </summary>
            <param name="buffer"> to wrap for the flyweight. </param>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.Version">
            <summary>
            The version field value.
            </summary>
            <returns> version field value. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.Version(System.Int16)">
            <summary>
            Set the version field value.
            </summary>
            <param name="version"> field value to be set. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.Flags">
            <summary>
            The flags field value.
            </summary>
            <returns> the flags field value. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.Flags(System.Int16)">
            <summary>
            Set the flags field value.
            </summary>
            <param name="flags"> field value </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.HeaderType">
            <summary>
            The type field value.
            </summary>
            <returns> the type field value. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.HeaderType(System.Int32)">
            <summary>
            Set the type field value.
            </summary>
            <param name="type"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.FrameLength">
            <summary>
            The length of the frame field value.
            </summary>
            <returns> length of the frame field value. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.FrameLength(System.Int32)">
            <summary>
            Set the length of the frame field value.
            </summary>
            <param name="length"> field value. </param>
            <returns> this for a fluent API. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.FlagsToChars(System.Int16)">
            <summary>
            Convert header flags to an array of chars to be human-readable.
            </summary>
            <param name="flags"> to be converted. </param>
            <returns> header flags converted to an array of chars to be human-readable. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Protocol.HeaderFlyweight.AppendFlagsAsChars(System.Int16,System.Text.StringBuilder)">
            <summary>
            Append header flags to an <seealso cref="T:System.Text.StringBuilder"/> to be human-readable.
            </summary>
            <param name="flags">      to be converted. </param>
            <param name="stringBuilder"> to append flags to. </param>
        </member>
        <member name="T:Adaptive.Aeron.Publication">
            <summary>
            Aeron publisher API for sending messages to subscribers of a given channel and streamId pair. <seealso cref="T:Adaptive.Aeron.Publication"/>s
            are created via the <seealso cref="M:Adaptive.Aeron.Aeron.AddPublication(System.String,System.Int32)"/> <seealso cref="M:Adaptive.Aeron.Aeron.AddExclusivePublication(System.String,System.Int32)"/>
            methods, and messages are sent via one of the <seealso cref="M:Adaptive.Aeron.Publication.Offer(Adaptive.Agrona.Concurrent.UnsafeBuffer)"/> methods.
            <para>
            The APIs used for tryClaim and offer are non-blocking.
            </para>
            <para>
            <b>Note:</b> All methods are threadsafe except offer and tryClaim for the subclass
            <seealso cref="T:Adaptive.Aeron.ExclusivePublication"/>. In the case of <seealso cref="T:Adaptive.Aeron.ConcurrentPublication"/> all methods are threadsafe.
            
            </para>
            </summary>
            <seealso cref="T:Adaptive.Aeron.ConcurrentPublication"/>
            <seealso cref="T:Adaptive.Aeron.ExclusivePublication"/>
            <seealso cref="M:Adaptive.Aeron.Aeron.AddPublication(System.String,System.Int32)"/>
            <seealso cref="M:Adaptive.Aeron.Aeron.AddExclusivePublication(System.String,System.Int32)"/>
        </member>
        <member name="F:Adaptive.Aeron.Publication.NOT_CONNECTED">
            <summary>
            The publication is not connected to a subscriber, this can be an intermittent state as subscribers come and go.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Publication.BACK_PRESSURED">
            <summary>
            The offer failed due to back pressure from the subscribers preventing further transmission.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Publication.ADMIN_ACTION">
            <summary>
            The offer failed due to an administration action and should be retried.
            The action is an operation such as log rotation which is likely to have succeeded by the next retry attempt.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Publication.CLOSED">
            <summary>
            The <seealso cref="T:Adaptive.Aeron.Publication"/> has been closed and should no longer be used.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Publication.MAX_POSITION_EXCEEDED">
            <summary>
            The offer failed due to reaching the maximum position of the stream given term buffer length times the total
            possible number of terms.
            <para>
            If this happens then the publication should be closed and a new one added. To make it less likely to happen then
            increase the term buffer length.
            </para>
            </summary>
        </member>
        <member name="P:Adaptive.Aeron.Publication.PositionBitsToShift">
            <summary>
            Number of bits to right shift a position to get a term count for how far the stream has progressed.
            </summary>
            <returns> of bits to right shift a position to get a term count for how far the stream has progressed. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.TermBufferLength">
            <summary>
            Get the length in bytes for each term partition in the log buffer.
            </summary>
            <returns> the length in bytes for each term partition in the log buffer. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.MaxPossiblePosition">
            <summary>
            The maximum possible position this stream can reach due to its term buffer length.
            
            Maximum possible position is term-length times 2^31 in bytes.
            
            </summary>
            <returns> the maximum possible position this stream can reach due to it term buffer length. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.Channel">
            <summary>
            Media address for delivery to the channel.
            </summary>
            <returns> Media address for delivery to the channel. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.StreamId">
            <summary>
            Stream identity for scoping within the channel media address.
            </summary>
            <returns> Stream identity for scoping within the channel media address. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.SessionId">
            <summary>
            Session under which messages are published. Identifies this Publication instance. Sessions are unique across
            all active publications on a driver instance.
            </summary>
            <returns> the session id for this publication. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.InitialTermId">
            <summary>
            The initial term id assigned when this <seealso cref="T:Adaptive.Aeron.Publication"/> was created. This can be used to determine how many
            terms have passed since creation.
            </summary>
            <returns> the initial term id. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.MaxMessageLength">
            <summary>
            Maximum message length supported in bytes. Messages may be made of of multiple fragments if greater than
            MTU length.
            </summary>
            <returns> maximum message length supported in bytes. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.MaxPayloadLength">
            <summary>
            Maximum length of a message payload that fits within a message fragment.
            
            This is he MTU length minus the message fragment header length.
            
            <returns>maximum message fragment payload length.</returns>
            </summary>
        </member>
        <member name="P:Adaptive.Aeron.Publication.OriginalRegistrationId">
            <summary>
            Get the registration used to register this Publication with the media driver by the first publisher.
            </summary>
            <returns> original registration id </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.IsOriginal">
            <summary>
            Is this Publication the original instance added to the driver? If not then it was added after another client
            has already added the publication.
            </summary>
            <returns> true if this instance is the first added otherwise false. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.RegistrationId">
            <summary>
            Get the registration id used to register this Publication with the media driver.
            
            If this value is different from the <see cref="P:Adaptive.Aeron.Publication.OriginalRegistrationId"/> then a previous active registration exists.
            </summary>
            <returns> registration id </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.IsConnected">
            <summary>
            Has the <seealso cref="T:Adaptive.Aeron.Publication"/> seen an active Subscriber recently?
            </summary>
            <returns> true if this <seealso cref="T:Adaptive.Aeron.Publication"/> has seen an active subscriber otherwise false. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Publication.Dispose">
            <summary>
            Release resources used by this Publication when there are no more references.
            
            Publications are reference counted and are only truly closed when the ref count reaches zero.
            </summary>
        </member>
        <member name="P:Adaptive.Aeron.Publication.IsClosed">
            <summary>
            Has this object been closed and should no longer be used?
            </summary>
            <returns> true if it has been closed otherwise false. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.ChannelStatus">
            <summary>
            Get the status of the media channel for this Publication.
            <para>
            The status will be <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ERRORED"/> if a socket exception occurs on setup
            and <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ACTIVE"/> if all is well.
                
            </para>
            </summary>
            <returns> status for the channel as one of the constants from <seealso cref="T:Adaptive.Aeron.Status.ChannelEndpointStatus"/> with it being
            <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.NO_ID_ALLOCATED"/> if the publication is closed. </returns>
            <seealso cref="T:Adaptive.Aeron.Status.ChannelEndpointStatus"/>
        </member>
        <member name="P:Adaptive.Aeron.Publication.ChannelStatusId">
            <summary>
            Get the counter used to represent the channel status for this publication.
            </summary>
            <returns> the counter used to represent the channel status for this publication. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Publication.LocalSocketAddresses">
            <summary>
            Fetches the local socket address for this publication. If the channel is not
            <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ACTIVE"/>, then this will return an empty list.
               
            The format is as follows:
            IPv4: <code>ip address:port</code>
            IPv6: <code>[ip6 address]:port</code>
            This is to match the formatting used in the Aeron URI. For publications this will be the control address and
            is likely to only contain a single entry.
            </summary>
            <returns> local socket addresses for this publication. </returns>
            <seealso cref="P:Adaptive.Aeron.Publication.ChannelStatus"/>
        </member>
        <member name="P:Adaptive.Aeron.Publication.Position">
            <summary>
            Get the current position to which the publication has advanced for this stream.
            </summary>
            <returns> the current position to which the publication has advanced for this stream or <see cref="F:Adaptive.Aeron.Publication.CLOSED"/>. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.PositionLimit">
            <summary>
            Get the position limit beyond which this <seealso cref="T:Adaptive.Aeron.Publication"/> will be back pressured.
            
            This should only be used as a guide to determine when back pressure is likely to be applied.
            </summary>
            <returns> the position limit beyond which this <seealso cref="T:Adaptive.Aeron.Publication"/> will be back pressured. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.PositionLimitId">
            <summary>
            Get the counter id for the position limit after which the publication will be back pressured.
            </summary>
            <returns> the counter id for the position limit after which the publication will be back pressured. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Publication.AvailableWindow">
            <summary>
            Available window for offering into a publication before the <seealso cref="P:Adaptive.Aeron.Publication.PositionLimit"/> is reached.
            </summary>
            <returns>  window for offering into a publication before the <seealso cref="P:Adaptive.Aeron.Publication.PositionLimit"/> is reached. If
            the publication is closed then <seealso cref="F:Adaptive.Aeron.Publication.CLOSED"/> will be returned. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Publication.Offer(Adaptive.Agrona.Concurrent.UnsafeBuffer)">
            <summary>
            Non-blocking publish of a buffer containing a message.
            </summary>
            <param name="buffer"> containing message. </param>
            <returns> The new stream position, otherwise <seealso cref="F:Adaptive.Aeron.Publication.NOT_CONNECTED"/>, <seealso cref="F:Adaptive.Aeron.Publication.BACK_PRESSURED"/>,
            <seealso cref="F:Adaptive.Aeron.Publication.ADMIN_ACTION"/>, <seealso cref="F:Adaptive.Aeron.Publication.CLOSED"/> or <see cref="F:Adaptive.Aeron.Publication.MAX_POSITION_EXCEEDED"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Publication.Offer(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <summary>
            Non-blocking publish of a partial buffer containing a message.
            </summary>
            <param name="buffer"> containing message. </param>
            <param name="offset"> offset in the buffer at which the encoded message begins. </param>
            <param name="length"> in bytes of the encoded message. </param>
            <param name="reservedValueSupplier"> <see cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame.</param>
            <returns> The new stream position, otherwise a negative error value <seealso cref="F:Adaptive.Aeron.Publication.NOT_CONNECTED"/>, <seealso cref="F:Adaptive.Aeron.Publication.BACK_PRESSURED"/>,
            <seealso cref="F:Adaptive.Aeron.Publication.ADMIN_ACTION"/>, <seealso cref="F:Adaptive.Aeron.Publication.CLOSED"/> or <see cref="F:Adaptive.Aeron.Publication.MAX_POSITION_EXCEEDED"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Publication.Offer(Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Agrona.IDirectBuffer,System.Int32,System.Int32,Adaptive.Aeron.ReservedValueSupplier)">
            <summary>
            Non-blocking publish of a message composed of two parts, e.g. a header and encapsulated payload.
            </summary>
            <param name="bufferOne">             containing the first part of the message. </param>
            <param name="offsetOne">             at which the first part of the message begins. </param>
            <param name="lengthOne">             of the first part of the message. </param>
            <param name="bufferTwo">             containing the second part of the message. </param>
            <param name="offsetTwo">             at which the second part of the message begins. </param>
            <param name="lengthTwo">             of the second part of the message. </param>
            <param name="reservedValueSupplier"> <seealso cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame. </param>
            <returns> The new stream position, otherwise a negative error value of <seealso cref="F:Adaptive.Aeron.Publication.NOT_CONNECTED"/>,
            <seealso cref="F:Adaptive.Aeron.Publication.BACK_PRESSURED"/>, <seealso cref="F:Adaptive.Aeron.Publication.ADMIN_ACTION"/>, <seealso cref="F:Adaptive.Aeron.Publication.CLOSED"/>, or <seealso cref="F:Adaptive.Aeron.Publication.MAX_POSITION_EXCEEDED"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Publication.Offer(Adaptive.Aeron.DirectBufferVector[],Adaptive.Aeron.ReservedValueSupplier)">
            <summary>
            Non-blocking publish by gathering buffer vectors into a message.
            </summary>
            <param name="vectors"> which make up the message. </param>
            <param name="reservedValueSupplier"> <see cref="T:Adaptive.Aeron.ReservedValueSupplier"/> for the frame.</param>
            <returns> The new stream position, otherwise a negative error value <seealso cref="F:Adaptive.Aeron.Publication.NOT_CONNECTED"/>, <seealso cref="F:Adaptive.Aeron.Publication.BACK_PRESSURED"/>,
            <seealso cref="F:Adaptive.Aeron.Publication.ADMIN_ACTION"/>, <seealso cref="F:Adaptive.Aeron.Publication.CLOSED"/> or <see cref="F:Adaptive.Aeron.Publication.MAX_POSITION_EXCEEDED"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Publication.TryClaim(System.Int32,Adaptive.Aeron.LogBuffer.BufferClaim)">
             <summary>
             Try to claim a range in the publication log into which a message can be written with zero copy semantics.
             Once the message has been written then <seealso cref="M:Adaptive.Aeron.LogBuffer.BufferClaim.Commit"/> should be called thus making it available.
             A claim length cannot be greater than <see cref="P:Adaptive.Aeron.Publication.MaxPayloadLength"/>
             
             <b>Note:</b> This method can only be used for message lengths less than MTU length minus header.
             If the claim is held for more than the aeron.publication.unblock.timeout system property then the driver will
             assume the publication thread is dead and will unblock the claim thus allowing other threads to make progress
             for <see cref="T:Adaptive.Aeron.ConcurrentPublication"/> and other claims to be sent to reach end-of-stream (EOS).
            
             <code>
                 BufferClaim bufferClaim = new BufferClaim(); // Can be stored and reused to avoid allocation
                 
                 if (publication.TryClaim(messageLength, bufferClaim) > 0L)
                 {
                     try
                     {
                          IMutableDirectBuffer buffer = bufferClaim.Buffer;
                          int offset = bufferClaim.Offset;
                 
                          // Work with buffer directly or wrap with a flyweight
                     }
                     finally
                     {
                         bufferClaim.Commit();
                     }
                 }
             </code>
             
             </summary>
             <param name="length">      of the range to claim, in bytes.. </param>
             <param name="bufferClaim"> to be populated if the claim succeeds. </param>
             <returns> The new stream position, otherwise <seealso cref="F:Adaptive.Aeron.Publication.NOT_CONNECTED"/>, <seealso cref="F:Adaptive.Aeron.Publication.BACK_PRESSURED"/>,
             <seealso cref="F:Adaptive.Aeron.Publication.ADMIN_ACTION"/>, <seealso cref="F:Adaptive.Aeron.Publication.CLOSED"/> or <see cref="F:Adaptive.Aeron.Publication.MAX_POSITION_EXCEEDED"/>. </returns>
             <exception cref="T:System.ArgumentException"> if the length is greater than max payload length within an MTU. </exception>
             <seealso cref="M:Adaptive.Aeron.LogBuffer.BufferClaim.Commit" />
             <seealso cref="M:Adaptive.Aeron.LogBuffer.BufferClaim.Abort" />
        </member>
        <member name="M:Adaptive.Aeron.Publication.AddDestination(System.String)">
            <summary>
            Add a destination manually to a multi-destination-cast Publication.
            </summary>
            <param name="endpointChannel"> for the destination to add </param>
        </member>
        <member name="M:Adaptive.Aeron.Publication.RemoveDestination(System.String)">
            <summary>
            Remove a previously added destination manually from a multi-destination-cast Publication.
            </summary>
            <param name="endpointChannel"> for the destination to remove </param>
        </member>
        <member name="M:Adaptive.Aeron.Publication.AsyncAddDestination(System.String)">
            <summary>
            Asynchronously add a destination manually to a multi-destination-cast Publication.
            <para>
            Errors will be delivered asynchronously to the <seealso cref="M:Adaptive.Aeron.Aeron.Context.ErrorHandler"/>. Completion can be
            tracked by passing the returned correlation id to <seealso cref="M:Adaptive.Aeron.Aeron.IsCommandActive(System.Int64)"/>.
               
            </para>
            </summary>
            <param name="endpointChannel"> for the destination to add. </param>
            <returns> the correlationId for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Publication.AsyncRemoveDestination(System.String)">
            <summary>
            Asynchronously remove a previously added destination from a multi-destination-cast Publication.
            <para>
            Errors will be delivered asynchronously to the <seealso cref="M:Adaptive.Aeron.Aeron.Context.ErrorHandler"/>. Completion can be
            tracked by passing the returned correlation id to <seealso cref="M:Adaptive.Aeron.Aeron.IsCommandActive(System.Int64)"/>.
            
            </para>
            </summary>
            <param name="endpointChannel"> for the destination to remove. </param>
            <returns> the correlationId for the command. </returns>
        </member>
        <member name="T:Adaptive.Aeron.ReservedValueSupplier">
            <summary>
            Supplies the reserved value field for a data frame header. The returned value will be set in the header as
            <seealso cref="F:Adaptive.Agrona.ByteOrder.LittleEndian"/> format.
            <para>
            This will be called as the last action of encoding a data frame right before the length is set. All other fields
            in the header plus the body of the frame will have been written at the point of supply.
            </para>
            <para>
            The reserved value can be used for carrying out of band data with message fragments such a checksums or timestamps.
            </para>
            
            Callback to provide the reserved value to be encoded with each message fragment as the last action
            before the length field is set which commits the fragment for sending to the media.
            </summary>
            <param name="termBuffer">  containing the encoding message fragment. </param>
            <param name="termOffset">  at which the header of the frame begins. </param>
            <param name="frameLength"> Total length of the frame including header. </param>
            <returns> the value to be used for storing in the reserved value field. </returns>
        </member>
        <member name="T:Adaptive.Aeron.RethrowingErrorHandler">
            <summary>
            Error handler that will rethrow an <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.RethrowingErrorHandler.INSTANCE">
            <summary>
            Singleton instance to avoid allocation.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Security.AuthenticationException">
            <summary>
            Used to indicate a failed authentication attempt when connecting to a system.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Security.AuthenticationException.#ctor(System.String)">
            <summary>
            Authentication exception with provided message and <seealso cref="F:Adaptive.Aeron.Exceptions.Category.ERROR"/>.
            </summary>
            <param name="message"> to detail the exception. </param>
        </member>
        <member name="T:Adaptive.Aeron.Security.DefaultAuthenticatorSupplier">
            <summary>
            Default Authenticator which authenticates all connection requests immediately.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Security.DefaultAuthenticatorSupplier.NULL_ENCODED_PRINCIPAL">
            <summary>
            The null encoded principal is an empty array of bytes.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Security.DefaultAuthenticatorSupplier.DEFAULT_AUTHENTICATOR">
            <summary>
            Singleton instance which can be used to avoid allocation.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Security.DefaultAuthenticatorSupplier.Get">
            <summary>
            Gets the singleton instance <seealso cref="F:Adaptive.Aeron.Security.DefaultAuthenticatorSupplier.DEFAULT_AUTHENTICATOR"/> which authenticates all connection requests
            immediately.
            </summary>
            <returns> <seealso cref="F:Adaptive.Aeron.Security.DefaultAuthenticatorSupplier.DEFAULT_AUTHENTICATOR"/> which authenticates all connection requests immediately. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Security.IAuthenticator">
             <summary>
             Interface for an Authenticator to handle authentication of clients to a system.
             <para>
             The session-id refers to the authentication session and not the Aeron transport session assigned to a publication.
             </para>
            
             <seealso cref="T:Adaptive.Aeron.Security.ISessionProxy"/>
             <see cref="T:Adaptive.Aeron.Security.IAuthenticatorSupplier"/>
             </summary>
        </member>
        <member name="M:Adaptive.Aeron.Security.IAuthenticator.OnConnectRequest(System.Int64,System.Byte[],System.Int64)">
            <summary>
            Called upon reception of a Connect Request and will be followed up by multiple calls to <seealso cref="M:Adaptive.Aeron.Security.IAuthenticator.OnConnectedSession(Adaptive.Aeron.Security.ISessionProxy,System.Int64)"/>
            one the response channel is connected.
            </summary>
            <param name="sessionId">          to identify the client session connecting. </param>
            <param name="encodedCredentials"> from the Connect Request. Will not be null, but may be 0 length. </param>
            <param name="nowMs">              current epoch time in milliseconds. </param>
        </member>
        <member name="M:Adaptive.Aeron.Security.IAuthenticator.OnChallengeResponse(System.Int64,System.Byte[],System.Int64)">
            <summary>
            Called upon reception of a Challenge Response from an unauthenticated client.
            </summary>
            <param name="sessionId">          to identify the client session connecting. </param>
            <param name="encodedCredentials"> from the Challenge Response. Will not be null, but may be 0 length. </param>
            <param name="nowMs">              current epoch time in milliseconds. </param>
        </member>
        <member name="M:Adaptive.Aeron.Security.IAuthenticator.OnConnectedSession(Adaptive.Aeron.Security.ISessionProxy,System.Int64)">
            <summary>
            Called when a client's response channel has been connected. This method may be called multiple times until the
            session timeouts, is challenged, authenticated, or rejected.
            </summary>
            <param name="sessionProxy"> to use to update authentication status. Proxy is only valid for the duration of the call. </param>
            <param name="nowMs">        current epoch time in milliseconds. </param>
            <seealso cref="T:Adaptive.Aeron.Security.ISessionProxy"/>
        </member>
        <member name="M:Adaptive.Aeron.Security.IAuthenticator.OnChallengedSession(Adaptive.Aeron.Security.ISessionProxy,System.Int64)">
            <summary>
            Called when a challenged client should be able to accept a response from the authenticator.
            <para>
            When this is called, there is no assumption that a Challenge Response has been received, plus this method
            may be called multiple times.
            </para>
            <para>
            It is up to the concrete class to provide any timeout management.
            
            </para>
            </summary>
            <param name="sessionProxy"> to use to update authentication status. Proxy is only valid for the duration of the call. </param>
            <param name="nowMs">        current epoch time in milliseconds. </param>
            <seealso cref="T:Adaptive.Aeron.Security.ISessionProxy"/>
        </member>
        <member name="T:Adaptive.Aeron.Security.IAuthenticatorSupplier">
            <summary>
            Used to supply instances of <see cref="T:Adaptive.Aeron.Security.IAuthenticator"/>
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Security.ICredentialsSupplier">
            <summary>
            Supplier of credentials for authentication with a system.
            
            Implement this interface to supply credentials for clients. If no credentials are required then the
            <seealso cref="T:Adaptive.Aeron.Security.NullCredentialsSupplier"/> can be used.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Security.ICredentialsSupplier.EncodedCredentials">
            <summary>
            Provide a credential to be included in Session Connect message to a system.
            </summary>
            <returns> a credential in binary form to be included in the Session Connect message to system. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Security.ICredentialsSupplier.OnChallenge(System.Byte[])">
            <summary>
            Given some encoded challenge data, provide the credentials to be included in a Challenge Response as part of
            authentication with a system.
            </summary>
            <param name="endcodedChallenge"> from the cluster to use in providing a credential. </param>
            <returns> encoded credentials in binary form to be included in the Challenge Response to the system. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Security.ISessionProxy">
            <summary>
            Representation of a session during the authentication process from the perspective of an <seealso cref="T:Adaptive.Aeron.Security.IAuthenticator"/>.
            </summary>
            <seealso cref="T:Adaptive.Aeron.Security.IAuthenticator"/>
        </member>
        <member name="M:Adaptive.Aeron.Security.ISessionProxy.SessionId">
            <summary>
            The identity of the potential session assigned by the system.
            </summary>
            <returns> identity for the potential session. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Security.ISessionProxy.Challenge(System.Byte[])">
            <summary>
            Inform the system that the session requires a challenge by sending the provided encoded challenge.
            </summary>
            <param name="encodedChallenge"> to be sent to the client. </param>
            <returns> true if challenge was accepted to be sent at present time or false if it will be retried later. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Security.ISessionProxy.Authenticate(System.Byte[])">
            <summary>
            Inform the system that the session has met authentication requirements.
            </summary>
            <param name="encodedPrincipal"> that has passed authentication. </param>
            <returns> true if authentication was accepted at present time or false if it will be retried later. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Security.ISessionProxy.Reject">
            <summary>
            Inform the system that the session should be rejected.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Security.NullCredentialsSupplier">
            <summary>
            Null provider of credentials when no authentication is required.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Security.NullCredentialsSupplier.NULL_CREDENTIAL">
            <summary>
            Null credentials are an empty array of bytes.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Security.NullCredentialsSupplier.EncodedCredentials">
            <inheritdoc />
        </member>
        <member name="M:Adaptive.Aeron.Security.NullCredentialsSupplier.OnChallenge(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:Adaptive.Aeron.Status.ChannelEndpointStatus">
            <summary>
            Status of the Aeron media channel for a <seealso cref="T:Adaptive.Aeron.Publication"/> or <seealso cref="T:Adaptive.Aeron.Subscription"/>.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Status.ChannelEndpointStatus.INITIALIZING">
            <summary>
            Channel is being initialized.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ERRORED">
            <summary>
            Channel has errored. Check error log for information.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ACTIVE">
            <summary>
            Channel has finished initialization successfully and is active.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Status.ChannelEndpointStatus.CLOSING">
            <summary>
            Channel is being closed.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Status.ChannelEndpointStatus.NO_ID_ALLOCATED">
            <summary>
            No counter ID is allocated yet.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Status.ChannelEndpointStatus.CHANNEL_OFFSET">
            <summary>
            Offset in the key metadata for the channel of the counter.
            </summary>
        </member>
        <member name="T:Adaptive.Aeron.Status.HeartbeatTimestamp">
            <summary>
            Allocate a counter for tracking the last heartbeat of an entity with a given registration id.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Status.HeartbeatTimestamp.HEARTBEAT_TYPE_ID">
            <summary>
            Type id of a heartbeat counter.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Status.HeartbeatTimestamp.REGISTRATION_ID_OFFSET">
            <summary>
            Offset in the key metadata for the registration id of the counter.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Status.HeartbeatTimestamp.FindCounterIdByRegistrationId(Adaptive.Agrona.Concurrent.Status.CountersReader,System.Int32,System.Int64)">
            <summary>
            Find the active counter id for a heartbeat timestamp.
            </summary>
            <param name="countersReader"> to search within. </param>
            <param name="counterTypeId">  to match on. </param>
            <param name="registrationId"> for the active client. </param>
            <returns> the counter id if found otherwise <seealso cref="F:Adaptive.Agrona.Concurrent.Status.CountersReader.NULL_COUNTER_ID"/>. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Status.HeartbeatTimestamp.IsActive(Adaptive.Agrona.Concurrent.Status.CountersReader,System.Int32,System.Int32,System.Int64)">
            <summary>
            Is the counter active for usage? Checks to see if reclaimed or reused and matches registration id.
            </summary>
            <param name="countersReader"> to search within. </param>
            <param name="counterId">      to test. </param>
            <param name="counterTypeId">  to validate type. </param>
            <param name="registrationId"> for the entity. </param>
            <returns> true if still valid otherwise false. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Status.LocalSocketAddressStatus">
            <summary>
            Counter used to store the status of a bind address and port for the local end of a channel.
            <para>
            When the value is <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ACTIVE"/> then the key value and label will be updated with the
            socket address and port which is bound.
            </para>
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Status.LocalSocketAddressStatus.INITIAL_LENGTH">
            <summary>
            Initial length for a key, this will be expanded later when bound.
            </summary>
        </member>
        <member name="F:Adaptive.Aeron.Status.LocalSocketAddressStatus.LOCAL_SOCKET_ADDRESS_STATUS_TYPE_ID">
            <summary>
            Type of the counter used to track a local socket address and port.
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Status.LocalSocketAddressStatus.FindAddresses(Adaptive.Agrona.Concurrent.Status.CountersReader,System.Int64,System.Int32)">
            <summary>
            Find the list of currently bound local sockets.
            </summary>
            <param name="countersReader">  for the connected driver. </param>
            <param name="channelStatus">   value for the channel which aggregates the transports. </param>
            <param name="channelStatusId"> identity of the counter for the channel which aggregates the transports. </param>
            <returns> the list of active bound local socket addresses. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Status.LocalSocketAddressStatus.FindAddress(Adaptive.Agrona.Concurrent.Status.CountersReader,System.Int64,System.Int32)">
            <summary>
            Find the currently bound socket address for the channel. There is an expectation that only one exists when
            searching.
            </summary>
            <param name="countersReader">  for the connected driver. </param>
            <param name="channelStatus">   value for the channel which aggregates the transports. </param>
            <param name="channelStatusId"> identity of the counter for the channel which aggregates the transports. </param>
            <returns> the endpoint representing the bound socket address or null if not found. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Status.ReadableCounter">
            <summary>
            Readonly view of an associated <seealso cref="T:Adaptive.Aeron.Counter"/>.
            <para>
            <b>Note:</b>The user should call <seealso cref="P:Adaptive.Aeron.Status.ReadableCounter.IsClosed"/> and ensure the result is false to avoid a race on reading a
            closed <seealso cref="T:Adaptive.Aeron.Counter"/>.
            
            </para>
            </summary>
        </member>
        <member name="M:Adaptive.Aeron.Status.ReadableCounter.#ctor(Adaptive.Agrona.Concurrent.Status.CountersReader,System.Int64,System.Int32)">
            <summary>
            Construct a view of an existing counter.
            </summary>
            <param name="countersReader"> for getting access to the buffers. </param>
            <param name="registrationId"> assigned by the driver for the counter or <see cref="F:Adaptive.Aeron.Aeron.NULL_VALUE"/> if not known. </param>
            <param name="counterId">      for the counter to be viewed. </param>
            <exception cref="T:System.InvalidOperationException"> if the id has for the counter has not been allocated. </exception>
        </member>
        <member name="M:Adaptive.Aeron.Status.ReadableCounter.#ctor(Adaptive.Agrona.Concurrent.Status.CountersReader,System.Int32)">
            <summary>
            Construct a view of an existing counter.
            </summary>
            <param name="countersReader"> for getting access to the buffers. </param>
            <param name="counterId">      for the counter to be viewed. </param>
            <exception cref="T:System.InvalidOperationException"> if the id has for the counter has not been allocated. </exception>
        </member>
        <member name="P:Adaptive.Aeron.Status.ReadableCounter.RegistrationId">
            <summary>
            Return the registration id for the counter.
            </summary>
            <returns> registration id. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Status.ReadableCounter.CounterId">
            <summary>
            Return the counter id.
            </summary>
            <returns> counter id. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Status.ReadableCounter.State">
            <summary>
            Return the state of the counter.
            </summary>
            <seealso cref="F:Adaptive.Agrona.Concurrent.Status.CountersReader.RECORD_ALLOCATED"/>
            <seealso cref="F:Adaptive.Agrona.Concurrent.Status.CountersReader.RECORD_RECLAIMED"/>
            <seealso cref="F:Adaptive.Agrona.Concurrent.Status.CountersReader.RECORD_UNUSED"/>
            <returns> state for the counter. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Status.ReadableCounter.Label">
            <summary>
            Return the counter label.
            </summary>
            <returns> the counter label. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Status.ReadableCounter.Get">
            <summary>
            Get the latest value for the counter with volatile semantics.
            <para>
            <b>Note:</b>The user should call <seealso cref="P:Adaptive.Aeron.Status.ReadableCounter.IsClosed"/> and ensure the result is false to avoid a race on reading
            a closed counter.
            
            </para>
            </summary>
            <returns> the latest value for the counter. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Status.ReadableCounter.GetWeak">
            <summary>
            Get the value of the counter using weak ordering semantics. This is the same a standard read of a field.
            </summary>
            <returns> the  value for the counter. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Status.ReadableCounter.Dispose">
            <summary>
            Close this counter. This has no impact on the <seealso cref="T:Adaptive.Aeron.Counter"/> it is viewing.
            </summary>
        </member>
        <member name="P:Adaptive.Aeron.Status.ReadableCounter.IsClosed">
            <summary>
            Has this counter been closed and should no longer be used?
            </summary>
            <returns> true if it has been closed otherwise false. </returns>
        </member>
        <member name="T:Adaptive.Aeron.Subscription">
            <summary>
            Aeron Subscriber API for receiving a reconstructed <seealso cref="T:Adaptive.Aeron.Image"/> for a stream of messages from publishers on
            a given channel and streamId pair, i.e. a <see cref="T:Adaptive.Aeron.Publication"/>. <seealso cref="T:Adaptive.Aeron.Image"/>s are aggregated under a <seealso cref="T:Adaptive.Aeron.Subscription"/>.
            
            <seealso cref="T:Adaptive.Aeron.Subscription"/>s are created via an <seealso cref="T:Adaptive.Aeron.Aeron"/> object, and received messages are delivered
            to the <seealso cref="T:Adaptive.Aeron.LogBuffer.FragmentHandler"/>.
            
            By default fragmented messages are not reassembled before delivery. If an application must
            receive whole messages, whether or not they were fragmented, then the Subscriber
            should be created with a <seealso cref="T:Adaptive.Aeron.FragmentAssembler"/> or a custom implementation.
            
            It is an application's responsibility to <seealso cref="M:Adaptive.Aeron.Subscription.Poll(Adaptive.Aeron.LogBuffer.IFragmentHandler,System.Int32)"/> the <seealso cref="T:Adaptive.Aeron.Subscription"/> for new messages.
            
            <b>Note:</b>Subscriptions are not threadsafe and should not be shared between subscribers.
            </summary>
            <seealso cref="T:Adaptive.Aeron.FragmentAssembler"/>
            <seealso cref="T:Adaptive.Aeron.LogBuffer.ControlledFragmentHandler"/>
            <seealso cref="M:Adaptive.Aeron.Aeron.AddSubscription(System.String,System.Int32)"/>
            <seealso cref="M:Adaptive.Aeron.Aeron.AddSubscription(System.String,System.Int32,Adaptive.Aeron.AvailableImageHandler,Adaptive.Aeron.UnavailableImageHandler)"/>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.Channel">
            <summary>
            Media address for delivery to the channel.
            </summary>
            <returns> Media address for delivery to the channel. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.StreamId">
            <summary>
            Stream identity for scoping within the channel media address.
            </summary>
            <returns> Stream identity for scoping within the channel media address. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.RegistrationId">
            <summary>
            Return the registration id used to register this Subscription with the media driver.
            </summary>
            <returns> registration id </returns>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.AvailableImageHandler">
            <summary>
            Callback used to indicate when an <see cref="T:Adaptive.Aeron.Image"/> becomes available under this <see cref="T:Adaptive.Aeron.Subscription"/>
            </summary>
            <returns> callback used to indicate when an <see cref="T:Adaptive.Aeron.Image"/> becomes available under this <see cref="T:Adaptive.Aeron.Subscription"/>.</returns>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.UnavailableImageHandler">
            <summary>
            Callback used to indicate when an <see cref="T:Adaptive.Aeron.Image"/> goes unavailable under this <see cref="T:Adaptive.Aeron.Subscription"/>
            </summary>
            <returns> callback used to indicate when an <see cref="T:Adaptive.Aeron.Image"/> goes unavailable under this <see cref="T:Adaptive.Aeron.Subscription"/>.</returns>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.Poll(Adaptive.Aeron.LogBuffer.FragmentHandler,System.Int32)">
            <summary>
            Poll the <seealso cref="T:Adaptive.Aeron.Image"/>s under the subscription for available message fragments.
            <para>
            Each fragment read will be a whole message if it is under MTU length. If larger than MTU then it will come
            as a series of fragments ordered within a session.
            </para>
            <para>
            To assemble messages that span multiple fragments then use <seealso cref="T:Adaptive.Aeron.FragmentAssembler"/>.
            
            </para>
            </summary>
            <param name="fragmentHandler"> callback for handling each message fragment as it is read. </param>
            <param name="fragmentLimit">   number of message fragments to limit when polling across multiple <seealso cref="T:Adaptive.Aeron.Image"/>s. </param>
            <returns> the number of fragments received </returns>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.Poll(Adaptive.Aeron.LogBuffer.IFragmentHandler,System.Int32)">
            <summary>
            Poll the <seealso cref="T:Adaptive.Aeron.Image"/>s under the subscription for available message fragments.
            <para>
            Each fragment read will be a whole message if it is under MTU length. If larger than MTU then it will come
            as a series of fragments ordered within a session.
            </para>
            <para>
            To assemble messages that span multiple fragments then use <seealso cref="T:Adaptive.Aeron.FragmentAssembler"/>.
            
            </para>
            </summary>
            <param name="fragmentHandler"> callback for handling each message fragment as it is read. </param>
            <param name="fragmentLimit">   number of message fragments to limit when polling across multiple <seealso cref="T:Adaptive.Aeron.Image"/>s. </param>
            <returns> the number of fragments received </returns>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.ControlledPoll(Adaptive.Aeron.LogBuffer.IControlledFragmentHandler,System.Int32)">
            <summary>
            Poll in a controlled manner the <seealso cref="T:Adaptive.Aeron.Image"/>s under the subscription for available message fragments.
            Control is applied to message fragments in the stream. If more fragments can be read on another stream
            they will even if BREAK or ABORT is returned from the fragment handler.
            <para>
            Each fragment read will be a whole message if it is under MTU length. If larger than MTU then it will come
            as a series of fragments ordered within a session.
            </para>
            <para>
            To assemble messages that span multiple fragments then use <seealso cref="T:Adaptive.Aeron.ControlledFragmentAssembler"/>.
                
            </para>
            </summary>
            <param name="fragmentHandler"> callback for handling each message fragment as it is read. </param>
            <param name="fragmentLimit">   number of message fragments to limit when polling across multiple <seealso cref="T:Adaptive.Aeron.Image"/>s. </param>
            <returns> the number of fragments received </returns>
            <seealso cref="T:Adaptive.Aeron.LogBuffer.ControlledFragmentHandler" />
        </member>
        <member name="M:Adaptive.Aeron.Subscription.ControlledPoll(Adaptive.Aeron.LogBuffer.ControlledFragmentHandler,System.Int32)">
            <summary>
            Poll in a controlled manner the <seealso cref="T:Adaptive.Aeron.Image"/>s under the subscription for available message fragments.
            Control is applied to fragments in the stream. If more fragments can be read on another stream
            they will even if BREAK or ABORT is returned from the fragment handler.
            <para>
            Each fragment read will be a whole message if it is under MTU length. If larger than MTU then it will come
            as a series of fragments ordered within a session.
            </para>
            <para>
            To assemble messages that span multiple fragments then use <seealso cref="T:Adaptive.Aeron.ControlledFragmentAssembler"/>.
                
            </para>
            </summary>
            <param name="fragmentHandler"> callback for handling each message fragment as it is read. </param>
            <param name="fragmentLimit">   number of message fragments to limit when polling across multiple <seealso cref="T:Adaptive.Aeron.Image"/>s. </param>
            <returns> the number of fragments received </returns>
            <seealso cref="T:Adaptive.Aeron.LogBuffer.ControlledFragmentHandler" />
        </member>
        <member name="M:Adaptive.Aeron.Subscription.BlockPoll(Adaptive.Aeron.LogBuffer.BlockHandler,System.Int32)">
            <summary>
            Poll the <seealso cref="T:Adaptive.Aeron.Image"/>s under the subscription for available message fragments in blocks.
            <para>
            This method is useful for operations like bulk archiving and messaging indexing.
            
            </para>
            </summary>
            <param name="blockHandler">     to receive a block of fragments from each <seealso cref="T:Adaptive.Aeron.Image"/>. </param>
            <param name="blockLengthLimit"> for each <seealso cref="T:Adaptive.Aeron.Image"/> polled. </param>
            <returns> the number of bytes consumed. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.IsConnected">
            <summary>
            Is this subscription connected by having at least one open publication <seealso cref="T:Adaptive.Aeron.Image"/>.
            </summary>
            <returns> true if this subscription connected by having at least one open publication  <seealso cref="T:Adaptive.Aeron.Image"/>. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.HasNoImages">
            <summary>
            Has this subscription currently no <see cref="T:Adaptive.Aeron.Image"/>s?
            </summary>
            <returns> Has this subscription currently no <see cref="T:Adaptive.Aeron.Image"/>s? </returns>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.ImageCount">
            <summary>
            Count of <see cref="T:Adaptive.Aeron.Image"/>s associated to this subscription.
            </summary>
            <returns> count of <see cref="T:Adaptive.Aeron.Image"/>s associated to this subscription. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.ImageBySessionId(System.Int32)">
            <summary>
            Return the <seealso cref="T:Adaptive.Aeron.Image"/> associated with the given sessionId.
            </summary>
            <param name="sessionId"> associated with the <see cref="T:Adaptive.Aeron.Image"/>. </param>
            <returns> Image associated with the given sessionId or null if no Image exist. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.ImageAtIndex(System.Int32)">
            <summary>
            Get the <see cref="T:Adaptive.Aeron.Image"/> at the given index from the images array.
            </summary>
            <param name="index"> in the array</param>
            <returns> image at given index</returns>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.Images">
            <summary>
            Get a <seealso cref="T:System.Collections.Generic.IList`1"/> of active <seealso cref="T:Adaptive.Aeron.Image"/>s that match this subscription.
            </summary>
            <returns> an unmodifiable <see cref="T:System.Collections.Generic.List`1"/> of active <seealso cref="T:Adaptive.Aeron.Image"/>s that match this subscription. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.ForEachImage(System.Action{Adaptive.Aeron.Image})">
            <summary>
            Iterate over the <seealso cref="T:Adaptive.Aeron.Image"/>s for this subscription.
            </summary>
            <param name="consumer"> to handle each <seealso cref="T:Adaptive.Aeron.Image"/>. </param>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.Dispose">
            <summary>
            Close the Subscription so that associated <seealso cref="T:Adaptive.Aeron.Image"/>s can be released.
            <para>
            This method is idempotent.
            </para>
            </summary>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.IsClosed">
            <summary>
            Has this object been closed and should no longer be used?
            </summary>
            <returns> true if it has been closed otherwise false. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.ChannelStatus">
            <summary>
            Get the status of the media channel for this Subscription.
            <para>
            The status will be <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ERRORED"/> if a socket exception occurs on setup
            and <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ACTIVE"/> if all is well.
            
            </para>
            </summary>
            <returns> status for the channel as one of the constants from <seealso cref="T:Adaptive.Aeron.Status.ChannelEndpointStatus"/> with it being
            <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.NO_ID_ALLOCATED"/> if the subscription is closed. </returns>
            <seealso cref="T:Adaptive.Aeron.Status.ChannelEndpointStatus"></seealso>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.ChannelStatusId">
            <summary>
            Get the counter used to represent the channel status for this Subscription.
            </summary>
            <returns> the counter used to represent the channel status for this Subscription. </returns>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.LocalSocketAddresses">
            <summary>
            Fetches the local socket addresses for this subscription. If the channel is not
            <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ACTIVE"/>, then this will return an empty list.
               
            The format is as follows:
            IPv4: <code>ip address:port</code>
            IPv6: <code>[ip6 address]:port</code>
            This is to match the formatting used in the Aeron URI.
            </summary>
            <returns> <see cref="T:System.Collections.Generic.List`1"/> of socket addresses for this subscription. </returns>
            <seealso cref="P:Adaptive.Aeron.Subscription.ChannelStatus"/>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.AddDestination(System.String)">
            <summary>
            Add a destination manually to a multi-destination Subscription.
            </summary>
            <param name="endpointChannel"> for the destination to add. </param>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.RemoveDestination(System.String)">
            <summary>
            Remove a previously added destination from a multi-destination Subscription.
            </summary>
            <param name="endpointChannel"> for the destination to remove. </param>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.AsyncAddDestination(System.String)">
            <summary>
            Asynchronously add a destination manually to a multi-destination Subscription.
            <para>
            Errors will be delivered asynchronously to the <seealso cref="M:Adaptive.Aeron.Aeron.Context.ErrorHandler"/>. Completion can be
            tracked by passing the returned correlation id to <seealso cref="M:Adaptive.Aeron.Aeron.IsCommandActive(System.Int64)"/>.
               
            </para>
            </summary>
            <param name="endpointChannel"> for the destination to add. </param>
            <returns> the correlationId for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.AsyncRemoveDestination(System.String)">
            <summary>
            Asynchronously remove a previously added destination from a multi-destination Subscription.
            <para>
            Errors will be delivered asynchronously to the <seealso cref="M:Adaptive.Aeron.Aeron.Context.ErrorHandler"/>. Completion can be
            tracked by passing the returned correlation id to <seealso cref="M:Adaptive.Aeron.Aeron.IsCommandActive(System.Int64)"/>.
            
            </para>
            </summary>
            <param name="endpointChannel"> for the destination to remove. </param>
            <returns> the correlationId for the command. </returns>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.TryResolveChannelEndpointPort">
            <summary>
            Resolve channel endpoint and replace it with the port from the ephemeral range when 0 was provided. If there are
            no addresses, or if there is more than one, returned from <seealso cref="P:Adaptive.Aeron.Subscription.LocalSocketAddresses"/> then the original
            <seealso cref="P:Adaptive.Aeron.Subscription.Channel"/> is returned.
            <para>
            If the channel is not <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ACTIVE"/>, then {@code null} will be returned.
            
            </para>
            </summary>
            <returns> channel URI string with an endpoint being resolved to the allocated port. </returns>
            <seealso cref="P:Adaptive.Aeron.Subscription.ChannelStatus"/>
            <seealso cref="P:Adaptive.Aeron.Subscription.LocalSocketAddresses"/>
        </member>
        <member name="P:Adaptive.Aeron.Subscription.ResolvedEndpoint">
            <summary>
            Find the resolved endpoint for the channel. This may be null if MDS is used and no destination is yet added.
            The result will similar to taking the first element returned from <seealso cref="P:Adaptive.Aeron.Subscription.LocalSocketAddresses"/>. If more than
            one destination is added then the first found is returned.
            <para>
            If the channel is not <seealso cref="F:Adaptive.Aeron.Status.ChannelEndpointStatus.ACTIVE"/>, then {@code null} will be returned.
            
            </para>
            </summary>
            <returns> The resolved endpoint or null if not found. </returns>
            <seealso cref="P:Adaptive.Aeron.Subscription.ChannelStatus"/>
            <seealso cref="P:Adaptive.Aeron.Subscription.LocalSocketAddresses"/>
        </member>
        <member name="M:Adaptive.Aeron.Subscription.ToString">
            <inheritdoc />
        </member>
        <member name="T:Adaptive.Aeron.UnavailableCounterHandler">
             <summary>
             Interface for notification of <seealso cref="T:Adaptive.Aeron.Counter"/>s being removed via an <seealso cref="T:Adaptive.Aeron.Aeron"/> client.
            
             Within this callback reentrant calls to the <see cref="T:Adaptive.Aeron.Aeron"/> client are not permitted and
             will result in undefined behaviour.
            
             </summary>
             <param name="countersReader"> for more detail on the counter. </param>
             <param name="registrationId"> for the counter. </param>
             <param name="counterId">      that is available. </param>
        </member>
    </members>
</doc>
